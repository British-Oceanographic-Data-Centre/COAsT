<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>COAsT â€“ Documentation</title><link>https://british-oceanographic-data-centre.github.io/COAsT/docs/</link><description>Recent content in Documentation on COAsT</description><generator>Hugo -- gohugo.io</generator><atom:link href="https://british-oceanographic-data-centre.github.io/COAsT/docs/index.xml" rel="self" type="application/rss+xml"/><item><title>Docs: The Gridded class</title><link>https://british-oceanographic-data-centre.github.io/COAsT/docs/examples/intro_gridded_class/</link><pubDate>Tue, 05 Oct 2021 00:00:00 +0000</pubDate><guid>https://british-oceanographic-data-centre.github.io/COAsT/docs/examples/intro_gridded_class/</guid><description>
&lt;p>This script is designed to be a brief introduction to the Gridded class including:&lt;/p>
&lt;pre>&lt;code>1. Creation of a Gridded object
2. Loading data into the Gridded object.
3. Combining Gridded output and Gridded domain data.
4. Interrogating the Gridded object.
5. Basic manipulation ans subsetting
6. Looking at the data with matplotlib
&lt;/code>&lt;/pre>
&lt;p>Up to date as of: 05/10/2021&lt;/p>
&lt;h3 id="loading-and-interrogating">Loading and Interrogating&lt;/h3>
&lt;p>Begin by importing COAsT and define some file paths for NEMO output data and a NEMO domain, as an example of model data suitable for the Gridded object.&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">&lt;span style="color:#204a87;font-weight:bold">import&lt;/span> &lt;span style="color:#000">coast&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">import&lt;/span> &lt;span style="color:#000">matplotlib.pyplot&lt;/span> &lt;span style="color:#204a87;font-weight:bold">as&lt;/span> &lt;span style="color:#000">plt&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">import&lt;/span> &lt;span style="color:#000">datetime&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">import&lt;/span> &lt;span style="color:#000">numpy&lt;/span> &lt;span style="color:#204a87;font-weight:bold">as&lt;/span> &lt;span style="color:#000">np&lt;/span>
&lt;span style="color:#000">fn_nemo_dat&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;./example_files/coast_example_nemo_data.nc&amp;#34;&lt;/span>
&lt;span style="color:#000">fn_nemo_dom&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;./example_files/coast_example_nemo_domain.nc&amp;#34;&lt;/span>
&lt;span style="color:#000">fn_config_t_grid&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;./config/example_nemo_grid_t.json&amp;#34;&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>We can create a new Gridded object by simple calling &lt;code>coast.Gridded()&lt;/code>. By passing this a NEMO data file and a NEMO domain file, COAsT will combine the two into a single xarray dataset within the Gridded object. Each individual Gridded object should be for a specified NEMO grid type, which is specified in a configuration file which is also passed as an argument. The Dask library is switched on by default, chunking can be specified in the configuration file.&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">&lt;span style="color:#000">nemo_t&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000">coast&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">Gridded&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">fn_data&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000">fn_nemo_dat&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">fn_domain&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000">fn_nemo_dom&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">config&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#000">fn_config_t_grid&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Our new Gridded object &lt;code>nemo_t&lt;/code> contains a variable called &lt;code>dataset&lt;/code>, which holds information on the two files we passed. Let&amp;rsquo;s have a look at this:&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">&lt;span style="color:#000">nemo_t&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">dataset&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>This is an xarray dataset, which has all the information on netCDF style structures. You can see dimensions, coordinates and data variables. At the moment, none of the actual data is loaded to memory and will remain that way until it needs to be accessed.&lt;/p>
&lt;p>Along with &lt;code>temperature&lt;/code> (which has been renamed from &lt;code>votemper&lt;/code>) a number of other things have happen under the hood:&lt;/p>
&lt;pre>&lt;code>1. The dimensions have been renamed to `t_dim`, `x_dim`, `y_dim`, `z_dim`
2. The coordinates have been renamed to `time`, `longitude`, `latitude` and `depth_0`. These are the coordinates for this grid (the t-grid). Also `depth_0` has been calculated as the 3D depth array at time zero.
3. The variables `e1`, `e2` and `e3_0` have been created. These are the metrics for the t-grid in the x-dim, y-dim and z_dim (at time zero) directions.
&lt;/code>&lt;/pre>
&lt;p>So we see that the Gridded class has standardised some variable names and created an object based on this discretisation grid by combining the appropriate grid information with all the variables on that grid.&lt;/p>
&lt;p>We can interact with this as an xarray Dataset object. So to extract a specific variable (say temperature):&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">&lt;span style="color:#000">ssh&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000">nemo_t&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">dataset&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">ssh&lt;/span>
&lt;span style="color:#000">ssh&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Or as a numpy array:&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">&lt;span style="color:#000">ssh_np&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000">ssh&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">values&lt;/span>
&lt;span style="color:#000">ssh_np&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">shape&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Then lets plot up a single time snapshot of ssh using matplotlib:&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">&lt;span style="color:#000">plt&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">pcolormesh&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">nemo_t&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">dataset&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">longitude&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">nemo_t&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">dataset&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">latitude&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">nemo_t&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">dataset&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">ssh&lt;/span>&lt;span style="color:#000;font-weight:bold">[&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">0&lt;/span>&lt;span style="color:#000;font-weight:bold">])&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="some-manipulation">Some Manipulation&lt;/h3>
&lt;p>There are currently some basic subsetting routines for Gridded objects, to cut out specified regions of data. Fundamentally, this can be done using xarray&amp;rsquo;s &lt;code>isel&lt;/code> or &lt;code>sel&lt;/code> routines to index the data. In this case, the Gridded object will pass arguments straight through to &lt;code>xarray.isel&lt;/code>.&lt;/p>
&lt;p>Lets get the indices of all model points within 111km km of (5W, 55N):&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">&lt;span style="color:#000">ind_y&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">ind_x&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000">nemo_t&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">subset_indices_by_distance&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">centre_lon&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=-&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">5&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">centre_lat&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">55&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">radius&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">111&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;span style="color:#000">ind_x&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">shape&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Now create a new, smaller subsetted Gridded object by passing those indices to isel.&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">&lt;span style="color:#000">nemo_t_subset&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000">nemo_t&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">isel&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">x_dim&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#000">ind_x&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">y_dim&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#000">ind_y&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;span style="color:#000">nemo_t_subset&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">dataset&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Alternatively, &lt;code>xarray.isel&lt;/code> can be applied directly to the &lt;code>xarray.Dataset&lt;/code> object.&lt;/p>
&lt;p>A longitude/latitude box of data can also be extracted using &lt;code>Gridded.subset_indices()&lt;/code>.&lt;/p>
&lt;h3 id="example-for-nemo-ersem-biogechemical-variables">Example for NEMO-ERSEM biogechemical variables&lt;/h3>
&lt;p>Import COAsT, define some file paths for NEMO-ERSEM output data and a NEMO domain,
and read/load your NEMO-ERSEM data into a gridded object, example:&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">&lt;span style="color:#204a87;font-weight:bold">import&lt;/span> &lt;span style="color:#000">coast&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">import&lt;/span> &lt;span style="color:#000">matplotlib.pyplot&lt;/span> &lt;span style="color:#204a87;font-weight:bold">as&lt;/span> &lt;span style="color:#000">plt&lt;/span>
&lt;span style="color:#000">fn_bgc_dat&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;./example_files/coast_example_SEAsia_BGC_1990.nc&amp;#34;&lt;/span>
&lt;span style="color:#000">fn_bgc_dom&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;./example_files/coast_example_domain_SEAsia.nc&amp;#34;&lt;/span>
&lt;span style="color:#000">fn_config_bgc_grid&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;./config/example_nemo_bgc.json&amp;#34;&lt;/span>
&lt;span style="color:#000">nemo_bgc&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000">coast&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">Gridded&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">fn_data&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000">fn_bgc_dat&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">fn_domain&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000">fn_bgc_dom&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">config&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#000">fn_config_bgc_grid&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;span style="color:#000">nemo_bgc&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">dataset&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>As an example plot a snapshot of dissolved inorganic carbon at the sea surface&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">&lt;span style="color:#000">fig&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000">plt&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">figure&lt;/span>&lt;span style="color:#000;font-weight:bold">()&lt;/span>
&lt;span style="color:#000">plt&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">pcolormesh&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>
&lt;span style="color:#000">nemo_bgc&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">dataset&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">longitude&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>
&lt;span style="color:#000">nemo_bgc&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">dataset&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">latitude&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>
&lt;span style="color:#000">nemo_bgc&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">dataset&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">dic&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">isel&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">t_dim&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">0&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">isel&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">z_dim&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">0&lt;/span>&lt;span style="color:#000;font-weight:bold">),&lt;/span>
&lt;span style="color:#000">cmap&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;RdYlBu_r&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>
&lt;span style="color:#000">vmin&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">1600&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>
&lt;span style="color:#000">vmax&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">2080&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>
&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;span style="color:#000">plt&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">colorbar&lt;/span>&lt;span style="color:#000;font-weight:bold">()&lt;/span>
&lt;span style="color:#000">plt&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">title&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;DIC, mmol/m^3&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;span style="color:#000">plt&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">xlabel&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;longitude&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;span style="color:#000">plt&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">ylabel&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;latitude&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;span style="color:#000">plt&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">show&lt;/span>&lt;span style="color:#000;font-weight:bold">()&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>
&lt;div class="card rounded p-2 td-post-card mb-4 mt-4" style="max-width: 610px">
&lt;img class="card-img-top" src="https://british-oceanographic-data-centre.github.io/COAsT/COAsT/docs/examples/intro_gridded_class/SEAsia_DIC_surface_hu1e4513a01a44fba04c46a2a068dea2c6_120133_600x700_fit_catmullrom_2.png" width="600" height="450">
&lt;div class="card-body px-0 pt-2 pb-0">
&lt;p class="card-text">
&lt;/p>
&lt;/div>
&lt;/div></description></item><item><title>Docs: Python: Style</title><link>https://british-oceanographic-data-centre.github.io/COAsT/docs/contributing_package/python_style/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://british-oceanographic-data-centre.github.io/COAsT/docs/contributing_package/python_style/</guid><description>
&lt;p>Python as a language comes with more stringent recommendations than most when it comes to code styling. This is advantageous in our case as it gives us an obvious set of guidelines to adopt.&lt;/p>
&lt;p>When it comes to simple code styling, much of what&amp;rsquo;s recommended here will be copied from &lt;a href="https://www.python.org/dev/peps/pep-0008/">Python Enhancement Proposal (PEP) 8&lt;/a>, an officially proposed and accepted Python style guide.&lt;/p>
&lt;h1 id="code-styling-conventions">Code Styling Conventions&lt;/h1>
&lt;p>Let&amp;rsquo;s keep things simple to start with&amp;hellip;&lt;/p>
&lt;ul>
&lt;li>
&lt;p>Indentation should be achieved with spaces rather than tabs and each new level of indentation should be indented by four columns (i.e four spaces).&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Any single line, including its indentation characters, should not exceed 79 characters in length.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Top-level (i.e at the module/file level rather than inside a function or class) function and class definitions should be separated by two blank lines.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Method (functions within a class) definitions are separated by a single blank line.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Usually, &amp;ldquo;import&amp;rdquo; statements should be on separate lines, that is to say that you should have one line per distinct module or package import. An exception to this rule is when multiple objects are imported from a single module or package, using a &amp;ldquo;from&amp;rdquo; statement, in which case individual objects can be imported on the same line, separated by commas.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>PEP 8 does not make a recommendation relating to the use of double or single quotes in general use, but for the sake of consistency, this document suggests the use of double quotes wherever practical. This recommendation is intended for the sake of consistency with triple-quoted strings, as per Docstring Conventions (PEP 257).&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Operators should be separated by single columns (i.e one space) either side, unless inside parentheses, in which case no whitespace is required.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Comments (beginning with the # character) should be indented as if they were code. In the case of inline comments, separate the comment with two spaces following the code it shares the line with.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>All functions should contain a docstring, which provides basic information on its usage. For this project, the &lt;a href="https://www.python.org/dev/peps/pep-0287/">reStructuredText docstring format&lt;/a> is suggested.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>When it comes to naming variables and functions, snake case (lower_case_words_separated_by_underscores) is preferred. There are however a few exceptions to this rule:
Class names should be styled as camel case (EveryNewWordIsCapitalised).
Constants (Variables that should not be changed) can be indicated by the use of screaming snake case (UPPER_CASE_WORDS_SEPARATED_BY_UNDERSCORES). Note that this library currently targets Python 3.7, so the use of &lt;a href="https://www.python.org/dev/peps/pep-0591/">typing.Final&lt;/a> official support for constant variables, new as of Python 3.8: is not currently supported.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>In general, it is suggested to avoid the use of single-character variable names, but this is acceptable in certain cases, such as when defining coordinates (such as x, y and z), as these will be commonly recognized and enforcing different rules could cause confusion.
PEP 8 advises the following regarding names to avoid:
&amp;ldquo;Never use the characters &amp;lsquo;l&amp;rsquo; (lowercase letter el), &amp;lsquo;O&amp;rsquo; (uppercase letter oh), or &amp;lsquo;I&amp;rsquo; (uppercase letter eye) as single character variable names.&amp;rdquo;
These specific characters should be avoided because they present an accessibility issue, as under many fonts these characters may be difficult to distinguish or completely indistinguishable from numerals one (1) and zero (0).&lt;/p>
&lt;/li>
&lt;li>
&lt;p>In the interest of readability, where named iterator variables are required, this document suggests the use of double characters (e.g. &amp;ldquo;ii&amp;rdquo; rather than &amp;ldquo;i&amp;rdquo;).&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h1 id="object-oriented-programming">Object-Oriented Programming&lt;/h1>
&lt;p>The general principles of OOP are fairly straightforward and well documented, so I won&amp;rsquo;t waste your precious time by regurgitating that particular wall of text here. Instead, I&amp;rsquo;ll focus on some general pointers specific to this language and use case.&lt;/p>
&lt;ul>
&lt;li>
&lt;p>In Python, all class attributes are technically public, but semantically, attributes can be designated as non-public by including leading underscores in the name. For instance, &amp;ldquo;my_variable&amp;rdquo; becomes &amp;ldquo;_my_variable&amp;rdquo;. These attributes are generally referred to as &amp;ldquo;protected&amp;rdquo;.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>When you define a Python class, it is a best practice to inherit from the base object type. This convention stems from Python 2.X, as classes and types were not originally synonymous. This behaviour is implicit in Python 3.X but the convention has persisted nonetheless. Classes defined this way are referred to as &amp;ldquo;new-style&amp;rdquo; classes.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>When defining a class that inherits from another, it is important to remember that overridden methods (in particular, this behaviour is important when dealing with __init__ methods) do not implicitly call the parent method. What this means is that unless you want to deliberately prevent the behaviour of the parent class (this is a very niche use-case), it is important to include a reference to the parent method. An example of this is: super().__init__()
This functionality is advantageous as it prevents unnecessary duplication of code, which is a key tenet of object-oriented software.&lt;/p>
&lt;/li>
&lt;/ul></description></item><item><title>Docs: Python: Structure</title><link>https://british-oceanographic-data-centre.github.io/COAsT/docs/contributing_package/python_structure/</link><pubDate>Tue, 05 Oct 2021 00:00:00 +0000</pubDate><guid>https://british-oceanographic-data-centre.github.io/COAsT/docs/contributing_package/python_structure/</guid><description>
&lt;p>** Notes on Object Structure and Loading (for contributors):&lt;/p>
&lt;p>COAsT is an object-orientated package, meaning that data is stored within Python object
structures. In addition to data storage, these objects contain methods (subroutines)
which allow for manipulation of this data. An example of such an object is the Gridded
object, which allows for the storage and manipulation of e.g. NEMO output and domain data. It
is important to understand how to load data using COAsT and the structure of the resulting
objects.&lt;/p>
&lt;p>A Gridded object is created and initialised by passing it the paths of the domain and data
files. Ideally, the grid type should also be specified (T, U, V or F in the case of NEMO).
For example, to load in data from a file containing data on a NEMO T-grid:&lt;/p>
&lt;pre>&lt;code>import coast
fn_data = &amp;quot;&amp;lt;path to T-grid data file(s)&amp;gt;&amp;quot;
fn_domain = &amp;quot;&amp;lt;path to domain file&amp;gt;&amp;quot;
fn_config = &amp;quot;&amp;lt;path to json config file&amp;gt;&amp;quot;
data = coast.Gridded(fn_data, fn_domain, fn_config)
&lt;/code>&lt;/pre>&lt;p>Ideally, Gridded model output data should be in grid-specific files, i.e. containing output
variables situated on a NEMO T, U, V or F grid, whereas the grid variables are in a single domain file. On loading into COAsT,
only the grid specific variables appropriate for the paired data are placed into the Gridded object. A Gridded object
therefore contains grid-specific data and all corresponding grid variables. One of the
file names can be omitted (to get a data-only or grid only object), however functionality
in this case will be limited.&lt;/p>
&lt;p>Once loaded, data is stored inside the object using an xarray.dataset object. Following
on from the previous code example, this can be viewed by calling:&lt;/p>
&lt;pre>&lt;code>data.dataset
&lt;/code>&lt;/pre>&lt;p>This reveals all netcdf-type aspects of the data and domain variables that were loaded,
including dimensions, coordinates, variables and attributes. For example:&lt;/p>
&lt;pre>&lt;code>&amp;lt;xarray.Dataset&amp;gt;
Dimensions: (axis_nbounds: 2, t_dim: 7, x_dim: 297, y_dim: 375, z_dim: 51)
Coordinates:
time (t_dim) datetime64[ns] 2007-01-01T11:58:56 ... 2007-01-31T11:58:56
longitude (y_dim, x_dim) float32 ...
latitude (y_dim, x_dim) float32 ...
Dimensions without coordinates: axis_nbounds, t_dim, x_dim, y_dim, z_dim
Data variables:
deptht_bounds (z_dim, axis_nbounds) float32 ...
sossheig (t_dim, y_dim, x_dim) float32 ...
time_counter_bounds (t_dim, axis_nbounds) datetime64[ns] ...
time_instant (t_dim) datetime64[ns] ...
temperature (t_dim, z_dim, y_dim, x_dim) float32 ...
e1 (y_dim, x_dim) float32 ...
e2 (y_dim, x_dim) float32 ...
e3_0 (z_dim, y_dim, x_dim) float32 1.0 1.0 1.0 ... 1.0 1.0
&lt;/code>&lt;/pre>&lt;p>Variables may be obtained in a number of ways. For example, to get temperature data, the
following are all equivalent:&lt;/p>
&lt;pre>&lt;code>temp = data.dataset.temperature
temp = data.dataset['temperature']
temp = data['temperature']
&lt;/code>&lt;/pre>&lt;p>These commands will all return an xarray.dataarray object. Manipulation of this object
can be done using xarray commands, for example indexing using [] or xarray.isel. Be aware
that indexing will preserve lazy loading, however and direct access or modifying of the
data will not. For this reason, if you require a subset of the data, it is best to
index first.&lt;/p>
&lt;p>The names of common grid variables are standardised within the COAsT package using JSON configuration files. For example, the following lists COAsT internal variable followed by the typical NEMO variable names:&lt;/p>
&lt;ol>
&lt;li>longitude [glamt / glamu / glamv / glamf]&lt;/li>
&lt;li>latitude [gphit / gphiu / gphiv / gphif]&lt;/li>
&lt;li>time [time_counter]&lt;/li>
&lt;li>e1 [e1t / e1u / e1v / e1f] (dx variable)&lt;/li>
&lt;li>e2 [e1t / e1u / e1v / e1f] (dy variable)&lt;/li>
&lt;li>e3_0 [e3t_0 / e3u_0 / e3v_0 / e3f_0] (dz variable at time 0)&lt;/li>
&lt;/ol>
&lt;p>Longitude, latitude and time are also set as coordinates. You might notice that dimensions
are also standardised:&lt;/p>
&lt;ol>
&lt;li>x_dim The dimension for the x-axis (longitude)&lt;/li>
&lt;li>y_dim The dimension for the y-axis (latitude)&lt;/li>
&lt;li>t_dim The dimension for the time axis&lt;/li>
&lt;li>z_dim The dimension for the depth axis.&lt;/li>
&lt;/ol>
&lt;p>Wherever possible, the aim is to ensure that all of the above is consistent across the
whole COAsT toolbox. Therefore, you will also find the same names and dimensions in, for
example observation objects. Future objects, where applicable, will also follow these
conventions. If you (as a contributor) add new objects to the toolbox, following
the above template is strongly encouraged. This includes using xarray dataset/dataarray
objects where possible, adopting an object oriented approach and adhering to naming
conventions.&lt;/p></description></item><item><title>Docs: Altimetry</title><link>https://british-oceanographic-data-centre.github.io/COAsT/docs/examples/altimetry/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://british-oceanographic-data-centre.github.io/COAsT/docs/examples/altimetry/</guid><description>
&lt;p>Here we give a short tutorial of how to use the Altimetry object for reading data and
comparing to NEMO data.&lt;/p>
&lt;p>Begin by importing coast and other packages&lt;/p>
&lt;pre>&lt;code>import coast
&lt;/code>&lt;/pre>&lt;p>And by defining some file paths. There are the example files that can be obtained with
the COAsT package:&lt;/p>
&lt;pre>&lt;code>fn_nemo_dat = &amp;quot;./example_files/COAsT_example_NEMO_data.nc&amp;quot;
fn_nemo_dom = &amp;quot;./example_files/COAsT_example_NEMO_domain.nc&amp;quot;
fn_config_t_grid = &amp;quot;./config/example_nemo_grid_t.json&amp;quot;
fn_altimetry = './example_files/COAsT_example_altimetry_data.nc'
&lt;/code>&lt;/pre>&lt;p>We need to load in a Gridded object for doing things with NEMO data.&lt;/p>
&lt;pre>&lt;code>nemo = coast.Gridded(fn_nemo_dat, fn_nemo_dom, config=fn_config_t_grid)
&lt;/code>&lt;/pre>&lt;p>And now we can load in our Altimetry data. By default, Altimetry is set up
to read in CMEMS netCDF files. However, if no path is supplied, then the
object&amp;rsquo;s dataset will be initialised as None. Custom data can then be loaded
if desired, as long as it follows the data formatting for Altimetry.&lt;/p>
&lt;pre>&lt;code>altimetry = coast.Altimetry(fn_altimetry, config=&amp;quot;./config/example_altimetry.json&amp;quot;)
&lt;/code>&lt;/pre>&lt;p>Before going any further, lets just cut out the bit of the altimetry that
is over the model domain. This can be done using subset_indices_lonlat_box
to find relevant indices and then isel to extract them. The data has also
been thinned slightly.&lt;/p>
&lt;pre>&lt;code>ind = altimetry.subset_indices_lonlat_box([-10,10], [45,60])
ind = ind[::4]
altimetry = altimetry.isel(t_dim=ind)
&lt;/code>&lt;/pre>&lt;p>Before comparing our observations to the model, we will interpolate a model
variable to the same time and geographical space as the altimetry. This is
done using the obs_operator() method:&lt;/p>
&lt;pre>&lt;code>altimetry.obs_operator(nemo, mod_var_name='ssh', time_interp='nearest')
&lt;/code>&lt;/pre>&lt;p>Doing this has created a new interpolated variable called interp_ssh and
saved it back into our Altimetry object. Take a look at altimetry.dataset
to see for yourself.&lt;/p>
&lt;p>Next we will compare this interpolated variable to an observed variable
using some basic metrics. The basic_stats() routine can be used for this,
which calculates some simple metrics including differences, RMSE and
correlations. NOTE: This may not be a wise choice of variables.&lt;/p>
&lt;pre>&lt;code>stats = altimetry.basic_stats(&amp;quot;ocean_tide_standard_name&amp;quot;, &amp;quot;interp_ssh&amp;quot;)
&lt;/code>&lt;/pre>&lt;p>Take a look inside stats.dataset to see all of the new variables. When using
basic stats, the returned object is also an ALTIMETRY object, so all of the
same methods can be applied. Alternatively, if you want to save the new
metrics to the original altimetry object, set create_new_object = False.&lt;/p>
&lt;p>Now we will do a more complex comparison using the Continuous Ranked
Probability Score (CRPS). For this, we need to hand over the model object,
a model variable and an observed variable. We also give it a neighbourhood
radius in km (nh_radius).&lt;/p>
&lt;pre>&lt;code>crps = altimetry.crps(nemo, model_var_name =&amp;quot;ssh&amp;quot;,
obs_var_name=&amp;quot;ocean_tide_standard_name&amp;quot;, nh_radius=20)
&lt;/code>&lt;/pre>&lt;p>Again, take a look inside crps.dataset to see some new variables. Similarly
to basic_stats, create_new_object can be set to false to save output to
the original altimetry object.&lt;/p>
&lt;p>Altimetry has a ready built quick_plot() routine for taking a look at any
of the observed or derived quantities above. So to take a look at the
&amp;lsquo;sla_filtered&amp;rsquo; variable:&lt;/p>
&lt;pre>&lt;code>fig, ax = altimetry.quick_plot(&amp;quot;ocean_tide_standard_name&amp;quot;)
&lt;/code>&lt;/pre>&lt;p>As stats and crps are also Altimetry objects, quick_plot() can also be used:&lt;/p>
&lt;pre>&lt;code>fig, ax = crps.quick_plot(&amp;quot;crps&amp;quot;)
fig, ax = stats.quick_plot(&amp;quot;absolute_error&amp;quot;)
&lt;/code>&lt;/pre></description></item><item><title>Docs: Github Workflow</title><link>https://british-oceanographic-data-centre.github.io/COAsT/docs/contributing-docs/github_workflow/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://british-oceanographic-data-centre.github.io/COAsT/docs/contributing-docs/github_workflow/</guid><description>
&lt;p>For COAsT development we use a Github workflow to manage version control and collaboration. Git allows use to keep track of changes made to the COAsT code base, avoid breaking existing code and work as a group on a single package. Any contributor needs to use this workflow to add their code. Below is some guidance on using git with COAsT, including a typical workflow and cheat sheet.&lt;/p>
&lt;p>For more information on git, see:&lt;/p>
&lt;p>Github (&lt;a href="https://github.com/">https://github.com/&lt;/a>)&lt;/p>
&lt;p>The Github page for this package can be found:&lt;/p>
&lt;p>&lt;a href="https://github.com/british-oceanographic-data-centre/COAsT">here&lt;/a>&lt;/p>
&lt;h2 id="key-ideas">Key Ideas&lt;/h2>
&lt;ol>
&lt;li>
&lt;p>The COAsT repository has two core branches: &lt;code>master&lt;/code> and &lt;code>develop&lt;/code>. The &lt;code>master&lt;/code> branch contains the tested code that you install when using Anaconda. This is updated less frequently, and is the &amp;ldquo;user-facing&amp;rdquo; branch of code. Most contributors do not need to edit this branch. The &lt;code>develop&lt;/code> branch is the &amp;lsquo;pre-master&amp;rsquo; branch, where &lt;strong>working&lt;/strong> code is kept. This is the leading branch, with the most up-to-date code, although it is not necessarily user-facing. When writing code into your own branch (see below), it is &amp;lsquo;branched&amp;rsquo; from &lt;code>develop&lt;/code> and then eventually merged back into &lt;code>develop&lt;/code>. &lt;strong>You should never make changes directly to either &lt;code>master&lt;/code> or &lt;code>develop&lt;/code>&lt;/strong>.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>There is a &amp;lsquo;local&amp;rsquo; and &amp;lsquo;remote&amp;rsquo; copy of the COAsT repository. The local repository exists only on your machine. The remote repository is the one you see on the Github website and exists separately. The two versions of the repository can be synchronised at a single point using commands such as &lt;code>git pull&lt;/code> &lt;code>git push&lt;/code> and &lt;code>git fetch&lt;/code> (see below). After cloning (downloading) the repository, all modifications you make/add/commit will &lt;strong>only be local until you push them to the remote repository&lt;/strong>.&lt;/p>
&lt;/li>
&lt;/ol>
&lt;h2 id="typical-workflow">Typical Workflow&lt;/h2>
&lt;p>A typical workflow for editting COAsT in git might look like:&lt;/p>
&lt;ol>
&lt;li>
&lt;p>&lt;strong>Clone Repository:&lt;/strong> &lt;code>git clone git@github.com:British-Oceanographic-Data-Centre/COAsT.git&lt;/code>. This will create a new copy of COAsT on your local system which you can use to interact with git and view/edit the source code. This only needs to be done once.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>Checkout develop:&lt;/strong> &lt;code>git checkout develop&lt;/code>. Before creating a new branch for your code, you should checkout the develop branch. This will switch your &lt;strong>local&lt;/strong> repository to the develop branch. You can check what branch your current local repository is in by entering &lt;code>git branch&lt;/code> &amp;ndash; it should now say &lt;code>develop&lt;/code>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>Create/checkout your new branch:&lt;/strong> &lt;code>git checkout -b new_branch_name&lt;/code>. This will create and checkout your new branch &amp;ndash; right now it is an identical copy of &lt;code>develop&lt;/code>. However, any changes you commit to your local repository will be saved into your branch. Once you have created your branch, you can open it as before, using &lt;code>git checkout new_branch_name&lt;/code>.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>Make changes/additions to code:&lt;/strong> Make any changes you like to COAsT. At this point it is separate from the main branches and it is safe to do so. If in doubt, enter &lt;code>git branch&lt;/code> again to ensure you are within your own branch.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>Add changes to branch:&lt;/strong> &lt;code>git add modified_file&lt;/code>. Using this command will tell git that you have changed/added this file and you want to save it to the branch you are currently in. Upon entering this command, the file changes/additions &lt;em>are not saved&lt;/em> to the branch and won&amp;rsquo;t be until the next step. You can remove an added file by entering &lt;code>git reset modified_file&lt;/code> and can check which files have changed by typing &lt;code>git status&lt;/code>.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>Commit changes to branch:&lt;/strong> &lt;code>git commit -m &amp;quot;type a message in quotations&amp;quot;&lt;/code>. Entering this command will &amp;ldquo;save&amp;rdquo; the changes you added using &lt;code>git add &lt;/code> in the step above to the branch you are currently in. Once entered, git will identify what has changed since the previous commit. If this is the first commit in your new branch then since the version of &lt;code>develop&lt;/code> that you branch from. This will not change any other branch except the one you are in and you can/should do this often with an appropriate message. At this point, all changes are still only on your local machine and will not change the remote repository. It is also possible to undo a commit using &lt;code>git revert&lt;/code>, so nothing is unfixable.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>Continue modifying code:&lt;/strong> At this point, you may want to continue modifying the code, repeatedly adding changes and commiting them to your local repository, as above.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>Push your local repository to the remote:&lt;/strong> &lt;code>git push origin&lt;/code>. This will upload the changes you have made in the branch you are in (and only this branch) to the remote (website) repository. If this is the first time you have pushed this branch then an error may appear telling you to repush with the &lt;code>--set-upstream&lt;/code> flag enable. Simply copy and paste this command back into the terminal. This will &amp;ldquo;create&amp;rdquo; your branch in the remote repository. Once pushed, github will do some auto-checks to make sure the code works (which it may not, but that is fine). You can continue to modify the code at any point, and push multiple times. This is encouraged if sharing with other collaboraters.&lt;/p>
&lt;/li>
&lt;/ol>
&lt;p>&lt;strong>Once you are satisfied with your changes, move onto the next steps.&lt;/strong>&lt;/p>
&lt;ol start="9">
&lt;li>
&lt;p>&lt;strong>Make sure your local branch is up to date with the remote:&lt;/strong> &lt;code>git pull origin&lt;/code> when in your branch. This is to ensure that nobody else has changed your branch, or if they have to update your local branch with the changes on the remote.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>Update your branch with develop:&lt;/strong>. Before requesting that your branch and its changes be merged back into the &lt;code>develop&lt;/code> branch, it is good practice to first merge develop back into your branch. This is because &lt;code>develop&lt;/code> may have changed since you started working on your branch and these changes should be merged into your branch to ensure that conflicts are resolved. To do this, first update develop by entering &lt;code>git checkout develop&lt;/code> and &lt;code>git pull&lt;/code>. This will update the &lt;code>develop&lt;/code> branch on your local machine. Then merge &lt;code>develop&lt;/code> back into your branch by entering &lt;code>git checkout your_branch&lt;/code> and &lt;code>git merge develop&lt;/code>. This may say up-to-date (in which case GREAT), or successful (in which case GREAT) or may say there are some conflicts. This happens when more than one person has changed the same piece of code.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>Resolve Conflicts:&lt;/strong> This step may not be necessary if there are no conflicts. If git tells you there are conflicts, it will also tell you which files they occur in. For more information/help with conflict resolution see &lt;a href="https://www.atlassian.com/git/tutorials/using-branches/merge-conflicts">here&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>Create a pull request for your branch&lt;/strong>. First your most up to date branch using &lt;code>git push origin&lt;/code>, even after merging develop in step 9/10. On the website you may then create a &amp;lsquo;pull request&amp;rsquo; which is a formal way of saying you want to merge your branch back into &lt;code>develop&lt;/code>. A pull request allows you to ask people to &amp;lsquo;review&amp;rsquo; your branch, share your code, view the changes in your branch and other things. To make a pull request, go to the website, click on the pull requests tab and click &lt;code>Create new pull request&lt;/code>. Then select your branch in the right drop down menu and &lt;code>develop&lt;/code> in the left. You may then enter a description of the changes you have made and anything else you would like reviewers to see.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>Reviewers review the code:&lt;/strong> Requested reviewers take a look at your changes and run the unit_test. Once they are satisfied, they will approve the pull request, or add comments about any problems.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>Merge branch into develop:&lt;/strong> Once reviewers are satisfied, you may click &lt;code>Merge branch&lt;/code> at the bottom of the pull request. Now your changes will be added into develop! Again, this is fine as the branch has been inspected by reviewers and any change can be reverted using &lt;code>git revert&lt;/code> (although this is not encouraged for the &lt;code>develop&lt;/code> branch).&lt;/p>
&lt;/li>
&lt;/ol>
&lt;p>**Note: After creating a pull request, Github will automatically apply &amp;ldquo;black formatting&amp;rdquo; to the code. This will commit new (small) changes to the branch so you should always do a &lt;code>git pull&lt;/code> on your branch to make sure your local version is up to date with the remote.&lt;/p>
&lt;h2 id="condensed-workflow">Condensed Workflow&lt;/h2>
&lt;ol>
&lt;li>&lt;code>git clone git@github.com:British-Oceanographic-Data-Centre/COAsT.git&lt;/code>.&lt;/li>
&lt;li>&lt;code>git checkout develop&lt;/code>&lt;/li>
&lt;li>&lt;code>git checkout -b new_branch_name&lt;/code>&lt;/li>
&lt;li>Make changes&lt;/li>
&lt;li>&lt;code>git add changed_file&lt;/code>&lt;/li>
&lt;li>&lt;code>git commit -m &amp;quot;what changes have you made&amp;quot;&lt;/code>&lt;/li>
&lt;li>&lt;code>git push origin&lt;/code>&lt;/li>
&lt;li>If your branch changed by anyone else, &lt;code>git pull&lt;/code>&lt;/li>
&lt;li>Repeat steps 4-8&lt;/li>
&lt;li>&lt;code>git checkout develop&lt;/code> &lt;code>git pull&lt;/code> &lt;code>git checkout your_branch&lt;/code> &lt;code>git merge develop&lt;/code> &lt;code>git push origin&lt;/code>&lt;/li>
&lt;li>Create pull request from &lt;code>your_branch&lt;/code> to &lt;code>develop&lt;/code>, include description and request reviewers.&lt;/li>
&lt;li>Reviewers accept, Merge branch.&lt;/li>
&lt;/ol></description></item><item><title>Docs: Logging</title><link>https://british-oceanographic-data-centre.github.io/COAsT/docs/contributing_package/python_logging/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://british-oceanographic-data-centre.github.io/COAsT/docs/contributing_package/python_logging/</guid><description>
&lt;p>COAsT utilises Pythonâ€™s default logging library and includes a simple setup function for those unfamiliar with how to use it.&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">&lt;span style="color:#204a87;font-weight:bold">import&lt;/span> &lt;span style="color:#000">coast&lt;/span>
&lt;span style="color:#000">coast&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">logging_util&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">setup_logging&lt;/span>&lt;span style="color:#000;font-weight:bold">()&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>This is all you need to enable full logging output to the console.&lt;/p>
&lt;p>By default, setup_logging will use the &amp;ldquo;DEBUG&amp;rdquo; logging level, if you want to adjust this, you can use the flags from the logging library.&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">&lt;span style="color:#204a87;font-weight:bold">import&lt;/span> &lt;span style="color:#000">coast&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">import&lt;/span> &lt;span style="color:#000">logging&lt;/span>
&lt;span style="color:#000">coast&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">logging_util&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">setup_logging&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">level&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#000">logging&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">INFO&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Alternative logging levels in increasing levels of severity. Note logs are reported at the chosen severity level and higher:&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">&lt;span style="color:#ce5c00;font-weight:bold">...&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">level&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#000">logging&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">DEBUG&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;span style="color:#8f5902;font-style:italic"># Detailed information, typically of interest only when diagnosing problems.&lt;/span>
&lt;span style="color:#ce5c00;font-weight:bold">...&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">level&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#000">logging&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">INFO&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;span style="color:#8f5902;font-style:italic"># Confirmation that things are working as expected.&lt;/span>
&lt;span style="color:#ce5c00;font-weight:bold">...&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">level&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#000">logging&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">WARNING&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;span style="color:#8f5902;font-style:italic"># An indication that something unexpected happened, or indicative of some problem in the near future (e.g. â€˜disk space lowâ€™). The software is still working as expected.&lt;/span>
&lt;span style="color:#ce5c00;font-weight:bold">...&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">level&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#000">logging&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">ERROR&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;span style="color:#8f5902;font-style:italic"># Due to a more serious problem, the software has not been able to perform some function&lt;/span>
&lt;span style="color:#ce5c00;font-weight:bold">...&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">level&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#000">logging&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">CRITICAL&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;span style="color:#8f5902;font-style:italic"># A serious error, indicating that the program itself may be unable to continue running&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>For more info on logging levels, see the &lt;a href="https://docs.python.org/3/library/logging.html">relevant Python documentation&lt;/a>.&lt;/p>
&lt;p>Logging output will be printed in the console once enabled by default, but output can be directed to any Stream, for instance, to an opened file.&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">&lt;span style="color:#204a87;font-weight:bold">import&lt;/span> &lt;span style="color:#000">coast&lt;/span>
&lt;span style="color:#204a87">file&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#204a87">open&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;coast.log&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;w&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;span style="color:#000">coast&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">logging_util&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">setup_logging&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">stream&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#204a87">file&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;span style="color:#000">coast&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">logging_util&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">info&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;Hello World!&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span> &lt;span style="color:#8f5902;font-style:italic"># Your use of COAsT would go here, this line is included as an example&lt;/span>
&lt;span style="color:#204a87">file&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">close&lt;/span>&lt;span style="color:#000;font-weight:bold">()&lt;/span>
&lt;/code>&lt;/pre>&lt;/div></description></item><item><title>Docs: working Lazily</title><link>https://british-oceanographic-data-centre.github.io/COAsT/docs/contributing_package/lazy-loading/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://british-oceanographic-data-centre.github.io/COAsT/docs/contributing_package/lazy-loading/</guid><description>
&lt;h1 id="what-is-lazy">What is lazy&amp;hellip;&lt;/h1>
&lt;h2 id="loading">&amp;hellip;loading&lt;/h2>
&lt;p>Lazy loading determines if data is read into memory straight away (on that line of code execution) or if the loading is delayed until the data is physical altered by some function (normally mathematical in nature)&lt;/p>
&lt;h2 id="evaluation">&amp;hellip;evaluation&lt;/h2>
&lt;p>Lazy evaluation is about delaying the execution of a method/function call until the value is physical required, normally as a graph or printed to screen. Lazy evaluation can also help with memory management, useful with large dataset, by allowing for optimisation on the chained methods calls.&lt;/p>
&lt;p>Lazy loading and Lazy evaluation are offer used together, though it is not mandatory and always worth checking that both are happening.&lt;/p>
&lt;h1 id="being-lazy-in-coast">Being Lazy in COAsT&lt;/h1>
&lt;p>There are two way to be Lazy within the COAsT package.&lt;/p>
&lt;ul>
&lt;li>xarray&lt;/li>
&lt;li>Dask&lt;/li>
&lt;/ul>
&lt;h2 id="xarray">xarray&lt;/h2>
&lt;p>COAsT uses xarray to load NetCDF files in, by default this will be Lazy, the raw data values will not be brought into memory.&lt;/p>
&lt;p>you can slice and subset the data while still having the lazy loading honoured, it is not &lt;em>until&lt;/em> the data is altered, say via a call to NumPy.cumsum, that the required data will be loaded into memory.&lt;/p>
&lt;p>Note the data on disk (in the NetCDF file) is never altered, only the values in memory are changed.&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">&lt;span style="color:#204a87;font-weight:bold">import&lt;/span> &lt;span style="color:#000">xarray&lt;/span> &lt;span style="color:#204a87;font-weight:bold">as&lt;/span> &lt;span style="color:#000">xr&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">import&lt;/span> &lt;span style="color:#000">NumPy&lt;/span> &lt;span style="color:#204a87;font-weight:bold">as&lt;/span> &lt;span style="color:#000">np&lt;/span>
&lt;span style="color:#000">dataset_domain&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000">xr&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">open_dataset&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">fn_domain&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;span style="color:#000">e3w_0&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000">dataset_domain&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">e3w_0&lt;/span> &lt;span style="color:#8f5902;font-style:italic"># still lazy loaded&lt;/span>
&lt;span style="color:#000">e3w_0_cs&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000">np&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">cumsum&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">e3w_0&lt;/span>&lt;span style="color:#000;font-weight:bold">[&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">1&lt;/span>&lt;span style="color:#000;font-weight:bold">:,&lt;/span> &lt;span style="color:#000;font-weight:bold">:,&lt;/span> &lt;span style="color:#000;font-weight:bold">:],&lt;/span> &lt;span style="color:#000">axis&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">0&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span> &lt;span style="color:#8f5902;font-style:italic"># now in memory&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="dask">Dask&lt;/h2>
&lt;p>When in use Dask will provide lazy evaluation on top of the lazy loading.&lt;/p>
&lt;p>using the same example as above, a file loaded in using xarray, this time with the chunks option set, will not only lazy load the data, but will turn on Dask, now using either the xarray or Dask wrapper functions will mean the NumPy cumsum call is not evaluated right way, in fact it will not be evaluated until either the compute function is called, or a greedy method from another library is used.&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">&lt;span style="color:#204a87;font-weight:bold">import&lt;/span> &lt;span style="color:#000">xarray&lt;/span> &lt;span style="color:#204a87;font-weight:bold">as&lt;/span> &lt;span style="color:#000">xr&lt;/span>
&lt;span style="color:#000">dataset_domain&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000">xr&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">open_dataset&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">fn_domain&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">chunks&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#000;font-weight:bold">{&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;t&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">1&lt;/span>&lt;span style="color:#000;font-weight:bold">})&lt;/span>
&lt;span style="color:#000">e3w_0&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000">dataset_domain&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">e3w_0&lt;/span> &lt;span style="color:#8f5902;font-style:italic"># still lazy loaded&lt;/span>
&lt;span style="color:#000">e3w_0_cs&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000">e3w_0&lt;/span>&lt;span style="color:#000;font-weight:bold">[&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">1&lt;/span>&lt;span style="color:#000;font-weight:bold">:,&lt;/span> &lt;span style="color:#000;font-weight:bold">:,&lt;/span> &lt;span style="color:#000;font-weight:bold">:]&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">cumsum&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">axis&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">0&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span> &lt;span style="color:#8f5902;font-style:italic"># Dask backed Lazy evaluation&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>We discuss Dask even more &lt;a href="../dask/">here&lt;/a>.&lt;/p></description></item><item><title>Docs: Dask</title><link>https://british-oceanographic-data-centre.github.io/COAsT/docs/contributing_package/dask/</link><pubDate>Tue, 05 Oct 2021 00:00:00 +0000</pubDate><guid>https://british-oceanographic-data-centre.github.io/COAsT/docs/contributing_package/dask/</guid><description>
&lt;h1 id="what-is-dask">What is Dask&lt;/h1>
&lt;p>Dask is a python library that allows code to be run in parallel based on the hardware your running on. This means Dask works just as well on your laptop as on your large server.&lt;/p>
&lt;h2 id="using-dask">Using Dask&lt;/h2>
&lt;p>Dask is included in the xarray library. When loading a data source (file/NumPy array) Dask is automatically initiated with the &lt;em>chunks&lt;/em> variable in the config file. However the chunking may not be optimal but you can adjust it before computation are made.&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">
&lt;span style="color:#000">nemo_t&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000">coast&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">Gridded&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span> &lt;span style="color:#000">fn_data&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#000">dn_files&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">+&lt;/span>&lt;span style="color:#000">fn_nemo_grid_t_dat&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">fn_domain&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#000">dn_files&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">+&lt;/span>&lt;span style="color:#000">fn_nemo_dom&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">config&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#000">fn_config&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;span style="color:#000">chunks&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;span style="color:#4e9a06">&amp;#34;x_dim&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">10&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>
&lt;span style="color:#4e9a06">&amp;#34;y_dim&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">10&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>
&lt;span style="color:#4e9a06">&amp;#34;t_dim&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">10&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>
&lt;span style="color:#000;font-weight:bold">}&lt;/span> &lt;span style="color:#8f5902;font-style:italic"># Chunks are prescribed in the config json file, but can be adjusted while the data is lazy loaded.&lt;/span>
&lt;span style="color:#000">nemo_t&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">dataset&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">chunk&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">chunks&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;strong>chunks&lt;/strong> tell Dask where to &lt;em>break&lt;/em> your data across the different processor tasks.&lt;/p>
&lt;h3 id="direct-dask">Direct Dask&lt;/h3>
&lt;p>Dask can be imported and used directly&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">&lt;span style="color:#204a87;font-weight:bold">import&lt;/span> &lt;span style="color:#000">Dask.array&lt;/span> &lt;span style="color:#204a87;font-weight:bold">as&lt;/span> &lt;span style="color:#000">da&lt;/span>
&lt;span style="color:#000">big_array&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000">da&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">multiple&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">array1&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>&lt;span style="color:#000">array2&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Dask arrays follow the NumPy API. This means that most NumPy functions have a Dask version.&lt;/p>
&lt;h2 id="potential-issues">Potential Issues&lt;/h2>
&lt;p>Dask objects are immutable. This means that the classic approach, pre-allocation follow by modification will not work.&lt;/p>
&lt;p>The following code will error.&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">&lt;span style="color:#204a87;font-weight:bold">import&lt;/span> &lt;span style="color:#000">Dask.array&lt;/span> &lt;span style="color:#204a87;font-weight:bold">as&lt;/span> &lt;span style="color:#000">da&lt;/span>
&lt;span style="color:#000">e3w_0&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000">da&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">squeeze&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">dataset_domain&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">e3w_0&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;span style="color:#000">depth_0&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000">da&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">zero_like&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">e3w_0&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;span style="color:#000">depth_0&lt;/span>&lt;span style="color:#000;font-weight:bold">[&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">0&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000;font-weight:bold">:,&lt;/span> &lt;span style="color:#000;font-weight:bold">:]&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">0.5&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">*&lt;/span> &lt;span style="color:#000">e3w_0&lt;/span>&lt;span style="color:#000;font-weight:bold">[&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">0&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000;font-weight:bold">:,&lt;/span> &lt;span style="color:#000;font-weight:bold">:]&lt;/span> &lt;span style="color:#8f5902;font-style:italic"># this line will error out&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h4 id="option-1">option 1&lt;/h4>
&lt;p>Continue using NumPy function but wrapping the final value in a Dask array. This final Dask object will still be in-memory.&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">&lt;span style="color:#000">e3w_0&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000">np&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">squeeze&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">dataset_domain&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">e3w_0&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;span style="color:#000">depth_0&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000">np&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">zeros_like&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">e3w_0&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;span style="color:#000">depth_0&lt;/span>&lt;span style="color:#000;font-weight:bold">[&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">0&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000;font-weight:bold">:,&lt;/span> &lt;span style="color:#000;font-weight:bold">:]&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">0.5&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">*&lt;/span> &lt;span style="color:#000">e3w_0&lt;/span>&lt;span style="color:#000;font-weight:bold">[&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">0&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000;font-weight:bold">:,&lt;/span> &lt;span style="color:#000;font-weight:bold">:]&lt;/span>
&lt;span style="color:#000">depth_0&lt;/span>&lt;span style="color:#000;font-weight:bold">[&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">1&lt;/span>&lt;span style="color:#000;font-weight:bold">:,&lt;/span> &lt;span style="color:#000;font-weight:bold">:,&lt;/span> &lt;span style="color:#000;font-weight:bold">:]&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000">depth_0&lt;/span>&lt;span style="color:#000;font-weight:bold">[&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">0&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000;font-weight:bold">:,&lt;/span> &lt;span style="color:#000;font-weight:bold">:]&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">+&lt;/span> &lt;span style="color:#000">np&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">cumsum&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">e3w_0&lt;/span>&lt;span style="color:#000;font-weight:bold">[&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">1&lt;/span>&lt;span style="color:#000;font-weight:bold">:,&lt;/span> &lt;span style="color:#000;font-weight:bold">:,&lt;/span> &lt;span style="color:#000;font-weight:bold">:],&lt;/span> &lt;span style="color:#000">axis&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">0&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;span style="color:#000">depth_0&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000">da&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">array&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">depth_0&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h4 id="option-2">option 2&lt;/h4>
&lt;p>Dask offers a feature called &lt;a href="https://docs.dask.org/en/latest/delayed.html">delayed&lt;/a>. This can be used as a modifier on your
complex methods as follows;&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">&lt;span style="color:#5c35cc;font-weight:bold">@Dask.delayed&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">def&lt;/span> &lt;span style="color:#000">set_timezero_depths&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#3465a4">self&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">dataset_domain&lt;/span>&lt;span style="color:#000;font-weight:bold">):&lt;/span>
&lt;span style="color:#8f5902;font-style:italic"># complex workings&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>these do not return the computed answer, rather it returns a delayed object. These delayed object get stacked, as more delayed methods are called. When the value is needed, it can be computed like so;&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">&lt;span style="color:#000">ne&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000">coast&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">Gridded&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">...&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;span style="color:#8f5902;font-style:italic"># come complex delayed methods called&lt;/span>
&lt;span style="color:#000">ne&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">data_variable&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">compute&lt;/span>&lt;span style="color:#000;font-weight:bold">()&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Dask will now work out a computing path via all the required methods using as many processor tasks as possible.&lt;/p>
&lt;h3 id="visualising-the-graph">Visualising the Graph&lt;/h3>
&lt;p>Dask is fundamentally a computational graph library, to understand what is happening in the background it can help to see these graphs (on smaller/simpler problems). This can be achieved by running;&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">&lt;span style="color:#000">ne&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000">coast&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">Gridded&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">...&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;span style="color:#8f5902;font-style:italic"># come complex delayed methods called&lt;/span>
&lt;span style="color:#000">ne&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">data_variable&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">visualize&lt;/span>&lt;span style="color:#000;font-weight:bold">()&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>this will output a png image of the graph in the calling directory and could look like this;&lt;/p>
&lt;div class="card rounded p-2 td-post-card mb-4 mt-4" style="max-width: 6344px">
&lt;img class="card-img-top" src="https://british-oceanographic-data-centre.github.io/COAsT/COAsT/docs/contributing_package/dask/mydask_huff6e57bba272ec52469a454020e8d978_582299_6334x945_fit_q75_catmullrom.jpg" width="6334" height="945">
&lt;div class="card-body px-0 pt-2 pb-0">
&lt;p class="card-text">
&lt;/p>
&lt;/div>
&lt;/div></description></item><item><title>Docs: Climatology</title><link>https://british-oceanographic-data-centre.github.io/COAsT/docs/examples/climatology/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://british-oceanographic-data-centre.github.io/COAsT/docs/examples/climatology/</guid><description>
&lt;p>This is a demonstration script for using the Climatology object in the COAsT
package. This object has methods for analysing climatological data. Further examples can be found in the &lt;a href="https://github.com/British-Oceanographic-Data-Centre/COAsT/blob/master/example_scripts/climatology_example.py">COAsT github&lt;/a> repository.&lt;/p>
&lt;h1 id="climatological-means">Climatological means&lt;/h1>
&lt;p>This section shows an example of how to use the &lt;code>Climatology.make_climatology()&lt;/code> method to calculates mean over a given period of time. This method doesn&amp;rsquo;t take different years into account, unless using the &amp;lsquo;years&amp;rsquo; frequency. (See the &lt;a href="#multi-year-climatological-means">Multi-year climatological means&lt;/a> section for multi-yeared data.)&lt;/p>
&lt;p>Begin by importing coast:&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">&lt;span style="color:#204a87;font-weight:bold">import&lt;/span> &lt;span style="color:#000">coast&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>And by defining some file paths for the data:&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">&lt;span style="color:#8f5902;font-style:italic"># Path to a data file.&lt;/span>
&lt;span style="color:#000">fn_nemo_dat&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;./example_files/coast_example_nemo_data.nc&amp;#34;&lt;/span>
&lt;span style="color:#8f5902;font-style:italic"># Set path for domain file if required.&lt;/span>
&lt;span style="color:#000">fn_nemo_dom&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;./example_files/coast_example_nemo_domain.nc&amp;#34;&lt;/span>
&lt;span style="color:#8f5902;font-style:italic"># Set path for model configuration file&lt;/span>
&lt;span style="color:#000">config&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;./config/example_nemo_grid_t.json&amp;#34;&lt;/span>
&lt;span style="color:#8f5902;font-style:italic"># Read in data (This example uses NEMO data.)&lt;/span>
&lt;span style="color:#000">nemo&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000">coast&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">Gridded&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">fn_nemo_dat&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">fn_nemo_dom&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">config&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#000">config&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Calculate the climatology for temperature and sea surface height (ssh) as an example:&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">&lt;span style="color:#8f5902;font-style:italic"># Optional (This specifies an output file path.)&lt;/span>
&lt;span style="color:#000">fn_out&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;/path/to/outputfile.nc&amp;#34;&lt;/span>
&lt;span style="color:#8f5902;font-style:italic"># String is appended to &amp;#34;time.&amp;#34; to create a valid xarray time period. (i.e. time.season, time.month...)&lt;/span>
&lt;span style="color:#000">climatology_frequency&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;month&amp;#34;&lt;/span>
&lt;span style="color:#000">clim&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000">coast&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">Climatology&lt;/span>&lt;span style="color:#000;font-weight:bold">()&lt;/span>
&lt;span style="color:#8f5902;font-style:italic"># Not writing output to file:&lt;/span>
&lt;span style="color:#000">clim_mean&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000">clim&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">make_climatology&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">nemo&lt;/span>&lt;span style="color:#000;font-weight:bold">[[&lt;/span>&lt;span style="color:#4e9a06">&amp;#39;temperature&amp;#39;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>&lt;span style="color:#4e9a06">&amp;#39;ssh&amp;#39;&lt;/span>&lt;span style="color:#000;font-weight:bold">]],&lt;/span> &lt;span style="color:#000">climatology_frequency&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;span style="color:#8f5902;font-style:italic"># Writing output to file (may require a large amount of memory.)&lt;/span>
&lt;span style="color:#000">clim_mean&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000">clim&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">make_climatology&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">nemo&lt;/span>&lt;span style="color:#000;font-weight:bold">[[&lt;/span>&lt;span style="color:#4e9a06">&amp;#39;temperature&amp;#39;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>&lt;span style="color:#4e9a06">&amp;#39;ssh&amp;#39;&lt;/span>&lt;span style="color:#000;font-weight:bold">]],&lt;/span> &lt;span style="color:#000">climatology_frequency&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">fn_out&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#000">fn_out&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Below shows the structure of a dataset returned, containing 1 month worth of meaned temperature and sea surface height data:&lt;/p>
&lt;pre>&lt;code>&amp;lt;xarray.Dataset&amp;gt;
Dimensions: (y_dim: 375, x_dim: 297, z_dim: 51, month: 1)
Coordinates:
longitude (y_dim, x_dim) float32 ...
latitude (y_dim, x_dim) float32 ...
depth_0 (z_dim, y_dim, x_dim) float32 0.5 0.5 0.5 ... 50.5 50.5 50.5
* month (month) int64 1
Dimensions without coordinates: y_dim, x_dim, z_dim
Data variables:
temperature (month, z_dim, y_dim, x_dim) float32 dask.array&amp;lt;chunksize=(1, 51, 375, 297), meta=np.ndarray&amp;gt;
ssh (month, y_dim, x_dim) float32 dask.array&amp;lt;chunksize=(1, 375, 297), meta=np.ndarray&amp;gt;
&lt;/code>&lt;/pre>&lt;h1 id="multi-year-climatological-means">Multi-year climatological means&lt;/h1>
&lt;p>This section shows an example of how to use the &lt;code>Climatology.multiyear_averages()&lt;/code> method to generate annual averages across specified periods of time. This method is designed to be compatible with multi-year datasets, but will work with single year datasets too.&lt;/p>
&lt;p>Begin by importing coast and helpful coast utilities:&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">&lt;span style="color:#204a87;font-weight:bold">import&lt;/span> &lt;span style="color:#000">coast&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">from&lt;/span> &lt;span style="color:#000">coast&lt;/span> &lt;span style="color:#204a87;font-weight:bold">import&lt;/span> &lt;span style="color:#000">seasons&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>And by defining some file paths for the data:&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">&lt;span style="color:#8f5902;font-style:italic"># Path to a single or multiple NEMO files.&lt;/span>
&lt;span style="color:#000">fn_nemo_data&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;/Path/to/Nemo/*.nc&amp;#34;&lt;/span>
&lt;span style="color:#8f5902;font-style:italic"># Set path for domain file if required.&lt;/span>
&lt;span style="color:#000">fn_nemo_domain&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;/Path/to/domain/domain.nc&amp;#34;&lt;/span>
&lt;span style="color:#000">fn_config_t_grid&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;/Path/to/config/file.json&amp;#34;&lt;/span>
&lt;span style="color:#8f5902;font-style:italic"># Read in multiyear data (This example uses NEMO data from multiple datafiles.)&lt;/span>
&lt;span style="color:#000">nemo&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000">coast&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">Gridded&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">fn_data&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#000">fn_nemo_data&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">fn_domain&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#000">fn_nemo_domain&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">config&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#000">fn_config_t_grid&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">multiple&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#3465a4">True&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Now calculate temperature and ssh means of each season across multiple years for specified data:&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">&lt;span style="color:#000">clim&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000">coast&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">Climatology&lt;/span>&lt;span style="color:#000;font-weight:bold">()&lt;/span>
&lt;span style="color:#8f5902;font-style:italic"># Using seasons module to specify time period.&lt;/span>
&lt;span style="color:#8f5902;font-style:italic"># SPRING, SUMMER, AUTUMN, WINTER, ALL are valid values for seasons.&lt;/span>
&lt;span style="color:#000">clim_multiyear&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000">clim&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">multiyear_averages&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">nemo&lt;/span>&lt;span style="color:#000;font-weight:bold">[[&lt;/span>&lt;span style="color:#4e9a06">&amp;#39;temperature&amp;#39;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>&lt;span style="color:#4e9a06">&amp;#39;ssh&amp;#39;&lt;/span>&lt;span style="color:#000;font-weight:bold">]],&lt;/span> &lt;span style="color:#000">seasons&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">ALL&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">time_var&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#4e9a06">&amp;#39;time&amp;#39;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">time_dim&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#4e9a06">&amp;#39;t_dim&amp;#39;&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;span style="color:#8f5902;font-style:italic"># Or explicitly defining specific month periods.&lt;/span>
&lt;span style="color:#8f5902;font-style:italic"># A list of tuples defining start and end month integers. The start months should be in chronological order.&lt;/span>
&lt;span style="color:#8f5902;font-style:italic"># (you may need to read/load the data again if it gives an error)&lt;/span>
&lt;span style="color:#000">nemo&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000">coast&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">Gridded&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">fn_data&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#000">fn_nemo_data&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">fn_domain&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#000">fn_nemo_domain&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">config&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#000">fn_config_t_grid&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">multiple&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#3465a4">True&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;span style="color:#000">month_periods&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000;font-weight:bold">[(&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">1&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">2&lt;/span>&lt;span style="color:#000;font-weight:bold">),&lt;/span> &lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">12&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">2&lt;/span>&lt;span style="color:#000;font-weight:bold">)]&lt;/span> &lt;span style="color:#8f5902;font-style:italic"># Specifies January -&amp;gt; February and December -&amp;gt; February for each year of data. &lt;/span>
&lt;span style="color:#000">clim_multiyear&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000">clim&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">multiyear_averages&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">nemo&lt;/span>&lt;span style="color:#000;font-weight:bold">[[&lt;/span>&lt;span style="color:#4e9a06">&amp;#39;temperature&amp;#39;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>&lt;span style="color:#4e9a06">&amp;#39;ssh&amp;#39;&lt;/span>&lt;span style="color:#000;font-weight:bold">]],&lt;/span> &lt;span style="color:#000">month_periods&lt;/span> &lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">time_var&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#4e9a06">&amp;#39;time&amp;#39;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">time_dim&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#4e9a06">&amp;#39;t_dim&amp;#39;&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Below shows the structure of a dataset returned from this method:&lt;/p>
&lt;pre>&lt;code>&amp;lt;xarray.Dataset&amp;gt;
Dimensions: (y_dim: 375, x_dim: 297, z_dim: 51, year_period: 2)
Coordinates:
longitude (y_dim, x_dim) float32 -19.89 -19.78 ... 12.89 13.0
latitude (y_dim, x_dim) float32 40.07 40.07 40.07 ... 65.0 65.0
depth_0 (z_dim, y_dim, x_dim) float32 0.5 0.5 0.5 ... 50.5 50.5
* year_period (year_period) MultiIndex
- year_period_level_0 (year_period) int64 2006 2007
- year_period_level_1 (year_period) object 'Dec-Feb' 'Jan-Feb'
Dimensions without coordinates: y_dim, x_dim, z_dim
Data variables:
temperature (year_period, z_dim, y_dim, x_dim) float32 dask.array&amp;lt;chunksize=(1, 51, 375, 297), meta=np.ndarray&amp;gt;
ssh (year_period, y_dim, x_dim) float32 dask.array&amp;lt;chunksize=(1, 375, 297), meta=np.ndarray&amp;gt;
&lt;/code>&lt;/pre>&lt;p>Data can be accessed by selecting on the year-period MultiIndex:&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">&lt;span style="color:#8f5902;font-style:italic"># Selecting temperature data variable based on year:&lt;/span>
&lt;span style="color:#000">clim_multiyear&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">sel&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">year_period&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">2006&lt;/span>&lt;span style="color:#000;font-weight:bold">))[&lt;/span>&lt;span style="color:#4e9a06">&amp;#39;temperature&amp;#39;&lt;/span>&lt;span style="color:#000;font-weight:bold">]&lt;/span>
&lt;span style="color:#8f5902;font-style:italic"># Selecting temperature data variable based on year and period:&lt;/span>
&lt;span style="color:#000">clim_multiyear&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">sel&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">year_period&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">2006&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>&lt;span style="color:#4e9a06">&amp;#39;Dec-Feb&amp;#39;&lt;/span>&lt;span style="color:#000;font-weight:bold">))[&lt;/span>&lt;span style="color:#4e9a06">&amp;#39;temperature&amp;#39;&lt;/span>&lt;span style="color:#000;font-weight:bold">]&lt;/span>
&lt;/code>&lt;/pre>&lt;/div></description></item><item><title>Docs: setting up Hugo</title><link>https://british-oceanographic-data-centre.github.io/COAsT/docs/contributing-docs/hugo/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://british-oceanographic-data-centre.github.io/COAsT/docs/contributing-docs/hugo/</guid><description>
&lt;p>This page will walk you though a simple setup for hugo extended - which is needed if want to view any changes you make to this site locally.&lt;/p>
&lt;p>For more details please &lt;a href="https://gohugo.io/getting-started/installing/">read this&lt;/a>.&lt;/p>
&lt;h2 id="installation">Installation&lt;/h2>
&lt;h3 id="manual">Manual&lt;/h3>
&lt;ol>
&lt;li>Download hugo &lt;em>extended&lt;/em> from &lt;a href="https://github.com/gohugoio/hugo/releases">GitHub&lt;/a>&lt;/li>
&lt;li>Unzip into preferred location (I use C:\hugo)&lt;/li>
&lt;li>Add to OS PATH
&lt;ul>
&lt;li>optional but makes usage easier&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ol>
&lt;h3 id="via-a-package-manager">Via a Package Manager&lt;/h3>
&lt;p>On Windows you can use &lt;a href="https://chocolatey.org/">Chocolately&lt;/a> to install with:&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-shell" data-lang="shell">choco install hugo-extended
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Or on macOS/Linux you can use &lt;a href="https://brew.sh/">Homebrew&lt;/a> to install with:&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-shell" data-lang="shell">brew install hugo
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="try-it-out">Try it out!&lt;/h2>
&lt;p>You should now be able to try the following in a terminal&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-shell" data-lang="shell">$ hugo --help
&lt;/code>&lt;/pre>&lt;/div>&lt;p>if you have cloned the COAsT-site &lt;a href="github_repo">repo&lt;/a> you should also now be able to;&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-shell" data-lang="shell">$ &lt;span style="color:#204a87">cd&lt;/span> COAsT-site
$ hugo server
&lt;/code>&lt;/pre>&lt;/div>&lt;p>the above will start a local hugo powered version of the website. you can edit any of the files under /content and see your changes at http://localhost:1313/COAsT/&lt;/p></description></item><item><title>Docs: Profile</title><link>https://british-oceanographic-data-centre.github.io/COAsT/docs/examples/profile/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://british-oceanographic-data-centre.github.io/COAsT/docs/examples/profile/</guid><description>
&lt;h1 id="overview">Overview&lt;/h1>
&lt;p>INDEXED type class for storing data from a CTD Profile (or similar
down and up observations). The structure of the class is based around having
discrete profile locations with independent depth dimensions and coords.
The class dataset should contain two dimensions:&lt;/p>
&lt;pre>&lt;code>&amp;gt; id_dim :: The profiles dimension. Each element of this dimension
contains data (e.g. cast) for an individual location.
&amp;gt; z_dim :: The dimension for depth levels. A profile object does not
need to have shared depths, so NaNs might be used to
pad any depth array.
&lt;/code>&lt;/pre>
&lt;p>Alongside these dimensions, the following minimal coordinates should also
be available:&lt;/p>
&lt;pre>&lt;code>&amp;gt; longitude (id_dim) :: 1D array of longitudes, one for each id_dim
&amp;gt; latitude (id_dim) :: 1D array of latitudes, one for each id_dim
&amp;gt; time (id_dim) :: 1D array of times, one for each id_dim
&amp;gt; depth (id_dim, z_dim) :: 2D array of depths, with different depth
levels being provided for each profile.
Note that these depth levels need to be
stored in a 2D array, so NaNs can be used
to pad out profiles with shallower depths.
&amp;gt; id_name (id_dim) :: [Optional] Name of id_dim/case or id_dim number.
&lt;/code>&lt;/pre>
&lt;h1 id="example-useage">Example Useage&lt;/h1>
&lt;p>Below is a description of the available example scripts for this class as well
as an overview of validation using&lt;code> Profile&lt;/code> and &lt;code>ProfileAnalysis&lt;/code>.&lt;/p>
&lt;h3 id="example-scripts">Example Scripts&lt;/h3>
&lt;p>Please see COAsT/example_scripts/profile_validation for some scripts which
demonstrate how to use the Profile and ProfileAnalysis classes for model
validation.&lt;/p>
&lt;ol>
&lt;li>
&lt;p>&lt;code>analysis_preprocess_en4.py&lt;/code> : If you&amp;rsquo;re using EN4 data, this kind of script
might be your first step for analysis.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>analysis_extract_and_compare.py&lt;/code>: This script shows you how to extract
the nearest model profiles, compare them with EN4 observations and get errors
throughout the vertical dimension and averaged in surface and bottom zones&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>analysis_extract_and_compare_single_process.py&lt;/code>: This script does the same
as number 2. However, it is modified slightly to take a command line argument
which helps it figure out which dates to analyse. This means that this script
can act as a template for &lt;code>jug&lt;/code> type parallel processing on, e.g. JASMIN.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>analysis_mask_means.py&lt;/code>: This script demonstrates how to use boolean masks
to obtain regional averages of profiles and errors.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>analysis_average_into_grid_boxes.py&lt;/code>: This script demonstrates how to
average the data inside a &lt;code>Profile&lt;/code> object into regular grid boxes and
seasonal climatologies.&lt;/p>
&lt;/li>
&lt;/ol>
&lt;h3 id="basic-useage">Basic useage&lt;/h3>
&lt;p>We can create a new Profile object easily:&lt;/p>
&lt;pre>&lt;code>profile = coast.Profile()
&lt;/code>&lt;/pre>&lt;p>Currently, this object is empty, and contains no dataset. There are some
reading routines currently available in Profile for reading EN4 or WOD data
files. These can be used to easily read data into your new profile object:&lt;/p>
&lt;pre>&lt;code># Read WOD data into profile object (OVERWRITES DATASET)
profile.read_wod( filename )
# Read EN4 data into profile object
profile.read_en4( filename )
&lt;/code>&lt;/pre>&lt;p>Alternatively, you can pass an &lt;code>xarray.dataset&lt;/code> straight to Profile:&lt;/p>
&lt;pre>&lt;code>profile = coast.Profile( dataset = your_dataset, config = config_file [opt] )
&lt;/code>&lt;/pre>&lt;p>We can do some simple spatial and temporal manipulations of this data:&lt;/p>
&lt;pre>&lt;code># Cut out a geographical box
profile = profile.subset_indices_lonlat_box(lonbounds = [-15, 15],
latbounds = [45, 65])
# Cut out a time window
profile = profile.time_slice( date0 = datetime(2004, 1, 1), date1 = datetime(2005,1,1))
&lt;/code>&lt;/pre>&lt;p>If you are using EN4 data, you can use the &lt;code>process_en4()&lt;/code> routine to apply
quality control flags to the data (replacing with NaNs):&lt;/p>
&lt;pre>&lt;code>processed_profile = profile.process_en4()
&lt;/code>&lt;/pre>&lt;h3 id="direct-model-comparison">Direct Model Comparison&lt;/h3>
&lt;p>There are a number of routines available for interpolating in the horizontal,
vertical and in time to do direct comparisons of model and profile data.
&lt;code>Profile.obs_operator&lt;/code> will do a nearest neighbour spatial interpolation of
the data in a &lt;code>Gridded&lt;/code> object to profile latitudes/longitudes. It will also
do a custom time interpolation. For example:&lt;/p>
&lt;pre>&lt;code># Create gridded object:
nemo = coast.Gridded(fn_dat, fn_dom, multiple=True, config=fn_cfg_nemo)
# Create a landmask array in Gridded
nemo.dataset[&amp;quot;landmask&amp;quot;] = nemo.dataset.bottom_level == 0
nemo.dataset = nemo.dataset.rename({&amp;quot;depth_0&amp;quot;: &amp;quot;depth&amp;quot;})
# Use obs operator for horizontal remapping of Gridded onto Profile.
model_profiles = profile.obs_operator(nemo)
&lt;/code>&lt;/pre>&lt;p>In the above example we added a &lt;code>landmask&lt;/code> variable to the &lt;code>Gridded&lt;/code> dataset.
When this is present, the &lt;code>obs_operator&lt;/code> will use this to interpolation to the
nearest &lt;em>wet&lt;/em> point. If not present, it will just take the nearest grid point.&lt;/p>
&lt;p>Now that we have interpolated the model onto Profiles, we have a new Profile
object called &lt;code>model_profiles&lt;/code>. This can be used to do some comparisons with
our original &lt;code>processed_profile&lt;/code> object, which we created above. First lets
make our ProfileAnalysis object:&lt;/p>
&lt;pre>&lt;code>analysis = coast.ProfileAnalysis()
&lt;/code>&lt;/pre>&lt;p>We can use &lt;code>ProfileAnalysis.interpolate_vertical&lt;/code> to interpolate all variables
within a Profile object. This can be done onto a set of reference depths or,
matching another object&amp;rsquo;s depth coordinates by passing another profile object.
Let&amp;rsquo;s interpolate our model profiles onto observations depths, then interpolate
both onto a set of reference depths:&lt;/p>
&lt;pre>&lt;code># Interpolate model profiles onto observation depths
model_profiles_interp = analysis.interpolate_vertical(model_profiles, profile, interp_method=&amp;quot;linear&amp;quot;)
# Vertical interpolation of model profiles to reference depths
model_profiles_interp = panalysis.interpolate_vertical(model_profiles_interp, ref_depth)
# Interpolation of obs profiles to reference depths
profile_interp = analysis.interpolate_vertical(profile, ref_depth)
&lt;/code>&lt;/pre>&lt;p>Now that we have two Profile objects that are horizontally and vertically
comparable, we can use &lt;code>difference()&lt;/code> to get some basic errors:&lt;/p>
&lt;pre>&lt;code>differences = analysis.difference(profile_interp, model_profiles_interp)
&lt;/code>&lt;/pre>&lt;p>This will return a new &lt;code>Profile&lt;/code> object that contains the variable difference,
absolute differences and square differences at all depths and means for each
profile.&lt;/p>
&lt;h3 id="layer-averaging">Layer Averaging&lt;/h3>
&lt;p>We can use the &lt;code>Profile&lt;/code> object to get mean values between specific depth levels
or for some layer above the bathymetric depth. The former can be done using
&lt;code>ProfileAnalysis.depth_means()&lt;/code>, for example the following will return a new
Profile object containing the means of all variables between 0m and 5m:&lt;/p>
&lt;pre>&lt;code>profile_surface = analysis.depth_means(profile, [0, 5])
&lt;/code>&lt;/pre>&lt;p>This can be done for any arbitrary depth layer defined by two depths. In some
cases it may be that one of the depth levels is not defined by a constant, e.g.
when calculating bottom means. In this case you may want to calculate averages
in some layer above the seabed. This can be done using
&lt;code>ProfileAnalysis.bottom_means()&lt;/code>. For example:&lt;/p>
&lt;pre>&lt;code>bottom_height = [10, 30, 100] # Use bottom heights of 10m, 30m and 100m for...
bottom_thresh = [100, 500, np.inf] # ...depths less than 100m, 500m and infinite
profile_bottom = analysis.bottom_means(profile, bottom_height, bottom_thresh)
&lt;/code>&lt;/pre>&lt;p>This will calculate bottom means differently depending upon the actualy depth.
For depths less than 100m, it will take the average of the bottom 10m. For less
than 500 m (and greater than 100m), it will take the average of the bottom 30m.
And so on. This routine will look for a variable in the input Profile called
&lt;code>bathymetry&lt;/code>. If this is not present you will need to insert it yourself, e.g:&lt;/p>
&lt;pre>&lt;code>profile.dataset[&amp;quot;bathymetry&amp;quot;] = ([&amp;quot;id_dim&amp;quot;], obs_bathymetry_array)
&lt;/code>&lt;/pre>&lt;p>**NOTE1: The &lt;code>bathymetry&lt;/code> variable does not actually need to contain bathymetric
depths, it can also be used to calculate means above any non-constant surface.
For example, it could be mixed layer depth.&lt;/p>
&lt;p>**NOTE2: This can be done for any Profile object. So, you could use this
workflow to also average a Profile derived from the &lt;code>difference()&lt;/code> routine.&lt;/p>
&lt;h3 id="regional-mask-averaging">Regional (Mask) Averaging&lt;/h3>
&lt;p>We can use &lt;code>Profile&lt;/code> in combination with &lt;code>MaskMaker&lt;/code> to calculate averages over
regions defined by masks. For example, to get the mean errors in the North Sea.
Start by creating a list of boolean masks we would like to use:&lt;/p>
&lt;pre>&lt;code>mm = coast.MaskMaker()
# Define Regional Masks
regional_masks = []
bath = nemo.dataset.bathymetry.values
# Add regional mask for whole domain
regional_masks.append(np.ones(lon.shape))
# Add regional mask for North Sea
regional_masks.append(mm.region_def_nws_north_sea(lon, lat, bath))
region_names = [&amp;quot;whole_domain&amp;quot;,&amp;quot;north_sea&amp;quot;,]
&lt;/code>&lt;/pre>&lt;p>Next, we must make these masks into datasets using &lt;code>MaskMaker.make_mask_dataset&lt;/code>.
Masks should be 2D datasets defined by booleans. In our example here we have used
the latitude/longitude array from the nemo object, however it can be defined
however you like.&lt;/p>
&lt;pre>&lt;code>mask_list = mm.make_mask_dataset(lon, lat, regional_masks)
&lt;/code>&lt;/pre>&lt;p>Then we use &lt;code>ProfileAnalysis.determine_mask_indices&lt;/code> to figure out which
profiles in a &lt;code>Profile&lt;/code> object lie within each regional mask:&lt;/p>
&lt;pre>&lt;code>mask_indices = analysis.determine_mask_indices(profile, mask_list)
&lt;/code>&lt;/pre>&lt;p>This returns an object called &lt;code>mask_indices&lt;/code>, which is required to pass to
&lt;code>ProfileAnalysis.mask_means()&lt;/code>. This routine will return a new xarray dataset
containing averaged data for each region:&lt;/p>
&lt;pre>&lt;code>mask_means = analysis.mask_means(profile, mask_indices)
&lt;/code>&lt;/pre>&lt;h3 id="gridding-profile-data">Gridding Profile Data&lt;/h3>
&lt;p>If you have large amount of profile data you may want to average it into
grid boxes to get, for example, mean error maps or climatologies. This can be
done using &lt;code>ProfileAnalysis.average_into_grid_boxes()&lt;/code>.&lt;/p>
&lt;p>We can create a gridded dataset of all the data using:&lt;/p>
&lt;pre>&lt;code>grid_lon = np.arange(-15, 15, 0.5)
grid_lat = np.arange(45, 65, 0.5)
prof_gridded = analysis.average_into_grid_boxes(grid_lon, grid_lat)
&lt;/code>&lt;/pre>&lt;p>Alternatively, we can calculate averages for each season:&lt;/p>
&lt;pre>&lt;code>prof_gridded_DJF = profile_analysis.average_into_grid_boxes(grid_lon, grid_lat, season=&amp;quot;DJF&amp;quot;, var_modifier=&amp;quot;_DJF&amp;quot;)
prof_gridded_MAM = profile_analysis.average_into_grid_boxes(grid_lon, grid_lat, season=&amp;quot;MAM&amp;quot;, var_modifier=&amp;quot;_MAM&amp;quot;)
prof_gridded_JJA = profile_analysis.average_into_grid_boxes(grid_lon, grid_lat, season=&amp;quot;JJA&amp;quot;, var_modifier=&amp;quot;_JJA&amp;quot;)
prof_gridded_SON = profile_analysis.average_into_grid_boxes(grid_lon, grid_lat, season=&amp;quot;SON&amp;quot;, var_modifier=&amp;quot;_SON&amp;quot;)
&lt;/code>&lt;/pre>&lt;p>Here, &lt;code>season&lt;/code> specifies which season to average over and &lt;code>var_modifier&lt;/code> is added to the end of
all variable names in the object&amp;rsquo;s dataset.&lt;/p>
&lt;p>This function returns a new Gridded object. It also contains a new variable
called &lt;code>grid_N&lt;/code>, which stores how many profiles were averaged into each grid box.
You may want to use this when using the analysis.&lt;/p></description></item><item><title>Docs: Tidegauge</title><link>https://british-oceanographic-data-centre.github.io/COAsT/docs/examples/tidegauge/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://british-oceanographic-data-centre.github.io/COAsT/docs/examples/tidegauge/</guid><description>
&lt;h1 id="overview">Overview&lt;/h1>
&lt;p>This is an object for storage and manipulation of tide gauge data
in a single dataset. This may require some processing of the observations
such as interpolation to a common time step.&lt;/p>
&lt;p>This object&amp;rsquo;s dataset should take the form (as with Timeseries):&lt;/p>
&lt;pre>&lt;code>Dimensions:
id_dim : The locations dimension. Each time series has an index
time : The time dimension. Each datapoint at each port has an index
Coordinates:
longitude (id_dim) : Longitude values for each port index
latitude (id_dim) : Latitude values for each port index
time (time) : Time values for each time index (datetime)
id_name (id_dim) : Name of index, e.g. port name or mooring id.
&lt;/code>&lt;/pre>
&lt;p>An example data variable could be ssh, or ntr (non-tidal residual). This
object can also be used for other instrument types, not just tide gauges.
For example moorings.&lt;/p>
&lt;p>Every &lt;code>id&lt;/code> index for this object should use the same time coordinates.
Therefore, timeseries need to be aligned before being placed into the
object. If there is any padding needed, then NaNs should be used. NaNs
should also be used for quality control/data rejection.&lt;/p>
&lt;h1 id="example-useage">Example Useage&lt;/h1>
&lt;p>Please see &lt;code>COAsT/example_scripts/tidegauge_validation&lt;/code> for some working
example scripts for using the &lt;code>Tidegauge&lt;/code> and &lt;code>TidegaugeAnalysis&lt;/code> classes.&lt;/p>
&lt;p>To get started you can use example data detailed in the Getting Started section:&lt;/p>
&lt;pre>&lt;code>import coast
dn_files = &amp;quot;./example_files/&amp;quot;
fn_dom = dn_files + &amp;quot;coast_example_nemo_domain.nc&amp;quot;
fn_dat = dn_files + &amp;quot;coast_example_nemo_data.nc&amp;quot;
fn_config = &amp;quot;./config/example_nemo_grid_t.json&amp;quot;
fn_multigauge = dn_files + &amp;quot;tg_amm15.nc&amp;quot;
fn_tidegauge = dn_files + &amp;quot;tide_gauges/lowestoft-p024-uk-bodc&amp;quot;
nemo = coast.Gridded(fn_dat, fn_dom, config=fn_config)
&lt;/code>&lt;/pre>&lt;h3 id="reading-and-manipulation">Reading and manipulation&lt;/h3>
&lt;p>We can create our empty tidegauge object:&lt;/p>
&lt;pre>&lt;code>tidegauge = coast.Tidegauge()
&lt;/code>&lt;/pre>&lt;p>The &lt;code>Tidegauge&lt;/code> class contains multiple methods for reading different typical
tidegauge formats. This includes reading from the GESLA and BODC databases.
To read a gesla file between two dates, we can use:&lt;/p>
&lt;pre>&lt;code>import datetime
date0 = datetime.datetime(2007,1,10)
date1 = datetime.datetime(2007,1,12)
tidegauge.read_gesla_v3(fn_tidegauge, date_start = date0, date_end = date1)
&lt;/code>&lt;/pre>&lt;p>For the rest of our examples, we will use data from multiple tide gauges
on the same time dimension, read in from a simple netCDF file:&lt;/p>
&lt;pre>&lt;code>import xarray as xr
dataset = xr.open_dataset( fn_multigauge )
tidegauge = coast.Tidegauge(dataset)
tidegauge.dataset = tidegauge.dataset.set_coords('time')
&lt;/code>&lt;/pre>&lt;p>Tidegauge has ready made quick plotting routines for viewing time series
and tide gauge location. To look at the tide gauge location:&lt;/p>
&lt;pre>&lt;code>fig, ax = tidegauge.plot_on_map()
&lt;/code>&lt;/pre>&lt;p>Or to look at a time series of the sea_level variable:&lt;/p>
&lt;pre>&lt;code>id=1
tidegauge.dataset.ssh[id].rename({'t_dim':'time'}).plot() # rename time dimension to enable automatic x-axis labelling
plt.show()
&lt;/code>&lt;/pre>&lt;p>Note that start and end dates can also be specified for plot_timeseries().&lt;/p>
&lt;p>We can do some simple spatial and temporal manipulations of this data:&lt;/p>
&lt;pre>&lt;code># Cut out a geographical box
tidegauge = tidegauge.subset_indices_lonlat_box(lonbounds = [-5, 0],
latbounds = [50, 55])
# Cut out a time window
tidegauge = tidegauge.time_slice( date0 = datetime.datetime(2007, 1, 1), date1 = datetime.datetime(2007,1,31))
&lt;/code>&lt;/pre>&lt;p>We can extract just some variables using, e.g.:&lt;/p>
&lt;pre>&lt;code>nemo.dataset = nemo.dataset.rename({&amp;quot;depth_0&amp;quot;: &amp;quot;depth&amp;quot;})
nemo.dataset = nemo.dataset[[&amp;quot;ssh&amp;quot;, &amp;quot;landmask&amp;quot;]]
&lt;/code>&lt;/pre>&lt;h3 id="direct-model-comparison">Direct model comparison&lt;/h3>
&lt;p>Before comparing our observations to the model, we will interpolate a model
variable to the same time and geographical space as the tidegauge. This is
done using the `obs_operator()`` method:&lt;/p>
&lt;pre>&lt;code># Suppose we have created a Gridded object called nemo
tidegauge_from_model = tidegauge.obs_operator(nemo, time_interp='nearest')
&lt;/code>&lt;/pre>&lt;p>Doing this has created a new interpolated tidegauge called &lt;code>tidegauge_from_model&lt;/code>
Take a look at &lt;code>tidegauge_from_model.dataset&lt;/code> to see for yourself. If a &lt;code>landmask&lt;/code>
variable is present in the &lt;code>Gridded&lt;/code> dataset then the nearest wet points will
be taken. Otherwise, just the nearest point is taken. If &lt;code>landmask&lt;/code> is required
but not present you will need to insert it into the dataset yourself. For nemo
data, you could use the &lt;code>bottom_level&lt;/code> or &lt;code>mbathy&lt;/code> variables to do this. E.g:&lt;/p>
&lt;pre>&lt;code>nemo.dataset[&amp;quot;landmask&amp;quot;] = nemo.dataset.bottom_level == 0
&lt;/code>&lt;/pre>&lt;p>For a good comparison, we would like to make sure that both the observed and
modelled &lt;code>Tidegauge&lt;/code> objects contain the same missing values. &lt;code>TidegaugeAnalysis&lt;/code>
contains a routine for ensuring this. First create our analysis object:&lt;/p>
&lt;pre>&lt;code>analysis = coast.TidegaugeAnalysis()
&lt;/code>&lt;/pre>&lt;p>Then use the &lt;code>match_missing_values()&lt;/code> routine:&lt;/p>
&lt;pre>&lt;code>obs_ssh, model_ssh = analysis.match_missing_values(tidegauge.dataset.ssh,
tidegauge_from_model.dataset.ssh)
&lt;/code>&lt;/pre>&lt;p>Although we input data arrays to the above routine, it returns two new Tidegauge
objects. Now you have equivalent and comparable sets of time series that can be
easily compared.&lt;/p>
&lt;p>The difference() routine will calculate differences, absolute_differences
and squared differenced for all variables:&lt;/p>
&lt;pre>&lt;code>diff = analysis.difference(obs_ssh.dataset, model_ssh.dataset)
&lt;/code>&lt;/pre>&lt;p>We can then easily get mean errors, MAE and MSE&lt;/p>
&lt;pre>&lt;code>mean_stats = diff.dataset.mean(dim=&amp;quot;t_dim&amp;quot;, skipna=True)
&lt;/code>&lt;/pre>&lt;h3 id="harmonic-analysis--non-tidal-residuals">Harmonic Analysis &amp;amp; Non-tidal Residuals&lt;/h3>
&lt;p>The &lt;code>Tidegauge&lt;/code> object contains some routines which make harmonic analysis and
the calculation/comparison of non-tidal residuals easier. Harmonic analysis is
done using the &lt;code>utide&lt;/code> package. Please see &lt;a href="https://pypi.org/project/UTide/">here&lt;/a> for more info.&lt;/p>
&lt;p>First we can use the &lt;code>TidegaugeAnalysis&lt;/code> class to do a harmonic analysis. Suppose
we have two &lt;code>Tidegauge&lt;/code> objects called &lt;code>tidegauge&lt;/code> and &lt;code>tidegauge_from_model&lt;/code> generated from tidegauge observations and model simulations respectively.&lt;/p>
&lt;p>We can subtract means from all time series:&lt;/p>
&lt;pre>&lt;code>analysis = coast.TidegaugeAnalysis()
obs_new, model_new = analysis.match_missing_values(tidegauge.dataset.ssh, tidegauge_from_model.dataset.ssh)
&lt;/code>&lt;/pre>&lt;p>Then subtract means from all the time series&lt;/p>
&lt;pre>&lt;code>model_timeseries = analysis.demean_timeseries(model_new.dataset)
obs_timeseries = analysis.demean_timeseries(obs_new.dataset)
&lt;/code>&lt;/pre>&lt;p>Then we can apply the harmonic analysis (though the example data is too short for this example to be that meaningful):&lt;/p>
&lt;pre>&lt;code>ha_mod = analysis.harmonic_analysis_utide(model_timeseries.dataset.ssh, min_datapoints = 1)
ha_obs = analysis.harmonic_analysis_utide(obs_timeseries.dataset.ssh, min_datapoints = 1)
&lt;/code>&lt;/pre>&lt;p>The &lt;code>harmonic_analysis_utide&lt;/code> routine returns a list of &lt;code>utide&lt;/code> structure object,
one for each &lt;code>id_dim&lt;/code> in the &lt;code>Tidegauge&lt;/code> object. It can be passed any of the
arguments that go to &lt;code>utide&lt;/code>. It also has an additional argument &lt;code>min_datapoints&lt;/code>
which determines a minimum number of data points for the harmonics analysis.
If a tidegauge &lt;code>id_dim&lt;/code> has less than this number, it will not return an analysis.&lt;/p>
&lt;p>Now, create new TidegaugeMultiple objects containing reconstructed tides:&lt;/p>
&lt;pre>&lt;code>tide_mod = analysis.reconstruct_tide_utide(model_timeseries.dataset.time, ha_mod)
tide_obs = analysis.reconstruct_tide_utide(obs_timeseries.dataset.time, ha_obs)
&lt;/code>&lt;/pre>&lt;p>Get new TidegaugeMultiple objects containing non tidal residuals:&lt;/p>
&lt;pre>&lt;code>ntr_mod = analysis.calculate_non_tidal_residuals(model_timeseries.dataset.ssh, tide_mod.dataset.reconstructed)
ntr_obs = analysis.calculate_non_tidal_residuals(obs_timeseries.dataset.ssh, tide_obs.dataset.reconstructed)
&lt;/code>&lt;/pre>&lt;p>By default, this routines will apply &lt;code>scipy.signal.savgol_filter&lt;/code> to the non-tidal residuals
to remove some noise. This can be switched off using &lt;code>apply_filter = False&lt;/code>.&lt;/p>
&lt;p>The Doodson X0 filter is an alternative way of estimating non-tidal residuals:&lt;/p>
&lt;pre>&lt;code>dx0 = analysis.doodson_x0_filter(tidegauge.dataset, &amp;quot;ssh&amp;quot;)
&lt;/code>&lt;/pre>&lt;p>This will return a new &lt;code>Tidegauge()&lt;/code> object containing filtered &lt;code>ssh&lt;/code> data.&lt;/p>
&lt;h3 id="6-threshold-statistics">6. Threshold Statistics&lt;/h3>
&lt;p>This is a simple extreme value analysis of whatever data you use.
It will count the number of peaks and the total time spent over each
threshold provided. It will also count the numbers of daily and monthly
maxima over each threshold. To this, a &lt;code>Tidegauge&lt;/code> object and an array of
thresholds (in metres) should be passed:&lt;/p>
&lt;pre>&lt;code>import numpy as np
thresh_mod = analysis.threshold_statistics(ntr_mod.dataset, thresholds=np.arange(0, 2, 0.2))
thresh_obs = analysis.threshold_statistics(ntr_obs.dataset, thresholds=np.arange(0, 2, 0.2))
&lt;/code>&lt;/pre></description></item><item><title>Docs: Contour subsetting</title><link>https://british-oceanographic-data-centre.github.io/COAsT/docs/examples/contour/</link><pubDate>Tue, 05 Oct 2021 00:00:00 +0000</pubDate><guid>https://british-oceanographic-data-centre.github.io/COAsT/docs/examples/contour/</guid><description>
&lt;p>In this tutorial we take a look the following Isobath Contour Methods:&lt;/p>
&lt;pre>&lt;code>1. Extract isbath contour between two points
2. Plot contour on map
3. Calculate pressure along contour
4. Calculate flow across contour
5. Calculate pressure gradient driven flow across contour
&lt;/code>&lt;/pre>
&lt;h2 id="create-a-contour-subset-of-the-example-dataset">Create a contour subset of the example dataset&lt;/h2>
&lt;p>Load packages and define some file paths&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">&lt;span style="color:#204a87;font-weight:bold">import&lt;/span> &lt;span style="color:#000">coast&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">import&lt;/span> &lt;span style="color:#000">matplotlib.pyplot&lt;/span> &lt;span style="color:#204a87;font-weight:bold">as&lt;/span> &lt;span style="color:#000">plt&lt;/span>
&lt;span style="color:#000">fn_nemo_dat_t&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;./example_files/nemo_data_T_grid.nc&amp;#34;&lt;/span>
&lt;span style="color:#000">fn_nemo_dat_u&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;./example_files/nemo_data_U_grid.nc&amp;#34;&lt;/span>
&lt;span style="color:#000">fn_nemo_dat_v&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;./example_files/nemo_data_V_grid.nc&amp;#34;&lt;/span>
&lt;span style="color:#000">fn_nemo_dom&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;./example_files/coast_example_nemo_domain.nc&amp;#34;&lt;/span>
&lt;span style="color:#8f5902;font-style:italic"># Configuration files describing the data files&lt;/span>
&lt;span style="color:#000">fn_config_t_grid&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;./config/example_nemo_grid_t.json&amp;#34;&lt;/span>
&lt;span style="color:#000">fn_config_f_grid&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;./config/example_nemo_grid_f.json&amp;#34;&lt;/span>
&lt;span style="color:#000">fn_config_u_grid&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;./config/example_nemo_grid_u.json&amp;#34;&lt;/span>
&lt;span style="color:#000">fn_config_v_grid&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;./config/example_nemo_grid_v.json&amp;#34;&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>To extract isobath contour between two points and create contour object,
first create a gridded object with the grid only.&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">&lt;span style="color:#000">nemo_f&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000">coast&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">Gridded&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">fn_domain&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#000">fn_nemo_dom&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">config&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#000">fn_config_f_grid&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Then create a contour object on the 200m isobath&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">&lt;span style="color:#000">contours&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">no_contours&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000">coast&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">Contour&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">get_contours&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">nemo_f&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">200&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Extract the indices for the contour in a specified box&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">&lt;span style="color:#000">y_ind&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">x_ind&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">contour&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000">coast&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">Contour&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">get_contour_segment&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">nemo_f&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">contours&lt;/span>&lt;span style="color:#000;font-weight:bold">[&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">0&lt;/span>&lt;span style="color:#000;font-weight:bold">],&lt;/span> &lt;span style="color:#000;font-weight:bold">[&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">50&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">-&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">10&lt;/span>&lt;span style="color:#000;font-weight:bold">],&lt;/span> &lt;span style="color:#000;font-weight:bold">[&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">60&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">3&lt;/span>&lt;span style="color:#000;font-weight:bold">])&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Extract the contour for the specified indices&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">&lt;span style="color:#000">cont_f&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000">coast&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">ContourF&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">nemo_f&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">y_ind&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">x_ind&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">200&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="plot-contour-on-map">Plot contour on map&lt;/h2>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">&lt;span style="color:#000">plt&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">figure&lt;/span>&lt;span style="color:#000;font-weight:bold">()&lt;/span>
&lt;span style="color:#000">coast&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">Contour&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">plot_contour&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">nemo_f&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">contour&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;span style="color:#000">plt&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">show&lt;/span>&lt;span style="color:#000;font-weight:bold">()&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>
&lt;div class="card rounded p-2 td-post-card mb-4 mt-4" style="max-width: 610px">
&lt;img class="card-img-top" src="https://british-oceanographic-data-centre.github.io/COAsT/COAsT/docs/examples/contour/contour_hue570a722f944c923154955e8cddd377c_99532_600x700_fit_catmullrom_2.png" width="600" height="450">
&lt;div class="card-body px-0 pt-2 pb-0">
&lt;p class="card-text">
&lt;/p>
&lt;/div>
&lt;/div>
&lt;h2 id="calculate-pressure-along-contour">Calculate pressure along contour&lt;/h2>
&lt;p>Repeat the above procedure but on t-points&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">&lt;span style="color:#000">nemo_t&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000">coast&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">Gridded&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">fn_data&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#000">fn_nemo_dat_t&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">fn_domain&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#000">fn_nemo_dom&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">config&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#000">fn_config_t_grid&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;span style="color:#000">contours&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">no_contours&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000">coast&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">Contour&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">get_contours&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">nemo_t&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">200&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;span style="color:#000">y_ind&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">x_ind&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">contour&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000">coast&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">Contour&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">get_contour_segment&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">nemo_t&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">contours&lt;/span>&lt;span style="color:#000;font-weight:bold">[&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">0&lt;/span>&lt;span style="color:#000;font-weight:bold">],&lt;/span> &lt;span style="color:#000;font-weight:bold">[&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">50&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">-&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">10&lt;/span>&lt;span style="color:#000;font-weight:bold">],&lt;/span> &lt;span style="color:#000;font-weight:bold">[&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">60&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">3&lt;/span>&lt;span style="color:#000;font-weight:bold">])&lt;/span>
&lt;span style="color:#000">cont_t&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000">coast&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">ContourT&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">nemo_t&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">y_ind&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">x_ind&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">200&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Now construct pressure along this contour segment&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">&lt;span style="color:#000">cont_t&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">construct_pressure&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">1027&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>This creates &lt;code>cont_t.data_contour.pressure_s&lt;/code> and &lt;code>cont_t.data_contour.pressure_h_zlevels&lt;/code> fields.&lt;/p>
&lt;h2 id="calculate-flow-across-contour">Calculate flow across contour&lt;/h2>
&lt;p>Create the contour segement on f-points again&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">&lt;span style="color:#000">nemo_f&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000">coast&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">Gridded&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">fn_domain&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#000">fn_nemo_dom&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">config&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#000">fn_config_f_grid&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;span style="color:#000">nemo_u&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000">coast&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">Gridded&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">fn_data&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#000">fn_nemo_dat_u&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">fn_domain&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#000">fn_nemo_dom&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">config&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#000">fn_config_u_grid&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;span style="color:#000">nemo_v&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000">coast&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">Gridded&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">fn_data&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#000">fn_nemo_dat_v&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">fn_domain&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#000">fn_nemo_dom&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">config&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#000">fn_config_v_grid&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;span style="color:#000">contours&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">no_contours&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000">coast&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">Contour&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">get_contours&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">nemo_f&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">200&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;span style="color:#000">y_ind&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">x_ind&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">contour&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000">coast&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">Contour&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">get_contour_segment&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">nemo_f&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">contours&lt;/span>&lt;span style="color:#000;font-weight:bold">[&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">0&lt;/span>&lt;span style="color:#000;font-weight:bold">],&lt;/span> &lt;span style="color:#000;font-weight:bold">[&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">50&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">-&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">10&lt;/span>&lt;span style="color:#000;font-weight:bold">],&lt;/span> &lt;span style="color:#000;font-weight:bold">[&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">60&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">3&lt;/span>&lt;span style="color:#000;font-weight:bold">])&lt;/span>
&lt;span style="color:#000">cont_f&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000">coast&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">ContourF&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">nemo_f&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">y_ind&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">x_ind&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">200&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>To calculate the flow across the contour, pass u- and v- gridded velocity objects&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">&lt;span style="color:#000">cont_f&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">calc_cross_contour_flow&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">nemo_u&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">nemo_v&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>This creates fields &lt;code>cont_f.data_cross_flow.normal_velocities&lt;/code> and
&lt;code>cont_f.data_cross_flow.depth_integrated_normal_transport&lt;/code>&lt;/p>
&lt;h2 id="calculate-pressure-gradient-driven-flow-across-contour">Calculate pressure gradient driven flow across contour&lt;/h2>
&lt;p>The &amp;ldquo;calc_geostrophic_flow()&amp;rdquo; operates on f-grid objects and requires
configuration files for the u- and v- grids&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">&lt;span style="color:#000">cont_f&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">calc_geostrophic_flow&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">nemo_t&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">config_u&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#000">fn_config_u_grid&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">config_v&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#000">fn_config_v_grid&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">ref_density&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">1027&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>This constructs:&lt;/p>
&lt;pre>&lt;code> cont_f.data_cross_flow.normal_velocity_hpg
cont_f.data_cross_flow.normal_velocity_spg
cont_f.data_cross_flow.transport_across_AB_hpg
cont_f.data_cross_flow.transport_across_AB_spg
&lt;/code>&lt;/pre></description></item><item><title>Docs: Transect subsetting</title><link>https://british-oceanographic-data-centre.github.io/COAsT/docs/examples/transect/</link><pubDate>Tue, 05 Oct 2021 00:00:00 +0000</pubDate><guid>https://british-oceanographic-data-centre.github.io/COAsT/docs/examples/transect/</guid><description>
&lt;p>In this tutorial we take a look at subsetting the model data along a transect (a custom straight line) and creating some bespoke diagnostics along it. We look at:&lt;/p>
&lt;pre>&lt;code>1. Creating a Transect object, defined between two points.
2. Plotting data along a transect.
3. Calculating flow normal to the transect
&lt;/code>&lt;/pre>
&lt;h2 id="create-a-transect-subset-of-the-example-dataset">Create a transect subset of the example dataset&lt;/h2>
&lt;p>Load packages and define some file paths&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">&lt;span style="color:#204a87;font-weight:bold">import&lt;/span> &lt;span style="color:#000">coast&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">import&lt;/span> &lt;span style="color:#000">xarray&lt;/span> &lt;span style="color:#204a87;font-weight:bold">as&lt;/span> &lt;span style="color:#000">xr&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">import&lt;/span> &lt;span style="color:#000">matplotlib.pyplot&lt;/span> &lt;span style="color:#204a87;font-weight:bold">as&lt;/span> &lt;span style="color:#000">plt&lt;/span>
&lt;span style="color:#000">fn_nemo_dat_t&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;./example_files/nemo_data_T_grid.nc&amp;#34;&lt;/span>
&lt;span style="color:#000">fn_nemo_dat_u&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;./example_files/nemo_data_U_grid.nc&amp;#34;&lt;/span>
&lt;span style="color:#000">fn_nemo_dat_v&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;./example_files/nemo_data_V_grid.nc&amp;#34;&lt;/span>
&lt;span style="color:#000">fn_nemo_dom&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;./example_files/coast_example_nemo_domain.nc&amp;#34;&lt;/span>
&lt;span style="color:#8f5902;font-style:italic"># Configuration files describing the data files&lt;/span>
&lt;span style="color:#000">fn_config_t_grid&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;./config/example_nemo_grid_t.json&amp;#34;&lt;/span>
&lt;span style="color:#000">fn_config_f_grid&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;./config/example_nemo_grid_f.json&amp;#34;&lt;/span>
&lt;span style="color:#000">fn_config_u_grid&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;./config/example_nemo_grid_u.json&amp;#34;&lt;/span>
&lt;span style="color:#000">fn_config_v_grid&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;./config/example_nemo_grid_v.json&amp;#34;&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Load data variables that are on the NEMO t-grid&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">&lt;span style="color:#000">nemo_t&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000">coast&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">Gridded&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span> &lt;span style="color:#000">fn_data&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000">fn_nemo_dat_t&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">fn_domain&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000">fn_nemo_dom&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">config&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#000">fn_config_t_grid&lt;/span> &lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Now create a transect between the points (54 N 15 W) and (56 N, 12 W) using the &lt;code>coast.TransectT&lt;/code> object. This needs to be passed the corresponding Gridded object and transect end points. The model points closest to these coordinates will be selected as the transect end points.&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">&lt;span style="color:#000">tran_t&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000">coast&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">TransectT&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span> &lt;span style="color:#000">nemo_t&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">54&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">-&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">15&lt;/span>&lt;span style="color:#000;font-weight:bold">),&lt;/span> &lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">56&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">-&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">12&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span> &lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;span style="color:#000">tran_t&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">data&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>where &lt;code>r_dim&lt;/code> is the dimension along the transect. It is simple to plot a scalar such as temperature along the transect:&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">&lt;span style="color:#000">temp_mean&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000">tran_t&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">data&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">temperature&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">mean&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">dim&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#4e9a06">&amp;#39;t_dim&amp;#39;&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;span style="color:#000">temp_mean&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">plot&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">pcolormesh&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">y&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#4e9a06">&amp;#39;depth_0&amp;#39;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">yincrease&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#3465a4">False&lt;/span> &lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>
&lt;div class="card rounded p-2 td-post-card mb-4 mt-4" style="max-width: 610px">
&lt;img class="card-img-top" src="https://british-oceanographic-data-centre.github.io/COAsT/COAsT/docs/examples/transect/tran_example_1_huc0374360151990e29f4aab9b4a2c01d3_70302_600x700_fit_catmullrom_2.png" width="600" height="343">
&lt;div class="card-body px-0 pt-2 pb-0">
&lt;p class="card-text">
&lt;/p>
&lt;/div>
&lt;/div>
&lt;h2 id="flow-across-the-transect">Flow across the transect&lt;/h2>
&lt;p>With NEMOâ€™s staggered grid, the first step is to define the transect on the f-grid so that the velocity components are between f-points. We do not need any model data on the f-grid, just the grid information, so create a nemo f-grid object&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">&lt;span style="color:#000">nemo_f&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000">coast&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">Gridded&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span> &lt;span style="color:#000">fn_domain&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000">fn_nemo_dom&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">config&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#000">fn_config_f_grid&lt;/span> &lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>and a transect on the f-grid&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">&lt;span style="color:#000">tran_f&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000">coast&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">TransectF&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span> &lt;span style="color:#000">nemo_f&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">54&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">-&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">15&lt;/span>&lt;span style="color:#000;font-weight:bold">),&lt;/span> &lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">56&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">-&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">12&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span> &lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;span style="color:#000">tran_f&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">data&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>We also need the i- and j-components of velocity so (lazy) load the model data on the u- and v-grid grids&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">&lt;span style="color:#000">nemo_u&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000">coast&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">Gridded&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span> &lt;span style="color:#000">fn_data&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000">fn_nemo_dat_u&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">fn_domain&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000">fn_nemo_dom&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">config&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#000">fn_config_u_grid&lt;/span> &lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;span style="color:#000">nemo_v&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000">coast&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">Gridded&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span> &lt;span style="color:#000">fn_data&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000">fn_nemo_dat_v&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">fn_domain&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000">fn_nemo_dom&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">config&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#000">fn_config_v_grid&lt;/span> &lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Now we can calculate the flow across the transect with the method&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">&lt;span style="color:#000">tran_f&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">calc_flow_across_transect&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">nemo_u&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>&lt;span style="color:#000">nemo_v&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>The flow across the transect is stored in a new dataset where the variables are all defined at the points between f-points.&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">&lt;span style="color:#000">tran_f&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">data_cross_tran_flow&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>For example, to plot the time averaged velocity across the transect, we can plot the â€˜normal_velocitiesâ€™ variable&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">&lt;span style="color:#000">cross_velocity_mean&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000">tran_f&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">data_cross_tran_flow&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">normal_velocities&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">mean&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">dim&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#4e9a06">&amp;#39;t_dim&amp;#39;&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;span style="color:#000">cross_velocity_mean&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">rolling&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">r_dim&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">2&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">mean&lt;/span>&lt;span style="color:#000;font-weight:bold">()&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">plot&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">pcolormesh&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">yincrease&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#3465a4">False&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>&lt;span style="color:#000">y&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#4e9a06">&amp;#39;depth_0&amp;#39;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>&lt;span style="color:#000">cbar_kwargs&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#000;font-weight:bold">{&lt;/span>&lt;span style="color:#4e9a06">&amp;#39;label&amp;#39;&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#4e9a06">&amp;#39;m/s&amp;#39;&lt;/span>&lt;span style="color:#000;font-weight:bold">})&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>
&lt;div class="card rounded p-2 td-post-card mb-4 mt-4" style="max-width: 610px">
&lt;img class="card-img-top" src="https://british-oceanographic-data-centre.github.io/COAsT/COAsT/docs/examples/transect/tran_example_2_hua102100769c84e4cc18bb772644b2274_87906_600x700_fit_catmullrom_2.png" width="600" height="343">
&lt;div class="card-body px-0 pt-2 pb-0">
&lt;p class="card-text">
&lt;/p>
&lt;/div>
&lt;/div>
&lt;p>or the volume transport across the transect, we can plot the â€˜normal_transportsâ€™ variable&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">&lt;span style="color:#000">cross_transport_mean&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000">tran_f&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">data_cross_tran_flow&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">normal_transports&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">mean&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">dim&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#4e9a06">&amp;#39;t_dim&amp;#39;&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;span style="color:#000">cross_transport_mean&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">rolling&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">r_dim&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">2&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">mean&lt;/span>&lt;span style="color:#000;font-weight:bold">()&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">plot&lt;/span>&lt;span style="color:#000;font-weight:bold">()&lt;/span>
&lt;span style="color:#000">plt&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">ylabel&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#4e9a06">&amp;#39;Sv&amp;#39;&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>
&lt;div class="card rounded p-2 td-post-card mb-4 mt-4" style="max-width: 610px">
&lt;img class="card-img-top" src="https://british-oceanographic-data-centre.github.io/COAsT/COAsT/docs/examples/transect/tran_example_3_hu4e9b9525b3f641ad4846499f81ec781c_69967_600x700_fit_catmullrom_2.png" width="600" height="343">
&lt;div class="card-body px-0 pt-2 pb-0">
&lt;p class="card-text">
&lt;/p>
&lt;/div>
&lt;/div></description></item><item><title>Docs: Build test</title><link>https://british-oceanographic-data-centre.github.io/COAsT/docs/contributing_package/build_test/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://british-oceanographic-data-centre.github.io/COAsT/docs/contributing_package/build_test/</guid><description>
&lt;p>A short script to install COAsT in a conda environment, download and run some
build tests.&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-shell" data-lang="shell">&lt;span style="color:#8f5902;font-style:italic"># Fresh build&lt;/span>
module load anaconda/3-5.1.0 &lt;span style="color:#8f5902;font-style:italic"># or whatever it takes to activate conda&lt;/span>
yes &lt;span style="color:#000;font-weight:bold">|&lt;/span> conda env remove --name test_env
yes &lt;span style="color:#000;font-weight:bold">|&lt;/span> conda create -n test_env &lt;span style="color:#000">python&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>3.8 &lt;span style="color:#8f5902;font-style:italic"># create a new environment&lt;/span>
conda activate test_env
yes &lt;span style="color:#000;font-weight:bold">|&lt;/span> conda install -c conda-forge -c bodc coast
yes &lt;span style="color:#000;font-weight:bold">|&lt;/span> conda install -c conda-forge &lt;span style="color:#000">cartopy&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>0.18.0 &lt;span style="color:#8f5902;font-style:italic"># used for some of the map plotting&lt;/span>
&lt;span style="color:#8f5902;font-style:italic"># Download bits and bobs&lt;/span>
rm -rf coast_test
mkdir coast_test
&lt;span style="color:#204a87">cd&lt;/span> coast_test
git clone https://github.com/British-Oceanographic-Data-Centre/COAsT.git
wget -c https://linkedsystems.uk/erddap/files/COAsT_example_files/COAsT_example_files.zip &lt;span style="color:#ce5c00;font-weight:bold">&amp;amp;&amp;amp;&lt;/span> unzip COAsT_example_files.zip
ln -s COAsT/unit_testing/ .
ln -s COAsT_example_files example_files
&lt;span style="color:#8f5902;font-style:italic"># Run unit tests&lt;/span>
python COAsT/unit_testing/unit_test.py &amp;gt; coast_test.txt
&lt;span style="color:#8f5902;font-style:italic">## If OK then clean up&lt;/span>
&lt;span style="color:#204a87">cd&lt;/span> ..
rm -rf coast_test
&lt;/code>&lt;/pre>&lt;/div></description></item><item><title>Docs: Push to master</title><link>https://british-oceanographic-data-centre.github.io/COAsT/docs/contributing_package/push_to_master/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://british-oceanographic-data-centre.github.io/COAsT/docs/contributing_package/push_to_master/</guid><description>
&lt;p>To date the workflow has been to unit test anything and everything that goes
into the develop branch and then periodically push to master less frequently
and issue a new github release.&lt;/p>
&lt;p>With the push to master Git Actions build the conda and pip packages and the
package receives a zenodo update (&lt;a href="https://zenodo.org/account/settings/github/repository/British-Oceanographic-Data-Centre/COAsT">https://zenodo.org/account/settings/github/repository/British-Oceanographic-Data-Centre/COAsT&lt;/a>) and DOI.&lt;/p>
&lt;h3 id="1-push-to-master">1. Push to master&lt;/h3>
&lt;p>Any push to master initiates the Git Actions to build and release the package. It is advisable then to prepare the release in develop and only ever pull into master from develop. (Pulling from master to develop could bring unexpected Git Actions to develop). In order for the package builds to work the version of the package must be unique. The &lt;strong>version&lt;/strong> of the package is set in
file &lt;em>setup.py&lt;/em>. E.g. shown as 2.0.1 below:&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-shell" data-lang="shell">&lt;span style="color:#8f5902;font-style:italic"># setup.py&lt;/span>
...
&lt;span style="color:#000">PACKAGE&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> SimpleNamespace&lt;span style="color:#ce5c00;font-weight:bold">(&lt;/span>**&lt;span style="color:#ce5c00;font-weight:bold">{&lt;/span>
&lt;span style="color:#4e9a06">&amp;#34;name&amp;#34;&lt;/span>: &lt;span style="color:#4e9a06">&amp;#34;COAsT&amp;#34;&lt;/span>,
&lt;span style="color:#4e9a06">&amp;#34;version&amp;#34;&lt;/span>: &lt;span style="color:#4e9a06">&amp;#34;2.0.1&amp;#34;&lt;/span>,
&lt;span style="color:#4e9a06">&amp;#34;description&amp;#34;&lt;/span>: &lt;span style="color:#4e9a06">&amp;#34;This is the Coast Ocean Assessment Tool&amp;#34;&lt;/span>,
&lt;span style="color:#4e9a06">&amp;#34;url&amp;#34;&lt;/span>: &lt;span style="color:#4e9a06">&amp;#34;https://www.bodc.ac.uk&amp;#34;&lt;/span>,
&lt;span style="color:#4e9a06">&amp;#34;download_url&amp;#34;&lt;/span>: &lt;span style="color:#4e9a06">&amp;#34;https://github.com/British-Oceanographic-Data-Centre/COAsT/&amp;#34;&lt;/span>,
....
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Package version also appears in CITATION.cff file, which therefore also needs updating. E.g.:&lt;/p>
&lt;pre>&lt;code>...
title: British-Oceanographic-Data-Centre/COAsT: v2.0.1
version: v2.0.1
date-released: 2022-04-07
&lt;/code>&lt;/pre>&lt;p>Version numbering follows the &lt;a href="http://semver.org/">semantic versioning convention&lt;/a>.
Briefly, given a version number MAJOR.MINOR.PATCH, increment the:&lt;/p>
&lt;ul>
&lt;li>MAJOR version when you make incompatible API changes,&lt;/li>
&lt;li>MINOR version when you add functionality in a backwards compatible manner, and&lt;/li>
&lt;li>PATCH version when you make backwards compatible bug fixes.
Additional labels for pre-release and build metadata are available as extensions to the MAJOR.MINOR.PATCH format.&lt;/li>
&lt;/ul>
&lt;h3 id="2-issue-new-release">2. Issue new release&lt;/h3>
&lt;p>Then issue a &lt;a href="https://github.com/British-Oceanographic-Data-Centre/COAsT/releases">new release&lt;/a>, with the new version label, and annotate the major changes.&lt;/p></description></item><item><title>Docs: Empirical Orthogonal Functions</title><link>https://british-oceanographic-data-centre.github.io/COAsT/docs/examples/eofs/</link><pubDate>Wed, 25 Nov 2020 00:00:00 +0000</pubDate><guid>https://british-oceanographic-data-centre.github.io/COAsT/docs/examples/eofs/</guid><description>
&lt;p>Using COAsT to compute the Empirical Orthogonal Functions (EOFs) of your data.&lt;/p>
&lt;h2 id="load-data-and-compute-eofs">Load data and compute EOFs&lt;/h2>
&lt;p>Load packages and define some file paths&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">&lt;span style="color:#204a87;font-weight:bold">import&lt;/span> &lt;span style="color:#000">coast&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">import&lt;/span> &lt;span style="color:#000">xarray&lt;/span> &lt;span style="color:#204a87;font-weight:bold">as&lt;/span> &lt;span style="color:#000">xr&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">import&lt;/span> &lt;span style="color:#000">matplotlib.pyplot&lt;/span> &lt;span style="color:#204a87;font-weight:bold">as&lt;/span> &lt;span style="color:#000">plt&lt;/span>
&lt;span style="color:#000">fn_nemo_dat_t&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;./example_files/nemo_data_T_grid.nc&amp;#34;&lt;/span>
&lt;span style="color:#000">fn_nemo_dom&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;./example_files/COAsT_example_NEMO_domain.nc&amp;#34;&lt;/span>
&lt;span style="color:#000">fn_nemo_config&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;./config/example_nemo_grid_t.json&amp;#34;&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Load data variables that are on the NEMO t-grid&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">&lt;span style="color:#000">nemo_t&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000">coast&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">Gridded&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span> &lt;span style="color:#000">fn_data&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000">fn_nemo_dat_t&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">fn_domain&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000">fn_nemo_dom&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">config&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000">fn_nemo_config&lt;/span> &lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>For a variable (or subset of a variable) with two spatial dimensions and one temporal dimension, i.e. (x,y,t), the EOFs, temporal projections and variance explained can be computed by calling the â€˜eofsâ€™ method, and passing in the ssh DataArray as an argument. For example, for the sea surface height field, we can do&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">&lt;span style="color:#000">eof_data&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000">coast&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">compute_eofs&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span> &lt;span style="color:#000">nemo_t&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">dataset&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">ssh&lt;/span> &lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>The method returns an xarray dataset that contains the EOFs, temporal projections and variance as DataArrays&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">&lt;span style="color:#000">eof_data&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>The variance explained of the first four modes is&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">&lt;span style="color:#000">eof_data&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">variance&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">sel&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">mode&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#000;font-weight:bold">[&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">1&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">2&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">3&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">4&lt;/span>&lt;span style="color:#000;font-weight:bold">])&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>And the EOFs and temporal projections can be quick plotted:&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">&lt;span style="color:#000">eof_data&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">EOF&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">sel&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">mode&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#000;font-weight:bold">[&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">1&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">2&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">3&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">4&lt;/span>&lt;span style="color:#000;font-weight:bold">])&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">plot&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">pcolormesh&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">col&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#4e9a06">&amp;#39;mode&amp;#39;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>&lt;span style="color:#000">col_wrap&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">2&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>&lt;span style="color:#000">x&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#4e9a06">&amp;#39;longitude&amp;#39;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>&lt;span style="color:#000">y&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#4e9a06">&amp;#39;latitude&amp;#39;&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>
&lt;div class="card rounded p-2 td-post-card mb-4 mt-4" style="max-width: 610px">
&lt;img class="card-img-top" src="https://british-oceanographic-data-centre.github.io/COAsT/COAsT/docs/examples/eofs/eof_example_1_huc339f414da7e1446207bdd919fb234d4_194213_600x700_fit_catmullrom_2.png" width="600" height="514">
&lt;div class="card-body px-0 pt-2 pb-0">
&lt;p class="card-text">
&lt;/p>
&lt;/div>
&lt;/div>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">&lt;span style="color:#000">eof_data&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">temporal_proj&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">sel&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">mode&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#000;font-weight:bold">[&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">1&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">2&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">3&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">4&lt;/span>&lt;span style="color:#000;font-weight:bold">])&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">plot&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">col&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#4e9a06">&amp;#39;mode&amp;#39;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>&lt;span style="color:#000">col_wrap&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">2&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>&lt;span style="color:#000">x&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#4e9a06">&amp;#39;time&amp;#39;&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>
&lt;div class="card rounded p-2 td-post-card mb-4 mt-4" style="max-width: 610px">
&lt;img class="card-img-top" src="https://british-oceanographic-data-centre.github.io/COAsT/COAsT/docs/examples/eofs/eof_example_2_hud12a330940735bfb3434238716024013_71478_600x700_fit_catmullrom_2.png" width="600" height="514">
&lt;div class="card-body px-0 pt-2 pb-0">
&lt;p class="card-text">
&lt;/p>
&lt;/div>
&lt;/div>
&lt;p>The more exotic hilbert complex EOFs can also be computed to investigate the propagation of variability, for example:&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">&lt;span style="color:#000">heof_data&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000">coast&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">compute_hilbert_eofs&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span> &lt;span style="color:#000">nemo_t&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">dataset&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">ssh&lt;/span> &lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;span style="color:#000">heof_data&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>now with the modes expressed by their amplitude and phase, the spatial propagation of the variability can be examined through the EOF_phase.&lt;/p></description></item><item><title>Docs: Stratification diagnostics</title><link>https://british-oceanographic-data-centre.github.io/COAsT/docs/examples/stratification/</link><pubDate>Tue, 05 Oct 2021 00:00:00 +0000</pubDate><guid>https://british-oceanographic-data-centre.github.io/COAsT/docs/examples/stratification/</guid><description>
&lt;p>A demonstration of pycnocline depth and thickness diagnostics. The first and second depth moments of stratification are computed as proxies for pycnocline depth and thickness, suitable for a nearly two-layer fluid.&lt;/p>
&lt;p>Note that in the AMM7 example data the plots are not particularly spectacular as the internal tide is poorly resolved at 7km.&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">&lt;span style="color:#204a87;font-weight:bold">import&lt;/span> &lt;span style="color:#000">coast&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">import&lt;/span> &lt;span style="color:#000">numpy&lt;/span> &lt;span style="color:#204a87;font-weight:bold">as&lt;/span> &lt;span style="color:#000">np&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">import&lt;/span> &lt;span style="color:#000">os&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">import&lt;/span> &lt;span style="color:#000">xarray&lt;/span> &lt;span style="color:#204a87;font-weight:bold">as&lt;/span> &lt;span style="color:#000">xr&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">import&lt;/span> &lt;span style="color:#000">dask&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">import&lt;/span> &lt;span style="color:#000">matplotlib.pyplot&lt;/span> &lt;span style="color:#204a87;font-weight:bold">as&lt;/span> &lt;span style="color:#000">plt&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">import&lt;/span> &lt;span style="color:#000">matplotlib.colors&lt;/span> &lt;span style="color:#204a87;font-weight:bold">as&lt;/span> &lt;span style="color:#000">colors&lt;/span> &lt;span style="color:#8f5902;font-style:italic"># colormap fiddling&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="load-in-the-data">Load in the Data&lt;/h2>
&lt;p>set some aliases and load the t-grid data:&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">&lt;span style="color:#8f5902;font-style:italic"># set some paths&lt;/span>
&lt;span style="color:#000">config&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#4e9a06">&amp;#39;AMM7&amp;#39;&lt;/span>
&lt;span style="color:#000">fn_nemo_grid_t_dat&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#4e9a06">&amp;#39;./example_files/nemo_data_T_grid_Aug2015.nc&amp;#39;&lt;/span>
&lt;span style="color:#000">fn_nemo_dom&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#4e9a06">&amp;#39;./example_files/coast_example_nemo_domain.nc&amp;#39;&lt;/span>
&lt;span style="color:#000">config_t&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;./config/example_nemo_grid_t.json&amp;#34;&lt;/span>
&lt;span style="color:#000">config_w&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;./config/example_nemo_grid_w.json&amp;#34;&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Create a Gridded object and load in the data:&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">&lt;span style="color:#000">nemo_t&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000">coast&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">Gridded&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">fn_nemo_grid_t_dat&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">fn_nemo_dom&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">config&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#000">config_t&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>The stratification variables are computed as centred differences of the t-grid variables. These will become w-grid variables. So, create an empty w-grid object, to store stratification. Note how we do not pass a NEMO data file for this load.&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">&lt;span style="color:#000">nemo_w&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000">coast&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">Gridded&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">fn_domain&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#000">fn_nemo_dom&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">config&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#000">config_w&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="subset-the-domain">Subset the Domain&lt;/h2>
&lt;p>We are not interested in the whole doman so it is computationally efficient to subset the data for the region of interest. Here we will look at the North Sea between (51N: 62N) and (-4E:15E). We will great subset objects for both the t- and w-grids:&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">&lt;span style="color:#000">ind_2d&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000">nemo_t&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">subset_indices&lt;/span>&lt;span style="color:#000;font-weight:bold">([&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">51&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">-&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">4&lt;/span>&lt;span style="color:#000;font-weight:bold">],&lt;/span> &lt;span style="color:#000;font-weight:bold">[&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">62&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">15&lt;/span>&lt;span style="color:#000;font-weight:bold">])&lt;/span>
&lt;span style="color:#000">nemo_nwes_t&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000">nemo_t&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">isel&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">y_dim&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#000">ind_2d&lt;/span>&lt;span style="color:#000;font-weight:bold">[&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">0&lt;/span>&lt;span style="color:#000;font-weight:bold">],&lt;/span> &lt;span style="color:#000">x_dim&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#000">ind_2d&lt;/span>&lt;span style="color:#000;font-weight:bold">[&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">1&lt;/span>&lt;span style="color:#000;font-weight:bold">])&lt;/span> &lt;span style="color:#8f5902;font-style:italic">#nwes = northwest european shelf&lt;/span>
&lt;span style="color:#000">ind_2d&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000">nemo_w&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">subset_indices&lt;/span>&lt;span style="color:#000;font-weight:bold">([&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">51&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">-&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">4&lt;/span>&lt;span style="color:#000;font-weight:bold">],&lt;/span> &lt;span style="color:#000;font-weight:bold">[&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">62&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">15&lt;/span>&lt;span style="color:#000;font-weight:bold">])&lt;/span>
&lt;span style="color:#000">nemo_nwes_w&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000">nemo_w&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">isel&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">y_dim&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#000">ind_2d&lt;/span>&lt;span style="color:#000;font-weight:bold">[&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">0&lt;/span>&lt;span style="color:#000;font-weight:bold">],&lt;/span> &lt;span style="color:#000">x_dim&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#000">ind_2d&lt;/span>&lt;span style="color:#000;font-weight:bold">[&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">1&lt;/span>&lt;span style="color:#000;font-weight:bold">])&lt;/span> &lt;span style="color:#8f5902;font-style:italic">#nwes = northwest european shelf&lt;/span>
&lt;span style="color:#000">nemo_nwes_t&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">dataset&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="diagnostic-calculations-and-plotting">Diagnostic calculations and plotting&lt;/h2>
&lt;p>We can use a COAsT method to construct the in-situ density:&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">&lt;span style="color:#000">nemo_nwes_t&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">construct_density&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span> &lt;span style="color:#000">eos&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#4e9a06">&amp;#39;EOS10&amp;#39;&lt;/span> &lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Then we construct stratification using a COAsT method to take the vertical derivative. Noting that the inputs are on t-pts and the outputs are on w-pt&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">&lt;span style="color:#000">nemo_nwes_w&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000">nemo_nwes_t&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">differentiate&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span> &lt;span style="color:#4e9a06">&amp;#39;density&amp;#39;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">dim&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#4e9a06">&amp;#39;z_dim&amp;#39;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">out_var_str&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#4e9a06">&amp;#39;rho_dz&amp;#39;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">out_obj&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#000">nemo_nwes_w&lt;/span> &lt;span style="color:#000;font-weight:bold">)&lt;/span> &lt;span style="color:#8f5902;font-style:italic"># --&amp;gt; sci_nwes_w.rho_dz&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>This has created a variable called &lt;code>nemo_nwes_w.rho_dz&lt;/code>.&lt;/p>
&lt;p>We can now use the &lt;code>InternalTide&lt;/code> class to construct the first and second moments (over depth) of density. In the limit of an idealised two-layer fluid these converge to the depth and thickness of the interface. I.e. the pycnocline depth and thickness respectively.&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">&lt;span style="color:#8f5902;font-style:italic">#%% Create internal tide diagnostics object&lt;/span>
&lt;span style="color:#000">IT&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000">coast&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">InternalTide&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">nemo_nwes_t&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">nemo_nwes_w&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;span style="color:#8f5902;font-style:italic">#%% Construct pycnocline variables: depth and thickness&lt;/span>
&lt;span style="color:#000">IT&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">construct_pycnocline_vars&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span> &lt;span style="color:#000">nemo_nwes_t&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">nemo_nwes_w&lt;/span> &lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Finally we plot pycnocline variables (depth and thickness) using an InternalTide method:&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">&lt;span style="color:#000">IT&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">quick_plot&lt;/span>&lt;span style="color:#000;font-weight:bold">()&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>
&lt;div class="card rounded p-2 td-post-card mb-4 mt-4" style="max-width: 610px">
&lt;img class="card-img-top" src="https://british-oceanographic-data-centre.github.io/COAsT/COAsT/docs/examples/stratification/strat_1st_mom_hu2ed8891258e49ea755dd6f023fe99f6f_75991_600x700_fit_catmullrom_2.png" width="600" height="600">
&lt;div class="card-body px-0 pt-2 pb-0">
&lt;p class="card-text">
&lt;/p>
&lt;/div>
&lt;/div></description></item><item><title>Docs: Export to netCDF</title><link>https://british-oceanographic-data-centre.github.io/COAsT/docs/examples/export_netcdf/</link><pubDate>Tue, 05 Oct 2021 00:00:00 +0000</pubDate><guid>https://british-oceanographic-data-centre.github.io/COAsT/docs/examples/export_netcdf/</guid><description>
&lt;p>This is a demonstration for how to export intermediate data from COAsT
to netCDF files for later analysis or storage.
The tutorial showcases the &lt;code>xarray.to_netcdf()&lt;/code> method.
&lt;a href="http://xarray.pydata.org/en/stable/generated/xarray.Dataset.to_netcdf.html">http://xarray.pydata.org/en/stable/generated/xarray.Dataset.to_netcdf.html&lt;/a>&lt;/p>
&lt;h2 id="load-in-example-data">Load in example data&lt;/h2>
&lt;p>Begin by importing coast and other packages&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">&lt;span style="color:#204a87;font-weight:bold">import&lt;/span> &lt;span style="color:#000">coast&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>and by defining some file paths&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">&lt;span style="color:#000">fn_nemo_dat&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;./example_files/coast_example_nemo_data.nc&amp;#34;&lt;/span>
&lt;span style="color:#000">fn_nemo_dom&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;./example_files/coast_example_nemo_domain.nc&amp;#34;&lt;/span>
&lt;span style="color:#000">config&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;./config/example_nemo_grid_t.json&amp;#34;&lt;/span>
&lt;span style="color:#000">ofile&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;example_export_output.nc&amp;#34;&lt;/span> &lt;span style="color:#8f5902;font-style:italic"># The target filename for output&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>We need to load in a Gridded object to get started.&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">&lt;span style="color:#000">nemo&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000">coast&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">Gridded&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">fn_nemo_dat&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">fn_nemo_dom&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">config&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#000">config&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="export-to-netcdf">Export to netCDF&lt;/h2>
&lt;p>We can export the &lt;strong>whole&lt;/strong> &lt;code>xr.DataSet&lt;/code> to a netCDF file&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">&lt;span style="color:#000">nemo&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">dataset&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">to_netcdf&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">ofile&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">mode&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;w&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">format&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;NETCDF4&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Other file formats are available. From the documentation:&lt;/p>
&lt;pre>&lt;code class="language-quote" data-lang="quote">format:
NETCDF4: Data is stored in an HDF5 file, using netCDF4 API features.
NETCDF4_CLASSIC: Data is stored in an HDF5 file, using only netCDF 3 compatible API features.
NETCDF3_64BIT: 64-bit offset version of the netCDF 3 file format, which fully supports 2+ GB files, but is only compatible with clients linked against netCDF version 3.6.0 or later.
NETCDF3_CLASSIC: The classic netCDF 3 file format. It does not handle 2+ GB files very well.
&lt;/code>&lt;/pre>&lt;p>Similarly other &lt;em>modes&lt;/em> are available; &amp;lsquo;w&amp;rsquo; (write) is the default.
From the documentation:&lt;/p>
&lt;pre>&lt;code class="language-quote" data-lang="quote">mode ({&amp;quot;w&amp;quot;, &amp;quot;a&amp;quot;}, default: &amp;quot;w&amp;quot;) â€“ Write (â€˜wâ€™) or append (â€˜aâ€™) mode.
If mode=â€™wâ€™, any existing file at this location will be overwritten.
If mode=â€™aâ€™, existing variables will be overwritten.
&lt;/code>&lt;/pre>&lt;p>Alternatively a &lt;strong>single variable&lt;/strong> (an &lt;code>xr.DataArray&lt;/code> object) can be exported&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">&lt;span style="color:#000">nemo&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">dataset&lt;/span>&lt;span style="color:#000;font-weight:bold">[&lt;/span>&lt;span style="color:#4e9a06">&amp;#39;temperature&amp;#39;&lt;/span>&lt;span style="color:#000;font-weight:bold">]&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">to_netcdf&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">ofile&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">format&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;NETCDF4&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Similarly &lt;code>xr.DataSet&lt;/code>s collections of variables or &lt;code>xr.DataArray&lt;/code> variables can be
exported to netCDF for objects in the &lt;code>TRANSECT&lt;/code>, &lt;code>TIDEGAUGE&lt;/code>, etc classes.&lt;/p>
&lt;h2 id="check-the-exported-file">Check the exported file&lt;/h2>
&lt;p>Check the exported file is as you expect.
Perhaps using &lt;code>ncdump -h example_export_output.nc&lt;/code>
Or load file as see that the xarray structure is preserved.&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">&lt;span style="color:#204a87;font-weight:bold">import&lt;/span> &lt;span style="color:#000">xarray&lt;/span> &lt;span style="color:#204a87;font-weight:bold">as&lt;/span> &lt;span style="color:#000">xr&lt;/span>
&lt;span style="color:#204a87">object&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000">xr&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">open_dataset&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">ofile&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;span style="color:#204a87">object&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">close&lt;/span>&lt;span style="color:#000;font-weight:bold">()&lt;/span> &lt;span style="color:#8f5902;font-style:italic"># close file associated with this object&lt;/span>
&lt;/code>&lt;/pre>&lt;/div></description></item><item><title>Docs: Unit testing</title><link>https://british-oceanographic-data-centre.github.io/COAsT/docs/examples/unit_testing/</link><pubDate>Tue, 05 Oct 2021 00:00:00 +0000</pubDate><guid>https://british-oceanographic-data-centre.github.io/COAsT/docs/examples/unit_testing/</guid><description>
&lt;p>Unit testing is a key component of the COAsT contribution workflow. A &amp;ldquo;unit test&amp;rdquo; is a small, singular piece of code that tests an element of COAsT to ensure that it works as expected. This might include a small check that a method actually runs without error and returns an expected value or dataset. There is then a sequence of unit tests which should, in theory, test all parts of the COAsT codebase. When pushing a change to COAsT, we can use this system to ensure that any changes that have been made do not break the existing package. If a modification results in a unit test failing then we must not merge changes into the &lt;code>develop&lt;/code> or &lt;code>merge&lt;/code> branches.&lt;/p>
&lt;p>The COAsT unit testing system uses Python&amp;rsquo;s own &lt;code>unittest&lt;/code> library. On this page, the system is outlined, alongside guidance on how to use it.&lt;/p>
&lt;h2 id="the-unittest-library">The unittest library&lt;/h2>
&lt;p>Unittest is a library that comes with Python. You can find more information &lt;a href="https://docs.python.org/3/library/unittest.html">here&lt;/a>.&lt;/p>
&lt;p>We have used the TestSuite functionality of the library alongside the TestCase class. This works by creating a class that inherits from TestCase. Then, any method within this class acts as a unit test, so long as it begins with &lt;code>test_&lt;/code>. We can create a Test Suite (just a collection of the TestCase classes) and then run it. When we do this, the package will search for all methods beginning with &lt;code>test_&lt;/code> and run them.&lt;/p>
&lt;h2 id="system-overview">System Overview&lt;/h2>
&lt;p>There are several files that make up the unit testing system in COAsT:&lt;/p>
&lt;ol>
&lt;li>&lt;code>unit_testing/unit_test.py&lt;/code>. This is the main unit testing file that controls the import of test classes as well as the creation and execution of the Test Suite.&lt;/li>
&lt;li>&lt;code>unit_testing/unit_test_files.py&lt;/code>. This file simply contains paths which point towards example files, scripts and configs. These are small files that can be obtained here. Ideally, the example files should be in &lt;code>COAsT/example_files&lt;/code>, the scripts in &lt;code>COAsT/example_scripts&lt;/code> and the configs in &lt;code>COAsT/configs&lt;/code>. It is easy to obtain these files from within a test file. Simply &lt;code>import unit_test_files as files&lt;/code> at the top of a test file. A file can then be obtained anywhere by using &lt;code>files.file_name_variable&lt;/code>.&lt;/li>
&lt;li>&lt;code>unit_testing/test_*.py&lt;/code>. These are the files that contain the actual unit tests, inside the TestCase classes mentioned above. There is a well commented example/template file that comes with COAsT called &lt;code>test_TEMPLATE.py&lt;/code>. Please see this file for a better idea of what these files look like.&lt;/li>
&lt;/ol>
&lt;h2 id="running-the-unit-test">Running the unit test&lt;/h2>
&lt;p>You can run the unit testing system simply by running the &lt;code>unit_test.py&lt;/code> file. For example, within Spyder you could use &lt;code>run unit_testing/unit_test.py&lt;/code>. The script should be run from the main &lt;code>COAsT&lt;/code> directory to work correctly. Be careful if using Spyder&amp;rsquo;s play button that your working directory is also the highest level &lt;code>COAsT&lt;/code> directory. For the easiest time, your example files should be in &lt;code>COAsT/example_files&lt;/code>, however you can put them anywhere you wish. If the unit test cannot find the files, it will prompt you to enter the path in the terminal.&lt;/p>
&lt;p>If you are testing new additions to the system, you may not wish to run all tests. You can easily change which tests you are running by modifying the &lt;code>tests_to_run&lt;/code> list variable in &lt;code>unit_testing/unit_test.py&lt;/code>. Comment out the names of the test classes you do not wish to run (that&amp;rsquo;s all you have to do).&lt;/p>
&lt;p>As the test runs, it will return the names of the test methods it is currently running and a message telling you whether it was ok, ERROR or FAILURE. When all tests are complete, it will tell you how many ERRORs and FAILUREs occurred and how long the test took. A successful unit testing run will have 0 ERRORS and 0 FAILURES. If there are errors, it will return information on which unit tests failed as well as traceback on the error raised.&lt;/p>
&lt;h2 id="adding-your-own-unit-test">Adding your own unit test&lt;/h2>
&lt;p>When changing COAsT, you should add your own unit tests for the features you have added. You can do this either by adding a method to an existing test class in one of the &lt;code>test_*.py&lt;/code> files or by creating your own test class and adding unit tests to this. You should carefully consider whether your new features fit within the context of any of the existing test classes.&lt;/p>
&lt;p>If creating a new test class, your workflow may look something like this:&lt;/p>
&lt;ol>
&lt;li>
&lt;p>&lt;strong>Create new test_your_name.py file&lt;/strong>: You might want to start by copying test_TEMPLATE.py to a new filename of your choice. Delete the methods inside of it and rename to class from test_TEMPLATE to test_&amp;lt;&amp;gt;. The name of the class does not have to match the name of the file, but make sure you know the difference. Ensure this new file is saved in the &lt;code>COAsT/unit_testing&lt;/code> directory.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>Add unit tests to your file:&lt;/strong> You do this simply by creating new methods inside the class you created above. Each method that you want to act as a unit test must being with &amp;ldquo;test_&amp;quot;. You should name your test to appropriately reflect its function. If there are any problems with your unit test when running the system then the name of the failed method will be returned. Using a long descriptive name in this case is useful.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>Add new test file to unit_test.py:&lt;/strong> You need to let the main &lt;code>unit_test.py&lt;/code> script know about your new file and class. At the top of this file is a selection of import statement. Follow the other lines here by importing the names of your test class(es) from your file. For example, to import the &lt;code>test_TEMPLATE&lt;/code> class from &lt;code>test_TEMPLATE.py&lt;/code>, you can add the line &lt;code>from test_TEMPLATE.py import test_TEMPLATE&lt;/code>. Next, you must add this imported classes to the &lt;code>tests_to_do&lt;/code> list below. And that&amp;rsquo;s it!&lt;/p>
&lt;/li>
&lt;/ol>
&lt;h2 id="unit-testing-coverage">Unit testing coverage&lt;/h2>
&lt;p>Code coverage is a useful statistic that tells us how much of the package (and individual classes) are &amp;lsquo;covered&amp;rsquo; by the unit testing system. Coverage means what percentage of the code is &amp;lsquo;touched&amp;rsquo; by the unit testing system. This is not built in to the system used by COAsT, however it is easy to set up and use.&lt;/p>
&lt;p>The Coverage python tool can be used to do this. For more information see &lt;a href="https://coverage.readthedocs.io/en/6.3.2/install.html">here&lt;/a>. The tool can be easily installed using pip:&lt;/p>
&lt;p>&lt;code>pip install coverage&lt;/code>&lt;/p>
&lt;p>Then we use the tool from the command line/terminal. From the main COAsT directory, enter:&lt;/p>
&lt;pre>&lt;code>coverage run unit_testing/unit_test.py
&lt;/code>&lt;/pre>&lt;p>This will run the unit test as usual, but with the coverage tool in the background (takes a little longer than usual). The result is a new output file in the COAsT directory called .coverage. We can&amp;rsquo;t read this but can transform it into a readable report using:&lt;/p>
&lt;pre>&lt;code>coverage report
&lt;/code>&lt;/pre>&lt;p>Which outputs statistics to the screen for each file and the whole package. For example:&lt;/p>
&lt;pre>&lt;code class="language-Name" data-lang="Name">------------------------------------------------------------------
coast/__init__.py 28 0 100%
coast/altimetry.py 169 139 18%
coast/argos.py 24 14 42%
coast/climatology.py 85 67 21%
coast/coast.py 205 147 28%
coast/config_parser.py 51 9 82%
coast/config_structure.py 53 0 100%
coast/contour.py 485 443 9%
coast/crps_util.py 117 56 52%
coast/eof.py 83 76 8%
coast/general_utils.py 153 88 42%
coast/glider.py 16 8 50%
coast/gridded.py 377 267 29%
coast/index.py 49 25 49%
coast/internal_tide.py 81 72 11%
coast/lagrangian.py 3 0 100%
coast/logging_util.py 50 3 94%
coast/mask_maker.py 66 46 30%
coast/oceanparcels.py 16 8 50%
coast/plot_util.py 129 94 27%
coast/profile.py 345 314 9%
coast/stats_util.py 67 43 36%
coast/tidegauge.py 453 113 75%
coast/tidegauge_analysis.py 189 15 92%
coast/timeseries.py 35 29 17%
coast/track.py 3 0 100%
coast/transect.py 420 385 8%
coast/xesmf_convert.py 32 21 34%
------------------------------------------------------------------
TOTAL 4851 3071 37%
&lt;/code>&lt;/pre>&lt;p>This table shows statistics for each file in the COAsT package. There are three key statistics returns: &lt;code>stmts&lt;/code>, &lt;code>Miss&lt;/code> and &lt;code>Cover&lt;/code>. &lt;code>stmts&lt;/code> tells us how many executable statements are reached, &lt;code>Miss&lt;/code> tells us how many were missed and &lt;code>Cover&lt;/code> tells us the percentage coverage.&lt;/p>
&lt;p>There are plenty of extra features, such as outputting to various file types and flags which control the coverage calculations. See the website for more information.&lt;/p></description></item><item><title>Docs: Configuration files</title><link>https://british-oceanographic-data-centre.github.io/COAsT/docs/examples/configuration_files/</link><pubDate>Tue, 07 Sep 2021 00:00:00 +0000</pubDate><guid>https://british-oceanographic-data-centre.github.io/COAsT/docs/examples/configuration_files/</guid><description>
&lt;p>Configuration file code can be found in
&lt;code>coast/config&lt;/code> within the &lt;a href="https://github.com/British-Oceanographic-Data-Centre/COAsT/tree/master/coast/config">COAsT&lt;/a> github repository.
This code is used internally within the package.&lt;/p>
&lt;h2 id="configuration-file-usage">Configuration file usage&lt;/h2>
&lt;p>Configuration files are passed into a COAsT class on the instantiation of a new object. For example the &lt;code>Gridded class&lt;/code> &lt;code>__init__&lt;/code> method takes an argument &lt;code>config&lt;/code>.
This argument must be a String or Path object representing a path to the configuration file.
E.g.&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">&lt;span style="color:#000">config_file&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;./config/example_nemo_grid_t.json&amp;#34;&lt;/span> &lt;span style="color:#8f5902;font-style:italic"># path to json config file&lt;/span>
&lt;span style="color:#000">fn_nemo_dat&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;coast_example_nemo_data.nc&amp;#34;&lt;/span>
&lt;span style="color:#000">fn_nemo_dom&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;coast_example_nemo_domain.nc&amp;#34;&lt;/span>
&lt;span style="color:#000">gridded_obj&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000">coast&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">Gridded&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">fn_data&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#000">fn_nemo_dat&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">fn_domain&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#000">fn_nemo_dom&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">config&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#000">config_file&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>For convenience, as indicated above, the path to the configuration file could be alternatively expressed as a path object. E.g.:&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">&lt;span style="color:#204a87;font-weight:bold">from&lt;/span> &lt;span style="color:#000">pathlib&lt;/span> &lt;span style="color:#204a87;font-weight:bold">import&lt;/span> &lt;span style="color:#000">Path&lt;/span>
&lt;span style="color:#000">config_file&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000">Path&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;path/to/config_file.json&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="configuration-file-structure">Configuration file structure&lt;/h2>
&lt;p>Configuration files must follow a standard structure so that the &lt;code>ConfigParser&lt;/code> class can parse the file correctly.&lt;/p>
&lt;p>Depending on the type of configuration file, there are a number of required keys:&lt;/p>
&lt;h3 id="gridded-configuration">Gridded configuration&lt;/h3>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>Key&lt;/th>
&lt;th>Description&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>&lt;code>type&lt;/code>&lt;/td>
&lt;td>A string value representing the type of configuration file. In the case of gridded config this will always be &amp;ldquo;gridded&amp;rdquo;.&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>dimensionality&lt;/code>&lt;/td>
&lt;td>An integer value representing the number of dimensions within the data files.&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>grid_ref&lt;/code>&lt;/td>
&lt;td>A dictionary containing the type of grid, and a list of grid variables defining the mapping from the domain file to NEMO file.&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>chunks&lt;/code>&lt;/td>
&lt;td>A dictionary defining a dask &lt;a href="https://docs.dask.org/en/latest/array-chunks.html">chunk shape&lt;/a>, used when loading in data files. JSON doesn&amp;rsquo;t support integer keys, and so the dimensions name should be provided as the key instead. An empty dictionary will result in auto chunking. Rechunking can be applied subsequently with the standardised dimension names.&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>dataset&lt;/code>&lt;/td>
&lt;td>Parent key for holding configuration specific to the dataset files.&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>domain&lt;/code>&lt;/td>
&lt;td>Parent key for holding configuration specific to domain files. This is an &lt;strong>optional&lt;/strong> key depending on whether a domain file is required or not.&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>dimension_map&lt;/code>&lt;/td>
&lt;td>Child key of dataset/domain. A dictionary defining the mappings between input data dimension names and the framework&amp;rsquo;s standardised dimension names.&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>variable_map&lt;/code>&lt;/td>
&lt;td>Child key of dataset/domain. A dictionary defining the mappings between input data variable names and the framework&amp;rsquo;s standardised variable names.&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>keep_all_vars&lt;/code>&lt;/td>
&lt;td>Optional child key of dataset/domain. If &amp;ldquo;True&amp;rdquo;, all variables from the input datafile will be carried over to the Gridded dataset. If &amp;ldquo;False&amp;rdquo;, only mapped variables will be carried over. &amp;ldquo;False&amp;rdquo; is assumed if the key is not present.&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>coord_vars&lt;/code>&lt;/td>
&lt;td>Child key of dataset. A list of dataset coordinate variables to apply once dataset is loaded.&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>static_variables&lt;/code>&lt;/td>
&lt;td>Parent key for holding configuration used for merging domain variables into the main dataset.&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>not_grid_vars&lt;/code>&lt;/td>
&lt;td>Child key of static_variables. A list of grid independant variables to pull across from the domain file.&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>delete_vars&lt;/code>&lt;/td>
&lt;td>Child key of static_variables. A list of variables to drop following the merge of domain and dataset.&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>processing_flags&lt;/code>&lt;/td>
&lt;td>A list of strings referring to any preliminary processing methods to be carried out on the data.&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h3 id="indexed-configuration">Indexed configuration&lt;/h3>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>Key&lt;/th>
&lt;th>Description&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>&lt;code>type&lt;/code>&lt;/td>
&lt;td>A string value representing the type of configuration file. In the case of indexed config this will always be &amp;ldquo;indexed&amp;rdquo;.&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>dimensionality&lt;/code>&lt;/td>
&lt;td>An integer value representing the number of dimensions within the data files.&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>chunks&lt;/code>&lt;/td>
&lt;td>A dictionary defining a dask &lt;a href="https://docs.dask.org/en/latest/array-chunks.html">chunk shape&lt;/a>, used when loading in data files. JSON doesn&amp;rsquo;t support integer keys, and so the dimensions name should be provided as the key instead. An empty dictionary will result in auto chunking. Rechunking can be applied subsequently with the standardised dimension names.&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>dataset&lt;/code>&lt;/td>
&lt;td>Parent key for holding configuration specific to the dataset files.&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>dimension_map&lt;/code>&lt;/td>
&lt;td>Child key of dataset. A dictionary defining the mappings between input data dimension names and the framework&amp;rsquo;s standardised dimension names.&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>variable_map&lt;/code>&lt;/td>
&lt;td>Child key of dataset. A dictionary defining the mappings between input data variable names and the framework&amp;rsquo;s standardised variable names.&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>keep_all_vars&lt;/code>&lt;/td>
&lt;td>Optional child key of dataset/domain. If &amp;ldquo;True&amp;rdquo;, all variables from the input datafile will be carried over to the Indexed dataset. If &amp;ldquo;False&amp;rdquo;, only mapped variables will be carried over. &amp;ldquo;False&amp;rdquo; is assumed if the key is not present.&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>coord_vars&lt;/code>&lt;/td>
&lt;td>Child key of dataset. A list of dataset coordinate variables to apply once dataset is loaded.&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>processing_flags&lt;/code>&lt;/td>
&lt;td>A list of strings referring to any preliminary processing methods to be carried out on the data.&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h3 id="example-configuration-file">Example configuration file&lt;/h3>
&lt;p>Below is the template of a gridded configuration file:&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-json" data-lang="json">&lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">&amp;#34;type&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;gridded&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">&amp;#34;dimensionality&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">4&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">&amp;#34;chunks&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">&amp;#34;time_counter&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">2&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">&amp;#34;x&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">4&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">&amp;#34;y&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">4&lt;/span>
&lt;span style="color:#000;font-weight:bold">},&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">&amp;#34;grid_ref&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">&amp;#34;t-grid&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#000;font-weight:bold">[&lt;/span>
&lt;span style="color:#4e9a06">&amp;#34;glamt&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>
&lt;span style="color:#4e9a06">&amp;#34;gphit&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>
&lt;span style="color:#4e9a06">&amp;#34;e1t&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>
&lt;span style="color:#4e9a06">&amp;#34;e2t&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>
&lt;span style="color:#4e9a06">&amp;#34;e3t_0&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>
&lt;span style="color:#4e9a06">&amp;#34;deptht_0&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>
&lt;span style="color:#4e9a06">&amp;#34;tmask&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>
&lt;span style="color:#4e9a06">&amp;#34;bottom_level&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>
&lt;span style="color:#4e9a06">&amp;#34;hbatt&amp;#34;&lt;/span>
&lt;span style="color:#000;font-weight:bold">]&lt;/span>
&lt;span style="color:#000;font-weight:bold">},&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">&amp;#34;dataset&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">&amp;#34;dimension_map&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">&amp;#34;time_counter&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;t_dim&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">&amp;#34;deptht&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;z_dim&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">&amp;#34;y&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;y_dim&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">&amp;#34;x&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;x_dim&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">&amp;#34;x_grid_T&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;x_dim&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">&amp;#34;y_grid_T&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;y_dim&amp;#34;&lt;/span>
&lt;span style="color:#000;font-weight:bold">},&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">&amp;#34;variable_map&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">&amp;#34;time_counter&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;time&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">&amp;#34;votemper&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;temperature&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">&amp;#34;thetao&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;temperature&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">&amp;#34;temp&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;temperature&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">&amp;#34;toce&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;temperature&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">&amp;#34;so&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;salinity&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">&amp;#34;vosaline&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;salinity&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">&amp;#34;soce&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;salinity&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">&amp;#34;sossheig&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;ssh&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">&amp;#34;zos&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;ssh&amp;#34;&lt;/span>
&lt;span style="color:#000;font-weight:bold">},&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">&amp;#34;coord_vars&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#000;font-weight:bold">[&lt;/span>
&lt;span style="color:#4e9a06">&amp;#34;longitude&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>
&lt;span style="color:#4e9a06">&amp;#34;latitude&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>
&lt;span style="color:#4e9a06">&amp;#34;time&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>
&lt;span style="color:#4e9a06">&amp;#34;depth_0&amp;#34;&lt;/span>
&lt;span style="color:#000;font-weight:bold">]&lt;/span>
&lt;span style="color:#000;font-weight:bold">},&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">&amp;#34;domain&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">&amp;#34;dimension_map&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">&amp;#34;t&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;t_dim0&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">&amp;#34;x&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;x_dim&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">&amp;#34;y&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;y_dim&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">&amp;#34;z&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;z_dim&amp;#34;&lt;/span>
&lt;span style="color:#000;font-weight:bold">},&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">&amp;#34;variable_map&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">&amp;#34;time_counter&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;time0&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">&amp;#34;glamt&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;longitude&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">&amp;#34;gphit&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;latitude&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">&amp;#34;e1t&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;e1&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">&amp;#34;e2t&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;e2&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">&amp;#34;e3t_0&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;e3_0&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">&amp;#34;tmask&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;mask&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">&amp;#34;deptht_0&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;depth_0&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">&amp;#34;bottom_level&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;bottom_level&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">&amp;#34;hbatt&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;bathymetry&amp;#34;&lt;/span>
&lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;span style="color:#000;font-weight:bold">},&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">&amp;#34;static_variables&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">&amp;#34;not_grid_vars&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#000;font-weight:bold">[&lt;/span>
&lt;span style="color:#4e9a06">&amp;#34;jpiglo&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>
&lt;span style="color:#4e9a06">&amp;#34;jpjglo&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>
&lt;span style="color:#4e9a06">&amp;#34;jpkglo&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>
&lt;span style="color:#4e9a06">&amp;#34;jperio&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>
&lt;span style="color:#4e9a06">&amp;#34;ln_zco&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>
&lt;span style="color:#4e9a06">&amp;#34;ln_zps&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>
&lt;span style="color:#4e9a06">&amp;#34;ln_sco&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>
&lt;span style="color:#4e9a06">&amp;#34;ln_isfcav&amp;#34;&lt;/span>
&lt;span style="color:#000;font-weight:bold">],&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">&amp;#34;delete_vars&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#000;font-weight:bold">[&lt;/span>
&lt;span style="color:#4e9a06">&amp;#34;nav_lat&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>
&lt;span style="color:#4e9a06">&amp;#34;nav_lon&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>
&lt;span style="color:#4e9a06">&amp;#34;deptht&amp;#34;&lt;/span>
&lt;span style="color:#000;font-weight:bold">]&lt;/span>
&lt;span style="color:#000;font-weight:bold">},&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">&amp;#34;processing_flags&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#000;font-weight:bold">[&lt;/span>
&lt;span style="color:#4e9a06">&amp;#34;example_flag1&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>
&lt;span style="color:#4e9a06">&amp;#34;example_flag2&amp;#34;&lt;/span>
&lt;span style="color:#000;font-weight:bold">]&lt;/span>
&lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;strong>Example configuration&lt;/strong> files can be found in the &lt;code>config/&lt;/code> directory within the &lt;a href="https://github.com/British-Oceanographic-Data-Centre/COAsT/tree/master/config">COAsT&lt;/a> github repository.&lt;/p></description></item><item><title>Docs: Configuration Gallery</title><link>https://british-oceanographic-data-centre.github.io/COAsT/docs/examples/configs_gallery/</link><pubDate>Tue, 15 Sep 2020 00:00:00 +0000</pubDate><guid>https://british-oceanographic-data-centre.github.io/COAsT/docs/examples/configs_gallery/</guid><description>
&lt;h1 id="amm15---15km-resolution-atlantic-margin-model">AMM15 - 1.5km resolution Atlantic Margin Model&lt;/h1>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">&lt;span style="color:#4e9a06">&amp;#34;&amp;#34;&amp;#34;
&lt;/span>&lt;span style="color:#4e9a06">AMM15_example_plot.py
&lt;/span>&lt;span style="color:#4e9a06">
&lt;/span>&lt;span style="color:#4e9a06">Make simple AMM15 SST plot.
&lt;/span>&lt;span style="color:#4e9a06">
&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;&amp;#34;&amp;#34;&lt;/span>
&lt;span style="color:#8f5902;font-style:italic">#%%&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">import&lt;/span> &lt;span style="color:#000">coast&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">import&lt;/span> &lt;span style="color:#000">numpy&lt;/span> &lt;span style="color:#204a87;font-weight:bold">as&lt;/span> &lt;span style="color:#000">np&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">import&lt;/span> &lt;span style="color:#000">xarray&lt;/span> &lt;span style="color:#204a87;font-weight:bold">as&lt;/span> &lt;span style="color:#000">xr&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">import&lt;/span> &lt;span style="color:#000">matplotlib.pyplot&lt;/span> &lt;span style="color:#204a87;font-weight:bold">as&lt;/span> &lt;span style="color:#000">plt&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">import&lt;/span> &lt;span style="color:#000">matplotlib.colors&lt;/span> &lt;span style="color:#204a87;font-weight:bold">as&lt;/span> &lt;span style="color:#000">colors&lt;/span> &lt;span style="color:#8f5902;font-style:italic"># colormap fiddling&lt;/span>
&lt;span style="color:#8f5902;font-style:italic">#################################################&lt;/span>
&lt;span style="color:#8f5902;font-style:italic">#%% Loading data&lt;/span>
&lt;span style="color:#8f5902;font-style:italic">#################################################&lt;/span>
&lt;span style="color:#000">config&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#4e9a06">&amp;#39;AMM15&amp;#39;&lt;/span>
&lt;span style="color:#000">dir_nam&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;/projectsa/NEMO/gmaya/2013p2/&amp;#34;&lt;/span>
&lt;span style="color:#000">fil_nam&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;20130415_25hourm_grid_T.nc&amp;#34;&lt;/span>
&lt;span style="color:#000">dom_nam&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;/projectsa/NEMO/gmaya/AMM15_GRID/amm15.mesh_mask.cs3x.nc&amp;#34;&lt;/span>
&lt;span style="color:#000">config&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;/work/jelt/GitHub/COAsT/config/example_nemo_grid_t.json&amp;#34;&lt;/span>
&lt;span style="color:#000">sci_t&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000">coast&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">Gridded&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">dir_nam&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">+&lt;/span> &lt;span style="color:#000">fil_nam&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">dom_nam&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">config&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#000">config&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span> &lt;span style="color:#8f5902;font-style:italic"># , chunks=chunks)&lt;/span>
&lt;span style="color:#000">chunks&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;span style="color:#4e9a06">&amp;#34;x_dim&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">10&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>
&lt;span style="color:#4e9a06">&amp;#34;y_dim&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">10&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>
&lt;span style="color:#4e9a06">&amp;#34;t_dim&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">10&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>
&lt;span style="color:#000;font-weight:bold">}&lt;/span> &lt;span style="color:#8f5902;font-style:italic"># Chunks are prescribed in the config json file, but can be adjusted while the data is lazy loaded.&lt;/span>
&lt;span style="color:#000">sci_t&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">dataset&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">chunk&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">chunks&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;span style="color:#8f5902;font-style:italic"># create an empty w-grid object, to store stratification&lt;/span>
&lt;span style="color:#000">sci_w&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000">coast&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">Gridded&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">fn_domain&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#000">dom_nam&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">config&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#000">config&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">replace&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;t_nemo&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;w_nemo&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">))&lt;/span>
&lt;span style="color:#000">sci_w&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">dataset&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">chunk&lt;/span>&lt;span style="color:#000;font-weight:bold">({&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;x_dim&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">10&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;y_dim&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">10&lt;/span>&lt;span style="color:#000;font-weight:bold">})&lt;/span> &lt;span style="color:#8f5902;font-style:italic"># Can reset after loading config json&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">print&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#4e9a06">&amp;#39;* Loaded &amp;#39;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>&lt;span style="color:#000">config&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#4e9a06">&amp;#39; data&amp;#39;&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;span style="color:#8f5902;font-style:italic">#################################################&lt;/span>
&lt;span style="color:#8f5902;font-style:italic">#%% subset of data and domain ##&lt;/span>
&lt;span style="color:#8f5902;font-style:italic">#################################################&lt;/span>
&lt;span style="color:#8f5902;font-style:italic"># Pick out a North Sea subdomain&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">print&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#4e9a06">&amp;#39;* Extract North Sea subdomain&amp;#39;&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;span style="color:#000">ind_sci&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000">sci_t&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">subset_indices&lt;/span>&lt;span style="color:#000;font-weight:bold">([&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">51&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">-&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">4&lt;/span>&lt;span style="color:#000;font-weight:bold">],&lt;/span> &lt;span style="color:#000;font-weight:bold">[&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">62&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">15&lt;/span>&lt;span style="color:#000;font-weight:bold">])&lt;/span>
&lt;span style="color:#000">sci_nwes_t&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000">sci_t&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">isel&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">y_dim&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#000">ind_sci&lt;/span>&lt;span style="color:#000;font-weight:bold">[&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">0&lt;/span>&lt;span style="color:#000;font-weight:bold">],&lt;/span> &lt;span style="color:#000">x_dim&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#000">ind_sci&lt;/span>&lt;span style="color:#000;font-weight:bold">[&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">1&lt;/span>&lt;span style="color:#000;font-weight:bold">])&lt;/span> &lt;span style="color:#8f5902;font-style:italic">#nwes = northwest europe shelf&lt;/span>
&lt;span style="color:#000">ind_sci&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000">sci_w&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">subset_indices&lt;/span>&lt;span style="color:#000;font-weight:bold">([&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">51&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">-&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">4&lt;/span>&lt;span style="color:#000;font-weight:bold">],&lt;/span> &lt;span style="color:#000;font-weight:bold">[&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">62&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">15&lt;/span>&lt;span style="color:#000;font-weight:bold">])&lt;/span>
&lt;span style="color:#000">sci_nwes_w&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000">sci_w&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">isel&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">y_dim&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#000">ind_sci&lt;/span>&lt;span style="color:#000;font-weight:bold">[&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">0&lt;/span>&lt;span style="color:#000;font-weight:bold">],&lt;/span> &lt;span style="color:#000">x_dim&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#000">ind_sci&lt;/span>&lt;span style="color:#000;font-weight:bold">[&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">1&lt;/span>&lt;span style="color:#000;font-weight:bold">])&lt;/span> &lt;span style="color:#8f5902;font-style:italic">#nwes = northwest europe shelf&lt;/span>
&lt;span style="color:#8f5902;font-style:italic">#%% Apply masks to temperature and salinity&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">if&lt;/span> &lt;span style="color:#000">config&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">==&lt;/span> &lt;span style="color:#4e9a06">&amp;#39;AMM15&amp;#39;&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>
&lt;span style="color:#000">sci_nwes_t&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">dataset&lt;/span>&lt;span style="color:#000;font-weight:bold">[&lt;/span>&lt;span style="color:#4e9a06">&amp;#39;temperature_m&amp;#39;&lt;/span>&lt;span style="color:#000;font-weight:bold">]&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000">sci_nwes_t&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">dataset&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">temperature&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">where&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span> &lt;span style="color:#000">sci_nwes_t&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">dataset&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">mask&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">expand_dims&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">dim&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#000">sci_nwes_t&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">dataset&lt;/span>&lt;span style="color:#000;font-weight:bold">[&lt;/span>&lt;span style="color:#4e9a06">&amp;#39;t_dim&amp;#39;&lt;/span>&lt;span style="color:#000;font-weight:bold">]&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">sizes&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">&amp;gt;&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">0&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;span style="color:#000">sci_nwes_t&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">dataset&lt;/span>&lt;span style="color:#000;font-weight:bold">[&lt;/span>&lt;span style="color:#4e9a06">&amp;#39;salinity_m&amp;#39;&lt;/span>&lt;span style="color:#000;font-weight:bold">]&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000">sci_nwes_t&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">dataset&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">salinity&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">where&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span> &lt;span style="color:#000">sci_nwes_t&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">dataset&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">mask&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">expand_dims&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">dim&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#000">sci_nwes_t&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">dataset&lt;/span>&lt;span style="color:#000;font-weight:bold">[&lt;/span>&lt;span style="color:#4e9a06">&amp;#39;t_dim&amp;#39;&lt;/span>&lt;span style="color:#000;font-weight:bold">]&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">sizes&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">&amp;gt;&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">0&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">else&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>
&lt;span style="color:#8f5902;font-style:italic"># Apply fake masks to temperature and salinity&lt;/span>
&lt;span style="color:#000">sci_nwes_t&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">dataset&lt;/span>&lt;span style="color:#000;font-weight:bold">[&lt;/span>&lt;span style="color:#4e9a06">&amp;#39;temperature_m&amp;#39;&lt;/span>&lt;span style="color:#000;font-weight:bold">]&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000">sci_nwes_t&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">dataset&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">temperature&lt;/span>
&lt;span style="color:#000">sci_nwes_t&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">dataset&lt;/span>&lt;span style="color:#000;font-weight:bold">[&lt;/span>&lt;span style="color:#4e9a06">&amp;#39;salinity_m&amp;#39;&lt;/span>&lt;span style="color:#000;font-weight:bold">]&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000">sci_nwes_t&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">dataset&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">salinity&lt;/span>
&lt;span style="color:#8f5902;font-style:italic">#%% Plots&lt;/span>
&lt;span style="color:#000">fig&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000">plt&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">figure&lt;/span>&lt;span style="color:#000;font-weight:bold">()&lt;/span>
&lt;span style="color:#000">plt&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">pcolormesh&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span> &lt;span style="color:#000">sci_t&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">dataset&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">longitude&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">sci_t&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">dataset&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">latitude&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">sci_t&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">dataset&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">temperature&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">isel&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">z_dim&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">0&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">squeeze&lt;/span>&lt;span style="color:#000;font-weight:bold">())&lt;/span>
&lt;span style="color:#8f5902;font-style:italic">#plt.xlabel(&amp;#39;longitude&amp;#39;)&lt;/span>
&lt;span style="color:#8f5902;font-style:italic">#plt.ylabel(&amp;#39;latitude&amp;#39;)&lt;/span>
&lt;span style="color:#8f5902;font-style:italic">#plt.colorbar()&lt;/span>
&lt;span style="color:#000">plt&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">axis&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#4e9a06">&amp;#39;off&amp;#39;&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;span style="color:#000">plt&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">show&lt;/span>&lt;span style="color:#000;font-weight:bold">()&lt;/span>
&lt;span style="color:#000">fig&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">savefig&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#4e9a06">&amp;#39;AMM15_SST_nocolorbar.png&amp;#39;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">dpi&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">120&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>
&lt;div class="card rounded p-2 td-post-card mb-4 mt-4" style="max-width: 610px">
&lt;img class="card-img-top" src="https://british-oceanographic-data-centre.github.io/COAsT/COAsT/docs/examples/configs_gallery/AMM15_SST_nocolorbar_hu877f3826aecfbf10acb03ed24307d340_124451_600x700_fit_catmullrom_2.png" width="600" height="400">
&lt;div class="card-body px-0 pt-2 pb-0">
&lt;p class="card-text">
&lt;/p>
&lt;/div>
&lt;/div>
&lt;h1 id="india-subcontinent-maritime-domain-wcssp-india-configuration">India subcontinent maritime domain. WCSSP India configuration&lt;/h1>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">&lt;span style="color:#8f5902;font-style:italic">#%%&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">import&lt;/span> &lt;span style="color:#000">coast&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">import&lt;/span> &lt;span style="color:#000">numpy&lt;/span> &lt;span style="color:#204a87;font-weight:bold">as&lt;/span> &lt;span style="color:#000">np&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">import&lt;/span> &lt;span style="color:#000">xarray&lt;/span> &lt;span style="color:#204a87;font-weight:bold">as&lt;/span> &lt;span style="color:#000">xr&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">import&lt;/span> &lt;span style="color:#000">dask&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">import&lt;/span> &lt;span style="color:#000">matplotlib.pyplot&lt;/span> &lt;span style="color:#204a87;font-weight:bold">as&lt;/span> &lt;span style="color:#000">plt&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">import&lt;/span> &lt;span style="color:#000">matplotlib.colors&lt;/span> &lt;span style="color:#204a87;font-weight:bold">as&lt;/span> &lt;span style="color:#000">colors&lt;/span> &lt;span style="color:#8f5902;font-style:italic"># colormap fiddling&lt;/span>
&lt;span style="color:#8f5902;font-style:italic">#################################################&lt;/span>
&lt;span style="color:#8f5902;font-style:italic">#%% Loading data&lt;/span>
&lt;span style="color:#8f5902;font-style:italic">#################################################&lt;/span>
&lt;span style="color:#000">dir_nam&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;/projectsa/COAsT/NEMO_example_data/MO_INDIA/&amp;#34;&lt;/span>
&lt;span style="color:#000">fil_nam&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;ind_1d_cat_20180101_20180105_25hourm_grid_T.nc&amp;#34;&lt;/span>
&lt;span style="color:#000">dom_nam&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;domain_cfg_wcssp.nc&amp;#34;&lt;/span>
&lt;span style="color:#000">config_t&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;/work/jelt/GitHub/COAsT/config/example_nemo_grid_t.json&amp;#34;&lt;/span>
&lt;span style="color:#000">sci_t&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000">coast&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">Gridded&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">dir_nam&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">+&lt;/span> &lt;span style="color:#000">fil_nam&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">dir_nam&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">+&lt;/span> &lt;span style="color:#000">dom_nam&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">config&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#000">config_t&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;span style="color:#8f5902;font-style:italic">#%% Plot&lt;/span>
&lt;span style="color:#000">fig&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000">plt&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">figure&lt;/span>&lt;span style="color:#000;font-weight:bold">()&lt;/span>
&lt;span style="color:#000">plt&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">pcolormesh&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span> &lt;span style="color:#000">sci_t&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">dataset&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">longitude&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">sci_t&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">dataset&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">latitude&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">sci_t&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">dataset&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">temperature&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">isel&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">t_dim&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">0&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">isel&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">z_dim&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">0&lt;/span>&lt;span style="color:#000;font-weight:bold">))&lt;/span>
&lt;span style="color:#000">plt&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">xlabel&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#4e9a06">&amp;#39;longitude&amp;#39;&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;span style="color:#000">plt&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">ylabel&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#4e9a06">&amp;#39;latitude&amp;#39;&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;span style="color:#000">plt&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">title&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#4e9a06">&amp;#39;WCSSP India SST&amp;#39;&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;span style="color:#000">plt&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">colorbar&lt;/span>&lt;span style="color:#000;font-weight:bold">()&lt;/span>
&lt;span style="color:#000">plt&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">show&lt;/span>&lt;span style="color:#000;font-weight:bold">()&lt;/span>
&lt;span style="color:#000">fig&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">savefig&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#4e9a06">&amp;#39;WCSSP_India_SST.png&amp;#39;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">dpi&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">120&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>
&lt;div class="card rounded p-2 td-post-card mb-4 mt-4" style="max-width: 610px">
&lt;img class="card-img-top" src="https://british-oceanographic-data-centre.github.io/COAsT/COAsT/docs/examples/configs_gallery/WCSSP_India_SST_hu26324214e01da4db3cfe888337350570_138094_600x700_fit_catmullrom_2.png" width="600" height="450">
&lt;div class="card-body px-0 pt-2 pb-0">
&lt;p class="card-text">
&lt;/p>
&lt;/div>
&lt;/div>
&lt;h1 id="south-east-asia-112-deg-configuration-accord-seasia_r12">South East Asia, 1/12 deg configuration (ACCORD: SEAsia_R12)&lt;/h1>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">&lt;span style="color:#8f5902;font-style:italic">#%%&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">import&lt;/span> &lt;span style="color:#000">coast&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">import&lt;/span> &lt;span style="color:#000">numpy&lt;/span> &lt;span style="color:#204a87;font-weight:bold">as&lt;/span> &lt;span style="color:#000">np&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">import&lt;/span> &lt;span style="color:#000">xarray&lt;/span> &lt;span style="color:#204a87;font-weight:bold">as&lt;/span> &lt;span style="color:#000">xr&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">import&lt;/span> &lt;span style="color:#000">dask&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">import&lt;/span> &lt;span style="color:#000">matplotlib.pyplot&lt;/span> &lt;span style="color:#204a87;font-weight:bold">as&lt;/span> &lt;span style="color:#000">plt&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">import&lt;/span> &lt;span style="color:#000">matplotlib.colors&lt;/span> &lt;span style="color:#204a87;font-weight:bold">as&lt;/span> &lt;span style="color:#000">colors&lt;/span> &lt;span style="color:#8f5902;font-style:italic"># colormap fiddling&lt;/span>
&lt;span style="color:#8f5902;font-style:italic">#################################################&lt;/span>
&lt;span style="color:#8f5902;font-style:italic">#%% Loading data&lt;/span>
&lt;span style="color:#8f5902;font-style:italic">#################################################&lt;/span>
&lt;span style="color:#000">dir_nam&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;/projectsa/COAsT/NEMO_example_data/SEAsia_R12/&amp;#34;&lt;/span>
&lt;span style="color:#000">fil_nam&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;SEAsia_R12_5d_20120101_20121231_gridT.nc&amp;#34;&lt;/span>
&lt;span style="color:#000">dom_nam&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;domain_cfg_ORCA12_adj.nc&amp;#34;&lt;/span>
&lt;span style="color:#000">config_t&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;/work/jelt/GitHub/COAsT/config/example_nemo_grid_t.json&amp;#34;&lt;/span>
&lt;span style="color:#000">sci_t&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000">coast&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">Gridded&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">dir_nam&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">+&lt;/span> &lt;span style="color:#000">fil_nam&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">dir_nam&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">+&lt;/span> &lt;span style="color:#000">dom_nam&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">config&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#000">config_t&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;span style="color:#8f5902;font-style:italic">#%% Plot&lt;/span>
&lt;span style="color:#000">fig&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000">plt&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">figure&lt;/span>&lt;span style="color:#000;font-weight:bold">()&lt;/span>
&lt;span style="color:#000">plt&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">pcolormesh&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span> &lt;span style="color:#000">sci_t&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">dataset&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">longitude&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">sci_t&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">dataset&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">latitude&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">sci_t&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">dataset&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">soce&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">isel&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">t_dim&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">0&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">isel&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">z_dim&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">0&lt;/span>&lt;span style="color:#000;font-weight:bold">))&lt;/span>
&lt;span style="color:#000">plt&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">xlabel&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#4e9a06">&amp;#39;longitude&amp;#39;&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;span style="color:#000">plt&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">ylabel&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#4e9a06">&amp;#39;latitude&amp;#39;&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;span style="color:#000">plt&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">title&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#4e9a06">&amp;#39;SE Asia, surface salinity (psu)&amp;#39;&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;span style="color:#000">plt&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">colorbar&lt;/span>&lt;span style="color:#000;font-weight:bold">()&lt;/span>
&lt;span style="color:#000">plt&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">show&lt;/span>&lt;span style="color:#000;font-weight:bold">()&lt;/span>
&lt;span style="color:#000">fig&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">savefig&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#4e9a06">&amp;#39;SEAsia_R12_SSS.png&amp;#39;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">dpi&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">120&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>
&lt;div class="card rounded p-2 td-post-card mb-4 mt-4" style="max-width: 610px">
&lt;img class="card-img-top" src="https://british-oceanographic-data-centre.github.io/COAsT/COAsT/docs/examples/configs_gallery/SEAsia_R12_SSS_hu5159f12f7e0dba7fb4d65a79ff209969_95940_600x700_fit_catmullrom_2.png" width="600" height="450">
&lt;div class="card-body px-0 pt-2 pb-0">
&lt;p class="card-text">
&lt;/p>
&lt;/div>
&lt;/div></description></item><item><title>Docs: Parameter Reference</title><link>https://british-oceanographic-data-centre.github.io/COAsT/docs/reference/parameter-reference/</link><pubDate>Thu, 05 Jan 2017 00:00:00 +0000</pubDate><guid>https://british-oceanographic-data-centre.github.io/COAsT/docs/reference/parameter-reference/</guid><description/></item></channel></rss>