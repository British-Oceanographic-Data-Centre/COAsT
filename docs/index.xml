<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>COAsT â€“ Documentation</title><link>https://british-oceanographic-data-centre.github.io/COAsT/docs/</link><description>Recent content in Documentation on COAsT</description><generator>Hugo -- gohugo.io</generator><atom:link href="https://british-oceanographic-data-centre.github.io/COAsT/docs/index.xml" rel="self" type="application/rss+xml"/><item><title>Docs: Python: Style</title><link>https://british-oceanographic-data-centre.github.io/COAsT/docs/contributing_package/python_style/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://british-oceanographic-data-centre.github.io/COAsT/docs/contributing_package/python_style/</guid><description>
&lt;p>Python as a language comes with more stringent recommendations than most when it comes to code styling. This is advantageous in our case as it gives us an obvious set of guidelines to adopt.&lt;/p>
&lt;p>When it comes to simple code styling, much of what&amp;rsquo;s recommended here will be copied from &lt;a href="https://www.python.org/dev/peps/pep-0008/">Python Enhancement Proposal (PEP) 8&lt;/a>, an officially proposed and accepted Python style guide.&lt;/p>
&lt;h1 id="code-styling-conventions">Code Styling Conventions&lt;/h1>
&lt;p>Let&amp;rsquo;s keep things simple to start with&amp;hellip;&lt;/p>
&lt;ul>
&lt;li>
&lt;p>Indentation should be achieved with spaces rather than tabs and each new level of indentation should be indented by four columns (i.e four spaces).&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Any single line, including its indentation characters, should not exceed 79 characters in length.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Top-level (i.e at the module/file level rather than inside a function or class) function and class definitions should be separated by two blank lines.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Method (functions within a class) definitions are separated by a single blank line.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Usually, &amp;ldquo;import&amp;rdquo; statements should be on separate lines, that is to say that you should have one line per distinct module or package import. An exception to this rule is when multiple objects are imported from a single module or package, using a &amp;ldquo;from&amp;rdquo; statement, in which case individual objects can be imported on the same line, separated by commas.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>PEP 8 does not make a recommendation relating to the use of double or single quotes in general use, but for the sake of consistency, this document suggests the use of double quotes wherever practical. This recommendation is intended for the sake of consistency with triple-quoted strings, as per Docstring Conventions (PEP 257).&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Operators should be separated by single columns (i.e one space) either side, unless inside parentheses, in which case no whitespace is required.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Comments (beginning with the # character) should be indented as if they were code. In the case of inline comments, separate the comment with two spaces following the code it shares the line with.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>All functions should contain a docstring, which provides basic information on its usage. For this project, the &lt;a href="https://www.python.org/dev/peps/pep-0287/">reStructuredText docstring format&lt;/a> is suggested.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>When it comes to naming variables and functions, snake case (lower_case_words_separated_by_underscores) is preferred. There are however a few exceptions to this rule:
Class names should be styled as camel case (EveryNewWordIsCapitalised).
Constants (Variables that should not be changed) can be indicated by the use of screaming snake case (UPPER_CASE_WORDS_SEPARATED_BY_UNDERSCORES). Note that this library currently targets Python 3.7, so the use of &lt;a href="https://www.python.org/dev/peps/pep-0591/">typing.Final&lt;/a> official support for constant variables, new as of Python 3.8: is not currently supported.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>In general, it is suggested to avoid the use of single-character variable names, but this is acceptable in certain cases, such as when defining coordinates (such as x, y and z), as these will be commonly recognized and enforcing different rules could cause confusion.
PEP 8 advises the following regarding names to avoid:
&amp;ldquo;Never use the characters &amp;lsquo;l&amp;rsquo; (lowercase letter el), &amp;lsquo;O&amp;rsquo; (uppercase letter oh), or &amp;lsquo;I&amp;rsquo; (uppercase letter eye) as single character variable names.&amp;rdquo;
These specific characters should be avoided because they present an accessibility issue, as under many fonts these characters may be difficult to distinguish or completely indistinguishable from numerals one (1) and zero (0).&lt;/p>
&lt;/li>
&lt;li>
&lt;p>In the interest of readability, where named iterator variables are required, this document suggests the use of double characters (e.g. &amp;ldquo;ii&amp;rdquo; rather than &amp;ldquo;i&amp;rdquo;).&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h1 id="object-oriented-programming">Object-Oriented Programming&lt;/h1>
&lt;p>The general principles of OOP are fairly straightforward and well documented, so I won&amp;rsquo;t waste your precious time by regurgitating that particular wall of text here. Instead, I&amp;rsquo;ll focus on some general pointers specific to this language and use case.&lt;/p>
&lt;ul>
&lt;li>
&lt;p>In Python, all class attributes are technically public, but semantically, attributes can be designated as non-public by including leading underscores in the name. For instance, &amp;ldquo;my_variable&amp;rdquo; becomes &amp;ldquo;_my_variable&amp;rdquo;. These attributes are generally referred to as &amp;ldquo;protected&amp;rdquo;.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>When you define a Python class, it is a best practice to inherit from the base object type. This convention stems from Python 2.X, as classes and types were not originally synonymous. This behaviour is implicit in Python 3.X but the convention has persisted nonetheless. Classes defined this way are referred to as &amp;ldquo;new-style&amp;rdquo; classes.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>When defining a class that inherits from another, it is important to remember that overridden methods (in particular, this behaviour is important when dealing with __init__ methods) do not implicitly call the parent method. What this means is that unless you want to deliberately prevent the behaviour of the parent class (this is a very niche use-case), it is important to include a reference to the parent method. An example of this is: super().__init__()
This functionality is advantageous as it prevents unnecessary duplication of code, which is a key tenet of object-oriented software.&lt;/p>
&lt;/li>
&lt;/ul></description></item><item><title>Docs: Python: Structure</title><link>https://british-oceanographic-data-centre.github.io/COAsT/docs/contributing_package/python_structure/</link><pubDate>Tue, 05 Oct 2021 00:00:00 +0000</pubDate><guid>https://british-oceanographic-data-centre.github.io/COAsT/docs/contributing_package/python_structure/</guid><description>
&lt;p>** Notes on Object Structure and Loading (for contributors):&lt;/p>
&lt;p>COAsT is an object-orientated package, meaning that data is stored within Python object
structures. In addition to data storage, these objects contain methods (subroutines)
which allow for manipulation of this data. An example of such an object is the Gridded
object, which allows for the storage and manipulation of e.g. NEMO output and domain data. It
is important to understand how to load data using COAsT and the structure of the resulting
objects.&lt;/p>
&lt;p>A Gridded object is created and initialised by passing it the paths of the domain and data
files. Ideally, the grid type should also be specified (T, U, V or F in the case of NEMO).
For example, to load in data from a file containing data on a NEMO T-grid:&lt;/p>
&lt;pre>&lt;code>import coast
fn_data = &amp;quot;&amp;lt;path to T-grid data file(s)&amp;gt;&amp;quot;
fn_domain = &amp;quot;&amp;lt;path to domain file&amp;gt;&amp;quot;
fn_config = &amp;quot;&amp;lt;path to json config file&amp;gt;&amp;quot;
data = coast.Gridded(fn_data, fn_domain, fn_config)
&lt;/code>&lt;/pre>&lt;p>Ideally, Gridded model output data should be in grid-specific files, i.e. containing output
variables situated on a NEMO T, U, V or F grid, whereas the grid variables are in a single domain file. On loading into COAsT,
only the grid specific variables appropriate for the paired data are placed into the Gridded object. A Gridded object
therefore contains grid-specific data and all corresponding grid variables. One of the
file names can be omitted (to get a data-only or grid only object), however functionality
in this case will be limited.&lt;/p>
&lt;p>Once loaded, data is stored inside the object using an xarray.dataset object. Following
on from the previous code example, this can be viewed by calling:&lt;/p>
&lt;pre>&lt;code>data.dataset
&lt;/code>&lt;/pre>&lt;p>This reveals all netcdf-type aspects of the data and domain variables that were loaded,
including dimensions, coordinates, variables and attributes. For example:&lt;/p>
&lt;pre>&lt;code>&amp;lt;xarray.Dataset&amp;gt;
Dimensions: (axis_nbounds: 2, t_dim: 7, x_dim: 297, y_dim: 375, z_dim: 51)
Coordinates:
time (t_dim) datetime64[ns] 2007-01-01T11:58:56 ... 2007-01-31T11:58:56
longitude (y_dim, x_dim) float32 ...
latitude (y_dim, x_dim) float32 ...
Dimensions without coordinates: axis_nbounds, t_dim, x_dim, y_dim, z_dim
Data variables:
deptht_bounds (z_dim, axis_nbounds) float32 ...
sossheig (t_dim, y_dim, x_dim) float32 ...
time_counter_bounds (t_dim, axis_nbounds) datetime64[ns] ...
time_instant (t_dim) datetime64[ns] ...
temperature (t_dim, z_dim, y_dim, x_dim) float32 ...
e1 (y_dim, x_dim) float32 ...
e2 (y_dim, x_dim) float32 ...
e3_0 (z_dim, y_dim, x_dim) float32 1.0 1.0 1.0 ... 1.0 1.0
&lt;/code>&lt;/pre>&lt;p>Variables may be obtained in a number of ways. For example, to get temperature data, the
following are all equivalent:&lt;/p>
&lt;pre>&lt;code>temp = data.dataset.temperature
temp = data.dataset['temperature']
temp = data['temperature']
&lt;/code>&lt;/pre>&lt;p>These commands will all return an xarray.dataarray object. Manipulation of this object
can be done using xarray commands, for example indexing using [] or xarray.isel. Be aware
that indexing will preserve lazy loading, however and direct access or modifying of the
data will not. For this reason, if you require a subset of the data, it is best to
index first.&lt;/p>
&lt;p>The names of common grid variables are standardised within the COAsT package using JSON configuration files. For example, the following lists COAsT internal variable followed by the typical NEMO variable names:&lt;/p>
&lt;ol>
&lt;li>longitude [glamt / glamu / glamv / glamf]&lt;/li>
&lt;li>latitude [gphit / gphiu / gphiv / gphif]&lt;/li>
&lt;li>time [time_counter]&lt;/li>
&lt;li>e1 [e1t / e1u / e1v / e1f] (dx variable)&lt;/li>
&lt;li>e2 [e1t / e1u / e1v / e1f] (dy variable)&lt;/li>
&lt;li>e3_0 [e3t_0 / e3u_0 / e3v_0 / e3f_0] (dz variable at time 0)&lt;/li>
&lt;/ol>
&lt;p>Longitude, latitude and time are also set as coordinates. You might notice that dimensions
are also standardised:&lt;/p>
&lt;ol>
&lt;li>x_dim The dimension for the x-axis (longitude)&lt;/li>
&lt;li>y_dim The dimension for the y-axis (latitude)&lt;/li>
&lt;li>t_dim The dimension for the time axis&lt;/li>
&lt;li>z_dim The dimension for the depth axis.&lt;/li>
&lt;/ol>
&lt;p>Wherever possible, the aim is to ensure that all of the above is consistent across the
whole COAsT toolbox. Therefore, you will also find the same names and dimensions in, for
example observation objects. Future objects, where applicable, will also follow these
conventions. If you (as a contributor) add new objects to the toolbox, following
the above template is strongly encouraged. This includes using xarray dataset/dataarray
objects where possible, adopting an object oriented approach and adhering to naming
conventions.&lt;/p></description></item><item><title>Docs: Github Actions Flowchart</title><link>https://british-oceanographic-data-centre.github.io/COAsT/docs/contributing-docs/github_actions_flowchart/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://british-oceanographic-data-centre.github.io/COAsT/docs/contributing-docs/github_actions_flowchart/</guid><description>
&lt;h1 id="github-actions-diagram">GitHub actions diagram&lt;/h1>
&lt;p>This is a collection of flowcharts for all the GitHub actions used across the COAsT and COAsT-site repos&lt;/p>
&lt;h2 id="coast">COAsT&lt;/h2>
&lt;h3 id="building-packages">building Packages&lt;/h3>
&lt;script src="https://cdn.jsdelivr.net/npm/mermaid/dist/mermaid.min.js">&lt;/script>
&lt;script>
let isDark = window.matchMedia('(prefers-color-scheme: dark)').matches;
let mermaidTheme = (isDark) ? 'dark' : 'default';
let mermaidConfig = {
theme: mermaidTheme,
logLevel: 'fatal',
securityLevel: 'strict',
startOnLoad: true,
arrowMarkerAbsolute: false,
er: {
diagramPadding: 20,
layoutDirection: 'TB',
minEntityWidth: 100,
minEntityHeight: 75,
entityPadding: 15,
stroke: 'gray',
fill: 'honeydew',
fontSize: 12,
useMaxWidth: true,
},
flowchart: {
diagramPadding: 8,
htmlLabels: true,
curve: 'basis',
},
sequence: {
diagramMarginX: 50,
diagramMarginY: 10,
actorMargin: 50,
width: 150,
height: 65,
boxMargin: 10,
boxTextMargin: 5,
noteMargin: 10,
messageMargin: 35,
messageAlign: 'center',
mirrorActors: true,
bottomMarginAdj: 1,
useMaxWidth: true,
rightAngles: false,
showSequenceNumbers: false,
},
gantt: {
titleTopMargin: 25,
barHeight: 20,
barGap: 4,
topPadding: 50,
leftPadding: 75,
gridLineStartPadding: 35,
fontSize: 11,
fontFamily: '"Open-Sans", "sans-serif"',
numberSectionStyles: 4,
axisFormat: '%Y-%m-%d',
topAxis: false,
},
};
mermaid.initialize(mermaidConfig);
&lt;/script>
&lt;div class="mermaid">
graph LR;
subgraph publish_package - runs on push to master
A1[Setup python]-- 3.8 -->B1;
B1[Install dependencies]-->C1;
C1[Setup Enviroment]-->D1;
D1[Build package]-->E1;
E1[Test Package Install]-->F1
F1[Publish to pypi]-->G1
G1[Generate Conda Metadata]-->H1
H1[Publish to Anaconda]
end;
subgraph build_package - runs on push to non-master
A[Setup python]-- 3.8 and 3.9 -->B;
B[Install dependencies]-->C;
C[Setup Enviroment]-->D;
D[Build package]-->E;
E[Test Package Install]-->F
F[Generate Conda Metadata]
end;
&lt;/div>
&lt;h3 id="verification-and-formatting">Verification and Formatting&lt;/h3>
&lt;script src="https://cdn.jsdelivr.net/npm/mermaid/dist/mermaid.min.js">&lt;/script>
&lt;script>
let isDark = window.matchMedia('(prefers-color-scheme: dark)').matches;
let mermaidTheme = (isDark) ? 'dark' : 'default';
let mermaidConfig = {
theme: mermaidTheme,
logLevel: 'fatal',
securityLevel: 'strict',
startOnLoad: true,
arrowMarkerAbsolute: false,
er: {
diagramPadding: 20,
layoutDirection: 'TB',
minEntityWidth: 100,
minEntityHeight: 75,
entityPadding: 15,
stroke: 'gray',
fill: 'honeydew',
fontSize: 12,
useMaxWidth: true,
},
flowchart: {
diagramPadding: 8,
htmlLabels: true,
curve: 'basis',
},
sequence: {
diagramMarginX: 50,
diagramMarginY: 10,
actorMargin: 50,
width: 150,
height: 65,
boxMargin: 10,
boxTextMargin: 5,
noteMargin: 10,
messageMargin: 35,
messageAlign: 'center',
mirrorActors: true,
bottomMarginAdj: 1,
useMaxWidth: true,
rightAngles: false,
showSequenceNumbers: false,
},
gantt: {
titleTopMargin: 25,
barHeight: 20,
barGap: 4,
topPadding: 50,
leftPadding: 75,
gridLineStartPadding: 35,
fontSize: 11,
fontFamily: '"Open-Sans", "sans-serif"',
numberSectionStyles: 4,
axisFormat: '%Y-%m-%d',
topAxis: false,
},
};
mermaid.initialize(mermaidConfig);
&lt;/script>
&lt;div class="mermaid">
graph LR
subgraph formatting - runs on pull requests
A[Setup python]-- 3.9 -->B;
B[Install black]-->C;
C[Check formatting]--> D;
D[Apply formatting]
end;
subgraph verifiy_package - runs for every push
A1[Setup python]-- 3.8 and 3.9 -->B1;
B1[Install dependencies]-->C1;
C1[Lint]-->D1;
D1[Test]
end;
click B1 "https://www.github.com" "tooltip"
&lt;/div>
&lt;h3 id="interactions-with-other-repos">interactions with other repos&lt;/h3>
&lt;script src="https://cdn.jsdelivr.net/npm/mermaid/dist/mermaid.min.js">&lt;/script>
&lt;script>
let isDark = window.matchMedia('(prefers-color-scheme: dark)').matches;
let mermaidTheme = (isDark) ? 'dark' : 'default';
let mermaidConfig = {
theme: mermaidTheme,
logLevel: 'fatal',
securityLevel: 'strict',
startOnLoad: true,
arrowMarkerAbsolute: false,
er: {
diagramPadding: 20,
layoutDirection: 'TB',
minEntityWidth: 100,
minEntityHeight: 75,
entityPadding: 15,
stroke: 'gray',
fill: 'honeydew',
fontSize: 12,
useMaxWidth: true,
},
flowchart: {
diagramPadding: 8,
htmlLabels: true,
curve: 'basis',
},
sequence: {
diagramMarginX: 50,
diagramMarginY: 10,
actorMargin: 50,
width: 150,
height: 65,
boxMargin: 10,
boxTextMargin: 5,
noteMargin: 10,
messageMargin: 35,
messageAlign: 'center',
mirrorActors: true,
bottomMarginAdj: 1,
useMaxWidth: true,
rightAngles: false,
showSequenceNumbers: false,
},
gantt: {
titleTopMargin: 25,
barHeight: 20,
barGap: 4,
topPadding: 50,
leftPadding: 75,
gridLineStartPadding: 35,
fontSize: 11,
fontFamily: '"Open-Sans", "sans-serif"',
numberSectionStyles: 4,
axisFormat: '%Y-%m-%d',
topAxis: false,
},
};
mermaid.initialize(mermaidConfig);
&lt;/script>
&lt;div class="mermaid">
flowchart LR
subgraph b1[push_notebooks - runs on push to develop]
direction LR
subgraph b2[COAsT site - markdown ]
direction TB
a[checkout docsy site] -->b
b[checkout coast] -->c
c[create environment] -->d
d[execute notebooks] -->e
e[covert notebooks to MD] -->f
f[move images to static dir] -->g
g[commit changes]
end
t[Repository Dispatch] -- event pushed --> b2
end
click a "https://github.com/British-Oceanographic-Data-Centre/COAsT-site" "Docsy site for COAsT repo"
&lt;/div>
&lt;script src="https://cdn.jsdelivr.net/npm/mermaid/dist/mermaid.min.js">&lt;/script>
&lt;script>
let isDark = window.matchMedia('(prefers-color-scheme: dark)').matches;
let mermaidTheme = (isDark) ? 'dark' : 'default';
let mermaidConfig = {
theme: mermaidTheme,
logLevel: 'fatal',
securityLevel: 'strict',
startOnLoad: true,
arrowMarkerAbsolute: false,
er: {
diagramPadding: 20,
layoutDirection: 'TB',
minEntityWidth: 100,
minEntityHeight: 75,
entityPadding: 15,
stroke: 'gray',
fill: 'honeydew',
fontSize: 12,
useMaxWidth: true,
},
flowchart: {
diagramPadding: 8,
htmlLabels: true,
curve: 'basis',
},
sequence: {
diagramMarginX: 50,
diagramMarginY: 10,
actorMargin: 50,
width: 150,
height: 65,
boxMargin: 10,
boxTextMargin: 5,
noteMargin: 10,
messageMargin: 35,
messageAlign: 'center',
mirrorActors: true,
bottomMarginAdj: 1,
useMaxWidth: true,
rightAngles: false,
showSequenceNumbers: false,
},
gantt: {
titleTopMargin: 25,
barHeight: 20,
barGap: 4,
topPadding: 50,
leftPadding: 75,
gridLineStartPadding: 35,
fontSize: 11,
fontFamily: '"Open-Sans", "sans-serif"',
numberSectionStyles: 4,
axisFormat: '%Y-%m-%d',
topAxis: false,
},
};
mermaid.initialize(mermaidConfig);
&lt;/script>
&lt;div class="mermaid">
flowchart LR
subgraph b3[push_docstrings - runs on push to master]
direction LR
subgraph b4[COAsT site - docstrings ]
direction TB
a1[checkout docsy site] -->b1
b1[checkout coast] -->c1
c1[add python] -->d1
d1[covert docstrings] -->e1
e1[commit changes]
end
r[Repository Dispatch] -- event pushed --> b4
end
click a1 "https://github.com/British-Oceanographic-Data-Centre/COAsT-site" "Docsy site for COAsT repo"
&lt;/div>
&lt;h3 id="generate-unit-test-contents-file">Generate unit test contents file&lt;/h3>
&lt;script src="https://cdn.jsdelivr.net/npm/mermaid/dist/mermaid.min.js">&lt;/script>
&lt;script>
let isDark = window.matchMedia('(prefers-color-scheme: dark)').matches;
let mermaidTheme = (isDark) ? 'dark' : 'default';
let mermaidConfig = {
theme: mermaidTheme,
logLevel: 'fatal',
securityLevel: 'strict',
startOnLoad: true,
arrowMarkerAbsolute: false,
er: {
diagramPadding: 20,
layoutDirection: 'TB',
minEntityWidth: 100,
minEntityHeight: 75,
entityPadding: 15,
stroke: 'gray',
fill: 'honeydew',
fontSize: 12,
useMaxWidth: true,
},
flowchart: {
diagramPadding: 8,
htmlLabels: true,
curve: 'basis',
},
sequence: {
diagramMarginX: 50,
diagramMarginY: 10,
actorMargin: 50,
width: 150,
height: 65,
boxMargin: 10,
boxTextMargin: 5,
noteMargin: 10,
messageMargin: 35,
messageAlign: 'center',
mirrorActors: true,
bottomMarginAdj: 1,
useMaxWidth: true,
rightAngles: false,
showSequenceNumbers: false,
},
gantt: {
titleTopMargin: 25,
barHeight: 20,
barGap: 4,
topPadding: 50,
leftPadding: 75,
gridLineStartPadding: 35,
fontSize: 11,
fontFamily: '"Open-Sans", "sans-serif"',
numberSectionStyles: 4,
axisFormat: '%Y-%m-%d',
topAxis: false,
},
};
mermaid.initialize(mermaidConfig);
&lt;/script>
&lt;div class="mermaid">
graph LR
subgraph generate-test-contents - runs on pull_request
A[checkout COAsT]-->B;
B[install package]-->C;
C[make example files dir]--> D;
D[run generate_unit_test_contents.py]-->E
E[commit changes]
end;
&lt;/div>
&lt;h2 id="coast-site">COAsT-site&lt;/h2>
&lt;p>These are the actions used on the COAsT-site repo.&lt;/p>
&lt;h3 id="convert-to-markdown">Convert to markdown&lt;/h3>
&lt;p>See &lt;a href="#interactions-with-other-repos">Interactions with other repos&lt;/a> for the related markdown and docstring workflows&lt;/p>
&lt;h3 id="build-site">Build site&lt;/h3>
&lt;script src="https://cdn.jsdelivr.net/npm/mermaid/dist/mermaid.min.js">&lt;/script>
&lt;script>
let isDark = window.matchMedia('(prefers-color-scheme: dark)').matches;
let mermaidTheme = (isDark) ? 'dark' : 'default';
let mermaidConfig = {
theme: mermaidTheme,
logLevel: 'fatal',
securityLevel: 'strict',
startOnLoad: true,
arrowMarkerAbsolute: false,
er: {
diagramPadding: 20,
layoutDirection: 'TB',
minEntityWidth: 100,
minEntityHeight: 75,
entityPadding: 15,
stroke: 'gray',
fill: 'honeydew',
fontSize: 12,
useMaxWidth: true,
},
flowchart: {
diagramPadding: 8,
htmlLabels: true,
curve: 'basis',
},
sequence: {
diagramMarginX: 50,
diagramMarginY: 10,
actorMargin: 50,
width: 150,
height: 65,
boxMargin: 10,
boxTextMargin: 5,
noteMargin: 10,
messageMargin: 35,
messageAlign: 'center',
mirrorActors: true,
bottomMarginAdj: 1,
useMaxWidth: true,
rightAngles: false,
showSequenceNumbers: false,
},
gantt: {
titleTopMargin: 25,
barHeight: 20,
barGap: 4,
topPadding: 50,
leftPadding: 75,
gridLineStartPadding: 35,
fontSize: 11,
fontFamily: '"Open-Sans", "sans-serif"',
numberSectionStyles: 4,
axisFormat: '%Y-%m-%d',
topAxis: false,
},
};
mermaid.initialize(mermaidConfig);
&lt;/script>
&lt;div class="mermaid">
graph LR
subgraph hugo - runs on push to master
A[checkout site]-->B;
B[Setup Hugo] -- v0.70.0 -->C;
C[Setup Nodejs]-- v12 --> D;
D[Build]-->E
E[Deploy]
end;
&lt;/div></description></item><item><title>Docs: Github Workflow</title><link>https://british-oceanographic-data-centre.github.io/COAsT/docs/contributing-docs/github_workflow/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://british-oceanographic-data-centre.github.io/COAsT/docs/contributing-docs/github_workflow/</guid><description>
&lt;p>For COAsT development we use a Github workflow to manage version control and collaboration. Git allows use to keep track of changes made to the COAsT code base, avoid breaking existing code and work as a group on a single package. Any contributor needs to use this workflow to add their code. Below is some guidance on using git with COAsT, including a typical workflow and cheat sheet.&lt;/p>
&lt;p>For more information on git, see:&lt;/p>
&lt;p>Github (&lt;a href="https://github.com/">https://github.com/&lt;/a>)&lt;/p>
&lt;p>The Github page for this package can be found:&lt;/p>
&lt;p>&lt;a href="https://github.com/british-oceanographic-data-centre/COAsT">here&lt;/a>&lt;/p>
&lt;h2 id="key-ideas">Key Ideas&lt;/h2>
&lt;ol>
&lt;li>
&lt;p>The COAsT repository has two core branches: &lt;code>master&lt;/code> and &lt;code>develop&lt;/code>. The &lt;code>master&lt;/code> branch contains the tested code that you install when using Anaconda. This is updated less frequently, and is the &amp;ldquo;user-facing&amp;rdquo; branch of code. Most contributors do not need to edit this branch. The &lt;code>develop&lt;/code> branch is the &amp;lsquo;pre-master&amp;rsquo; branch, where &lt;strong>working&lt;/strong> code is kept. This is the leading branch, with the most up-to-date code, although it is not necessarily user-facing. When writing code into your own branch (see below), it is &amp;lsquo;branched&amp;rsquo; from &lt;code>develop&lt;/code> and then eventually merged back into &lt;code>develop&lt;/code>. &lt;strong>You should never make changes directly to either &lt;code>master&lt;/code> or &lt;code>develop&lt;/code>&lt;/strong>.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>There is a &amp;lsquo;local&amp;rsquo; and &amp;lsquo;remote&amp;rsquo; copy of the COAsT repository. The local repository exists only on your machine. The remote repository is the one you see on the Github website and exists separately. The two versions of the repository can be synchronised at a single point using commands such as &lt;code>git pull&lt;/code> &lt;code>git push&lt;/code> and &lt;code>git fetch&lt;/code> (see below). After cloning (downloading) the repository, all modifications you make/add/commit will &lt;strong>only be local until you push them to the remote repository&lt;/strong>.&lt;/p>
&lt;/li>
&lt;/ol>
&lt;h2 id="typical-workflow">Typical Workflow&lt;/h2>
&lt;p>A typical workflow for editting COAsT in git might look like:&lt;/p>
&lt;ol>
&lt;li>
&lt;p>&lt;strong>Clone Repository:&lt;/strong> &lt;code>git clone git@github.com:British-Oceanographic-Data-Centre/COAsT.git&lt;/code>. This will create a new copy of COAsT on your local system which you can use to interact with git and view/edit the source code. This only needs to be done once.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>Checkout develop:&lt;/strong> &lt;code>git checkout develop&lt;/code>. Before creating a new branch for your code, you should checkout the develop branch. This will switch your &lt;strong>local&lt;/strong> repository to the develop branch. You can check what branch your current local repository is in by entering &lt;code>git branch&lt;/code> &amp;ndash; it should now say &lt;code>develop&lt;/code>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>Create/checkout your new branch:&lt;/strong> &lt;code>git checkout -b new_branch_name&lt;/code>. This will create and checkout your new branch &amp;ndash; right now it is an identical copy of &lt;code>develop&lt;/code>. However, any changes you commit to your local repository will be saved into your branch. Once you have created your branch, you can open it as before, using &lt;code>git checkout new_branch_name&lt;/code>.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>Make changes/additions to code:&lt;/strong> Make any changes you like to COAsT. At this point it is separate from the main branches and it is safe to do so. If in doubt, enter &lt;code>git branch&lt;/code> again to ensure you are within your own branch.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>Add changes to branch:&lt;/strong> &lt;code>git add modified_file&lt;/code>. Using this command will tell git that you have changed/added this file and you want to save it to the branch you are currently in. Upon entering this command, the file changes/additions &lt;em>are not saved&lt;/em> to the branch and won&amp;rsquo;t be until the next step. You can remove an added file by entering &lt;code>git reset modified_file&lt;/code> and can check which files have changed by typing &lt;code>git status&lt;/code>.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>Commit changes to branch:&lt;/strong> &lt;code>git commit -m &amp;quot;type a message in quotations&amp;quot;&lt;/code>. Entering this command will &amp;ldquo;save&amp;rdquo; the changes you added using &lt;code>git add &lt;/code> in the step above to the branch you are currently in. Once entered, git will identify what has changed since the previous commit. If this is the first commit in your new branch then since the version of &lt;code>develop&lt;/code> that you branch from. This will not change any other branch except the one you are in and you can/should do this often with an appropriate message. At this point, all changes are still only on your local machine and will not change the remote repository. It is also possible to undo a commit using &lt;code>git revert&lt;/code>, so nothing is unfixable.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>Continue modifying code:&lt;/strong> At this point, you may want to continue modifying the code, repeatedly adding changes and commiting them to your local repository, as above.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>Push your local repository to the remote:&lt;/strong> &lt;code>git push origin&lt;/code>. This will upload the changes you have made in the branch you are in (and only this branch) to the remote (website) repository. If this is the first time you have pushed this branch then an error may appear telling you to repush with the &lt;code>--set-upstream&lt;/code> flag enable. Simply copy and paste this command back into the terminal. This will &amp;ldquo;create&amp;rdquo; your branch in the remote repository. Once pushed, github will do some auto-checks to make sure the code works (which it may not, but that is fine). You can continue to modify the code at any point, and push multiple times. This is encouraged if sharing with other collaboraters.&lt;/p>
&lt;/li>
&lt;/ol>
&lt;p>&lt;strong>Once you are satisfied with your changes, move onto the next steps.&lt;/strong>&lt;/p>
&lt;ol start="9">
&lt;li>
&lt;p>&lt;strong>Make sure your local branch is up to date with the remote:&lt;/strong> &lt;code>git pull origin&lt;/code> when in your branch. This is to ensure that nobody else has changed your branch, or if they have to update your local branch with the changes on the remote.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>Update your branch with develop:&lt;/strong>. Before requesting that your branch and its changes be merged back into the &lt;code>develop&lt;/code> branch, it is good practice to first merge develop back into your branch. This is because &lt;code>develop&lt;/code> may have changed since you started working on your branch and these changes should be merged into your branch to ensure that conflicts are resolved. To do this, first update develop by entering &lt;code>git checkout develop&lt;/code> and &lt;code>git pull&lt;/code>. This will update the &lt;code>develop&lt;/code> branch on your local machine. Then merge &lt;code>develop&lt;/code> back into your branch by entering &lt;code>git checkout your_branch&lt;/code> and &lt;code>git merge develop&lt;/code>. This may say up-to-date (in which case GREAT), or successful (in which case GREAT) or may say there are some conflicts. This happens when more than one person has changed the same piece of code.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>Resolve Conflicts:&lt;/strong> This step may not be necessary if there are no conflicts. If git tells you there are conflicts, it will also tell you which files they occur in. For more information/help with conflict resolution see &lt;a href="https://www.atlassian.com/git/tutorials/using-branches/merge-conflicts">here&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>Create a pull request for your branch&lt;/strong>. First your most up to date branch using &lt;code>git push origin&lt;/code>, even after merging develop in step 9/10. On the website you may then create a &amp;lsquo;pull request&amp;rsquo; which is a formal way of saying you want to merge your branch back into &lt;code>develop&lt;/code>. A pull request allows you to ask people to &amp;lsquo;review&amp;rsquo; your branch, share your code, view the changes in your branch and other things. To make a pull request, go to the website, click on the pull requests tab and click &lt;code>Create new pull request&lt;/code>. Then select your branch in the right drop down menu and &lt;code>develop&lt;/code> in the left. You may then enter a description of the changes you have made and anything else you would like reviewers to see.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>Reviewers review the code:&lt;/strong> Requested reviewers take a look at your changes and run the unit_test. Once they are satisfied, they will approve the pull request, or add comments about any problems.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>Merge branch into develop:&lt;/strong> Once reviewers are satisfied, you may click &lt;code>Merge branch&lt;/code> at the bottom of the pull request. Now your changes will be added into develop! Again, this is fine as the branch has been inspected by reviewers and any change can be reverted using &lt;code>git revert&lt;/code> (although this is not encouraged for the &lt;code>develop&lt;/code> branch).&lt;/p>
&lt;/li>
&lt;/ol>
&lt;p>**Note: After creating a pull request, Github will automatically apply &amp;ldquo;black formatting&amp;rdquo; to the code. This will commit new (small) changes to the branch so you should always do a &lt;code>git pull&lt;/code> on your branch to make sure your local version is up to date with the remote.&lt;/p>
&lt;h2 id="condensed-workflow">Condensed Workflow&lt;/h2>
&lt;ol>
&lt;li>&lt;code>git clone git@github.com:British-Oceanographic-Data-Centre/COAsT.git&lt;/code>.&lt;/li>
&lt;li>&lt;code>git checkout develop&lt;/code>&lt;/li>
&lt;li>&lt;code>git checkout -b new_branch_name&lt;/code>&lt;/li>
&lt;li>Make changes&lt;/li>
&lt;li>&lt;code>git add changed_file&lt;/code>&lt;/li>
&lt;li>&lt;code>git commit -m &amp;quot;what changes have you made&amp;quot;&lt;/code>&lt;/li>
&lt;li>&lt;code>git push origin&lt;/code>&lt;/li>
&lt;li>If your branch changed by anyone else, &lt;code>git pull&lt;/code>&lt;/li>
&lt;li>Repeat steps 4-8&lt;/li>
&lt;li>&lt;code>git checkout develop&lt;/code> &lt;code>git pull&lt;/code> &lt;code>git checkout your_branch&lt;/code> &lt;code>git merge develop&lt;/code> &lt;code>git push origin&lt;/code>&lt;/li>
&lt;li>Create pull request from &lt;code>your_branch&lt;/code> to &lt;code>develop&lt;/code>, include description and request reviewers.&lt;/li>
&lt;li>Reviewers accept, Merge branch.&lt;/li>
&lt;/ol></description></item><item><title>Docs: Logging</title><link>https://british-oceanographic-data-centre.github.io/COAsT/docs/contributing_package/python_logging/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://british-oceanographic-data-centre.github.io/COAsT/docs/contributing_package/python_logging/</guid><description>
&lt;p>COAsT utilises Pythonâ€™s default logging library and includes a simple setup function for those unfamiliar with how to use it.&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">&lt;span style="color:#204a87;font-weight:bold">import&lt;/span> &lt;span style="color:#000">coast&lt;/span>
&lt;span style="color:#000">coast&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">logging_util&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">setup_logging&lt;/span>&lt;span style="color:#000;font-weight:bold">()&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>This is all you need to enable full logging output to the console.&lt;/p>
&lt;p>By default, setup_logging will use the &amp;ldquo;DEBUG&amp;rdquo; logging level, if you want to adjust this, you can use the flags from the logging library.&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">&lt;span style="color:#204a87;font-weight:bold">import&lt;/span> &lt;span style="color:#000">coast&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">import&lt;/span> &lt;span style="color:#000">logging&lt;/span>
&lt;span style="color:#000">coast&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">logging_util&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">setup_logging&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">level&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#000">logging&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">INFO&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Alternative logging levels in increasing levels of severity. Note logs are reported at the chosen severity level and higher:&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">&lt;span style="color:#ce5c00;font-weight:bold">...&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">level&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#000">logging&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">DEBUG&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;span style="color:#8f5902;font-style:italic"># Detailed information, typically of interest only when diagnosing problems.&lt;/span>
&lt;span style="color:#ce5c00;font-weight:bold">...&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">level&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#000">logging&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">INFO&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;span style="color:#8f5902;font-style:italic"># Confirmation that things are working as expected.&lt;/span>
&lt;span style="color:#ce5c00;font-weight:bold">...&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">level&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#000">logging&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">WARNING&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;span style="color:#8f5902;font-style:italic"># An indication that something unexpected happened, or indicative of some problem in the near future (e.g. â€˜disk space lowâ€™). The software is still working as expected.&lt;/span>
&lt;span style="color:#ce5c00;font-weight:bold">...&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">level&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#000">logging&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">ERROR&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;span style="color:#8f5902;font-style:italic"># Due to a more serious problem, the software has not been able to perform some function&lt;/span>
&lt;span style="color:#ce5c00;font-weight:bold">...&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">level&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#000">logging&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">CRITICAL&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;span style="color:#8f5902;font-style:italic"># A serious error, indicating that the program itself may be unable to continue running&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>For more info on logging levels, see the &lt;a href="https://docs.python.org/3/library/logging.html">relevant Python documentation&lt;/a>.&lt;/p>
&lt;p>Logging output will be printed in the console once enabled by default, but output can be directed to any Stream, for instance, to an opened file.&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">&lt;span style="color:#204a87;font-weight:bold">import&lt;/span> &lt;span style="color:#000">coast&lt;/span>
&lt;span style="color:#204a87">file&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#204a87">open&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;coast.log&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;w&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;span style="color:#000">coast&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">logging_util&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">setup_logging&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">stream&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#204a87">file&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;span style="color:#000">coast&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">logging_util&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">info&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;Hello World!&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span> &lt;span style="color:#8f5902;font-style:italic"># Your use of COAsT would go here, this line is included as an example&lt;/span>
&lt;span style="color:#204a87">file&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">close&lt;/span>&lt;span style="color:#000;font-weight:bold">()&lt;/span>
&lt;/code>&lt;/pre>&lt;/div></description></item><item><title>Docs: working Lazily</title><link>https://british-oceanographic-data-centre.github.io/COAsT/docs/contributing_package/lazy-loading/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://british-oceanographic-data-centre.github.io/COAsT/docs/contributing_package/lazy-loading/</guid><description>
&lt;h1 id="what-is-lazy">What is lazy&amp;hellip;&lt;/h1>
&lt;h2 id="loading">&amp;hellip;loading&lt;/h2>
&lt;p>Lazy loading determines if data is read into memory straight away (on that line of code execution) or if the loading is delayed until the data is physical altered by some function (normally mathematical in nature)&lt;/p>
&lt;h2 id="evaluation">&amp;hellip;evaluation&lt;/h2>
&lt;p>Lazy evaluation is about delaying the execution of a method/function call until the value is physical required, normally as a graph or printed to screen. Lazy evaluation can also help with memory management, useful with large dataset, by allowing for optimisation on the chained methods calls.&lt;/p>
&lt;p>Lazy loading and Lazy evaluation are offer used together, though it is not mandatory and always worth checking that both are happening.&lt;/p>
&lt;h1 id="being-lazy-in-coast">Being Lazy in COAsT&lt;/h1>
&lt;p>There are two way to be Lazy within the COAsT package.&lt;/p>
&lt;ul>
&lt;li>xarray&lt;/li>
&lt;li>Dask&lt;/li>
&lt;/ul>
&lt;h2 id="xarray">xarray&lt;/h2>
&lt;p>COAsT uses xarray to load NetCDF files in, by default this will be Lazy, the raw data values will not be brought into memory.&lt;/p>
&lt;p>you can slice and subset the data while still having the lazy loading honoured, it is not &lt;em>until&lt;/em> the data is altered, say via a call to NumPy.cumsum, that the required data will be loaded into memory.&lt;/p>
&lt;p>Note the data on disk (in the NetCDF file) is never altered, only the values in memory are changed.&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">&lt;span style="color:#204a87;font-weight:bold">import&lt;/span> &lt;span style="color:#000">xarray&lt;/span> &lt;span style="color:#204a87;font-weight:bold">as&lt;/span> &lt;span style="color:#000">xr&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">import&lt;/span> &lt;span style="color:#000">NumPy&lt;/span> &lt;span style="color:#204a87;font-weight:bold">as&lt;/span> &lt;span style="color:#000">np&lt;/span>
&lt;span style="color:#000">dataset_domain&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000">xr&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">open_dataset&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">fn_domain&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;span style="color:#000">e3w_0&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000">dataset_domain&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">e3w_0&lt;/span> &lt;span style="color:#8f5902;font-style:italic"># still lazy loaded&lt;/span>
&lt;span style="color:#000">e3w_0_cs&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000">np&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">cumsum&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">e3w_0&lt;/span>&lt;span style="color:#000;font-weight:bold">[&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">1&lt;/span>&lt;span style="color:#000;font-weight:bold">:,&lt;/span> &lt;span style="color:#000;font-weight:bold">:,&lt;/span> &lt;span style="color:#000;font-weight:bold">:],&lt;/span> &lt;span style="color:#000">axis&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">0&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span> &lt;span style="color:#8f5902;font-style:italic"># now in memory&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="dask">Dask&lt;/h2>
&lt;p>When in use Dask will provide lazy evaluation on top of the lazy loading.&lt;/p>
&lt;p>using the same example as above, a file loaded in using xarray, this time with the chunks option set, will not only lazy load the data, but will turn on Dask, now using either the xarray or Dask wrapper functions will mean the NumPy cumsum call is not evaluated right way, in fact it will not be evaluated until either the compute function is called, or a greedy method from another library is used.&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">&lt;span style="color:#204a87;font-weight:bold">import&lt;/span> &lt;span style="color:#000">xarray&lt;/span> &lt;span style="color:#204a87;font-weight:bold">as&lt;/span> &lt;span style="color:#000">xr&lt;/span>
&lt;span style="color:#000">dataset_domain&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000">xr&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">open_dataset&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">fn_domain&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">chunks&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#000;font-weight:bold">{&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;t&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">1&lt;/span>&lt;span style="color:#000;font-weight:bold">})&lt;/span>
&lt;span style="color:#000">e3w_0&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000">dataset_domain&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">e3w_0&lt;/span> &lt;span style="color:#8f5902;font-style:italic"># still lazy loaded&lt;/span>
&lt;span style="color:#000">e3w_0_cs&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000">e3w_0&lt;/span>&lt;span style="color:#000;font-weight:bold">[&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">1&lt;/span>&lt;span style="color:#000;font-weight:bold">:,&lt;/span> &lt;span style="color:#000;font-weight:bold">:,&lt;/span> &lt;span style="color:#000;font-weight:bold">:]&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">cumsum&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">axis&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">0&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span> &lt;span style="color:#8f5902;font-style:italic"># Dask backed Lazy evaluation&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>We discuss Dask even more &lt;a href="../dask/">here&lt;/a>.&lt;/p></description></item><item><title>Docs: Dask</title><link>https://british-oceanographic-data-centre.github.io/COAsT/docs/contributing_package/dask/</link><pubDate>Tue, 05 Oct 2021 00:00:00 +0000</pubDate><guid>https://british-oceanographic-data-centre.github.io/COAsT/docs/contributing_package/dask/</guid><description>
&lt;h1 id="what-is-dask">What is Dask&lt;/h1>
&lt;p>Dask is a python library that allows code to be run in parallel based on the hardware your running on. This means Dask works just as well on your laptop as on your large server.&lt;/p>
&lt;h2 id="using-dask">Using Dask&lt;/h2>
&lt;p>Dask is included in the xarray library. When loading a data source (file/NumPy array) Dask is automatically initiated with the &lt;em>chunks&lt;/em> variable in the config file. However the chunking may not be optimal but you can adjust it before computation are made.&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">
&lt;span style="color:#000">nemo_t&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000">coast&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">Gridded&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span> &lt;span style="color:#000">fn_data&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#000">dn_files&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">+&lt;/span>&lt;span style="color:#000">fn_nemo_grid_t_dat&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">fn_domain&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#000">dn_files&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">+&lt;/span>&lt;span style="color:#000">fn_nemo_dom&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">config&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#000">fn_config&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;span style="color:#000">chunks&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;span style="color:#4e9a06">&amp;#34;x_dim&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">10&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>
&lt;span style="color:#4e9a06">&amp;#34;y_dim&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">10&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>
&lt;span style="color:#4e9a06">&amp;#34;t_dim&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">10&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>
&lt;span style="color:#000;font-weight:bold">}&lt;/span> &lt;span style="color:#8f5902;font-style:italic"># Chunks are prescribed in the config json file, but can be adjusted while the data is lazy loaded.&lt;/span>
&lt;span style="color:#000">nemo_t&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">dataset&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">chunk&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">chunks&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;strong>chunks&lt;/strong> tell Dask where to &lt;em>break&lt;/em> your data across the different processor tasks.&lt;/p>
&lt;h3 id="direct-dask">Direct Dask&lt;/h3>
&lt;p>Dask can be imported and used directly&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">&lt;span style="color:#204a87;font-weight:bold">import&lt;/span> &lt;span style="color:#000">Dask.array&lt;/span> &lt;span style="color:#204a87;font-weight:bold">as&lt;/span> &lt;span style="color:#000">da&lt;/span>
&lt;span style="color:#000">big_array&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000">da&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">multiple&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">array1&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>&lt;span style="color:#000">array2&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Dask arrays follow the NumPy API. This means that most NumPy functions have a Dask version.&lt;/p>
&lt;h2 id="potential-issues">Potential Issues&lt;/h2>
&lt;p>Dask objects are immutable. This means that the classic approach, pre-allocation follow by modification will not work.&lt;/p>
&lt;p>The following code will error.&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">&lt;span style="color:#204a87;font-weight:bold">import&lt;/span> &lt;span style="color:#000">Dask.array&lt;/span> &lt;span style="color:#204a87;font-weight:bold">as&lt;/span> &lt;span style="color:#000">da&lt;/span>
&lt;span style="color:#000">e3w_0&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000">da&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">squeeze&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">dataset_domain&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">e3w_0&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;span style="color:#000">depth_0&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000">da&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">zero_like&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">e3w_0&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;span style="color:#000">depth_0&lt;/span>&lt;span style="color:#000;font-weight:bold">[&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">0&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000;font-weight:bold">:,&lt;/span> &lt;span style="color:#000;font-weight:bold">:]&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">0.5&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">*&lt;/span> &lt;span style="color:#000">e3w_0&lt;/span>&lt;span style="color:#000;font-weight:bold">[&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">0&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000;font-weight:bold">:,&lt;/span> &lt;span style="color:#000;font-weight:bold">:]&lt;/span> &lt;span style="color:#8f5902;font-style:italic"># this line will error out&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h4 id="option-1">option 1&lt;/h4>
&lt;p>Continue using NumPy function but wrapping the final value in a Dask array. This final Dask object will still be in-memory.&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">&lt;span style="color:#000">e3w_0&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000">np&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">squeeze&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">dataset_domain&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">e3w_0&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;span style="color:#000">depth_0&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000">np&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">zeros_like&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">e3w_0&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;span style="color:#000">depth_0&lt;/span>&lt;span style="color:#000;font-weight:bold">[&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">0&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000;font-weight:bold">:,&lt;/span> &lt;span style="color:#000;font-weight:bold">:]&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">0.5&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">*&lt;/span> &lt;span style="color:#000">e3w_0&lt;/span>&lt;span style="color:#000;font-weight:bold">[&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">0&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000;font-weight:bold">:,&lt;/span> &lt;span style="color:#000;font-weight:bold">:]&lt;/span>
&lt;span style="color:#000">depth_0&lt;/span>&lt;span style="color:#000;font-weight:bold">[&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">1&lt;/span>&lt;span style="color:#000;font-weight:bold">:,&lt;/span> &lt;span style="color:#000;font-weight:bold">:,&lt;/span> &lt;span style="color:#000;font-weight:bold">:]&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000">depth_0&lt;/span>&lt;span style="color:#000;font-weight:bold">[&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">0&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000;font-weight:bold">:,&lt;/span> &lt;span style="color:#000;font-weight:bold">:]&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">+&lt;/span> &lt;span style="color:#000">np&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">cumsum&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">e3w_0&lt;/span>&lt;span style="color:#000;font-weight:bold">[&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">1&lt;/span>&lt;span style="color:#000;font-weight:bold">:,&lt;/span> &lt;span style="color:#000;font-weight:bold">:,&lt;/span> &lt;span style="color:#000;font-weight:bold">:],&lt;/span> &lt;span style="color:#000">axis&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">0&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;span style="color:#000">depth_0&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000">da&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">array&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">depth_0&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h4 id="option-2">option 2&lt;/h4>
&lt;p>Dask offers a feature called &lt;a href="https://docs.dask.org/en/latest/delayed.html">delayed&lt;/a>. This can be used as a modifier on your
complex methods as follows;&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">&lt;span style="color:#5c35cc;font-weight:bold">@Dask.delayed&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">def&lt;/span> &lt;span style="color:#000">set_timezero_depths&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#3465a4">self&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">dataset_domain&lt;/span>&lt;span style="color:#000;font-weight:bold">):&lt;/span>
&lt;span style="color:#8f5902;font-style:italic"># complex workings&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>these do not return the computed answer, rather it returns a delayed object. These delayed object get stacked, as more delayed methods are called. When the value is needed, it can be computed like so;&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">&lt;span style="color:#000">ne&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000">coast&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">Gridded&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">...&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;span style="color:#8f5902;font-style:italic"># come complex delayed methods called&lt;/span>
&lt;span style="color:#000">ne&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">data_variable&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">compute&lt;/span>&lt;span style="color:#000;font-weight:bold">()&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Dask will now work out a computing path via all the required methods using as many processor tasks as possible.&lt;/p>
&lt;h3 id="visualising-the-graph">Visualising the Graph&lt;/h3>
&lt;p>Dask is fundamentally a computational graph library, to understand what is happening in the background it can help to see these graphs (on smaller/simpler problems). This can be achieved by running;&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">&lt;span style="color:#000">ne&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000">coast&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">Gridded&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">...&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;span style="color:#8f5902;font-style:italic"># come complex delayed methods called&lt;/span>
&lt;span style="color:#000">ne&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">data_variable&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">visualize&lt;/span>&lt;span style="color:#000;font-weight:bold">()&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>this will output a png image of the graph in the calling directory and could look like this;&lt;/p>
&lt;div class="card rounded p-2 td-post-card mb-4 mt-4" style="max-width: 6344px">
&lt;img class="card-img-top" src="https://british-oceanographic-data-centre.github.io/COAsT/COAsT/docs/contributing_package/dask/mydask_huff6e57bba272ec52469a454020e8d978_582299_6334x945_fit_q75_catmullrom.jpg" width="6334" height="945">
&lt;div class="card-body px-0 pt-2 pb-0">
&lt;p class="card-text">
&lt;/p>
&lt;/div>
&lt;/div></description></item><item><title>Docs: 0. profile introduction</title><link>https://british-oceanographic-data-centre.github.io/COAsT/docs/examples/notebooks/profile/0._profile_introduction/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://british-oceanographic-data-centre.github.io/COAsT/docs/examples/notebooks/profile/0._profile_introduction/</guid><description>
&lt;h2 id="example-useage-of-profile-object">Example useage of Profile object.&lt;/h2>
&lt;h3 id="overview">Overview&lt;/h3>
&lt;p>INDEXED type class for storing data from a CTD Profile (or similar
down and up observations). The structure of the class is based around having
discrete profile locations with independent depth dimensions and coords.
The class dataset should contain two dimensions:&lt;/p>
&lt;pre>&lt;code>&amp;gt; id_dim :: The profiles dimension. Each element of this dimension
contains data (e.g. cast) for an individual location.
&amp;gt; z_dim :: The dimension for depth levels. A profile object does not
need to have shared depths, so NaNs might be used to
pad any depth array.
&lt;/code>&lt;/pre>
&lt;p>Alongside these dimensions, the following minimal coordinates should also
be available:&lt;/p>
&lt;pre>&lt;code>&amp;gt; longitude (id_dim) :: 1D array of longitudes, one for each id_dim
&amp;gt; latitude (id_dim) :: 1D array of latitudes, one for each id_dim
&amp;gt; time (id_dim) :: 1D array of times, one for each id_dim
&amp;gt; depth (id_dim, z_dim) :: 2D array of depths, with different depth
levels being provided for each profile.
Note that these depth levels need to be
stored in a 2D array, so NaNs can be used
to pad out profiles with shallower depths.
&amp;gt; id_name (id_dim) :: [Optional] Name of id_dim/case or id_dim number.
&lt;/code>&lt;/pre>
&lt;h2 id="introduction-to-profile-and-profileanalysis">Introduction to Profile and ProfileAnalysis&lt;/h2>
&lt;p>Below is a description of the available example scripts for this class as well
as an overview of validation using &lt;code>Profile&lt;/code> and &lt;code>ProfileAnalysis&lt;/code>.&lt;/p>
&lt;h3 id="example-scripts">Example Scripts&lt;/h3>
&lt;p>Please see &lt;code>COAsT/example_scripts/notesbooks/runnable_notebooks/profile_validation/*.ipynb&lt;/code> and &lt;code>COAsT/example_scripts/profile_validation/*.py&lt;/code> for some notebooks and equivalent scripts which
demonstrate how to use the Profile and ProfileAnalysis classes for model
validation.&lt;/p>
&lt;ol>
&lt;li>
&lt;p>&lt;code>analysis_preprocess_en4.py&lt;/code> : If you&amp;rsquo;re using EN4 data, this kind of script
might be your first step for analysis.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>analysis_extract_and_compare.py&lt;/code>: This script shows you how to extract
the nearest model profiles, compare them with EN4 observations and get errors
throughout the vertical dimension and averaged in surface and bottom zones&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>analysis_extract_and_compare_single_process.py&lt;/code>: This script does the same
as number 2. However, it is modified slightly to take a command line argument
which helps it figure out which dates to analyse. This means that this script
can act as a template for &lt;code>jug&lt;/code> type parallel processing on, e.g. JASMIN.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>analysis_mask_means.py&lt;/code>: This script demonstrates how to use boolean masks
to obtain regional averages of profiles and errors.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>analysis_average_into_grid_boxes.py&lt;/code>: This script demonstrates how to
average the data inside a &lt;code>Profile&lt;/code> object into regular grid boxes and
seasonal climatologies.&lt;/p>
&lt;/li>
&lt;/ol>
&lt;h2 id="load-and-preprocess-profile-and-model-data">Load and preprocess profile and model data&lt;/h2>
&lt;p>Start by loading python packages&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">&lt;span style="color:#204a87;font-weight:bold">import&lt;/span> &lt;span style="color:#000">coast&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">from&lt;/span> &lt;span style="color:#000">os&lt;/span> &lt;span style="color:#204a87;font-weight:bold">import&lt;/span> &lt;span style="color:#000">path&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">import&lt;/span> &lt;span style="color:#000">numpy&lt;/span> &lt;span style="color:#204a87;font-weight:bold">as&lt;/span> &lt;span style="color:#000">np&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">import&lt;/span> &lt;span style="color:#000">matplotlib.pyplot&lt;/span> &lt;span style="color:#204a87;font-weight:bold">as&lt;/span> &lt;span style="color:#000">plt&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>We can create a new Profile object easily:&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">&lt;span style="color:#000">profile&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000">coast&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">Profile&lt;/span>&lt;span style="color:#000;font-weight:bold">()&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Currently, this object is empty, and contains no dataset. There are some
reading routines currently available in Profile for reading EN4 or WOD data
files. These can be used to easily read data into your new profile object:&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">&lt;span style="color:#8f5902;font-style:italic"># Read WOD data into profile object&lt;/span>
&lt;span style="color:#000">fn_prof&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000">path&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">join&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;example_files&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;WOD_example_ragged_standard_level.nc&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;span style="color:#000">profile&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">read_wod&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span> &lt;span style="color:#000">fn_prof&lt;/span> &lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;span style="color:#8f5902;font-style:italic"># Read EN4 data into profile object (OVERWRITES DATASET)&lt;/span>
&lt;span style="color:#000">fn_prof&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000">path&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">join&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;example_files&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;coast_example_en4_201008.nc&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;span style="color:#000">fn_cfg_prof&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000">path&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">join&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;config&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;example_en4_profiles.json&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;span style="color:#000">profile&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000">coast&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">Profile&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">config&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#000">fn_cfg_prof&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;span style="color:#000">profile&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">read_en4&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span> &lt;span style="color:#000">fn_prof&lt;/span> &lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;pre>&lt;code>config/example_en4_profiles.json
&lt;/code>&lt;/pre>
&lt;p>Alternatively, you can pass an &lt;code>xarray.dataset&lt;/code> straight to Profile:&lt;/p>
&lt;pre>&lt;code>profile = coast.Profile( dataset = your_dataset, config = config_file [opt] )
&lt;/code>&lt;/pre>&lt;p>If you are using EN4 data, you can use the &lt;code>process_en4()&lt;/code> routine to apply
quality control flags to the data (replacing with NaNs):&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">&lt;span style="color:#000">processed_profile&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000">profile&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">process_en4&lt;/span>&lt;span style="color:#000;font-weight:bold">()&lt;/span>
&lt;span style="color:#000">profile&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000">processed_profile&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>We can do some simple spatial and temporal manipulations of this data:&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">&lt;span style="color:#8f5902;font-style:italic"># Cut out a geographical box&lt;/span>
&lt;span style="color:#000">profile&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000">profile&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">subset_indices_lonlat_box&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">lonbounds&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000;font-weight:bold">[&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">-&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">15&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">15&lt;/span>&lt;span style="color:#000;font-weight:bold">],&lt;/span>
&lt;span style="color:#000">latbounds&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000;font-weight:bold">[&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">45&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">65&lt;/span>&lt;span style="color:#000;font-weight:bold">])&lt;/span>
&lt;span style="color:#8f5902;font-style:italic"># Cut out a time window&lt;/span>
&lt;span style="color:#000">profile&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000">profile&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">time_slice&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span> &lt;span style="color:#000">date0&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000">np&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">datetime64&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#4e9a06">&amp;#39;2010-01-01&amp;#39;&lt;/span>&lt;span style="color:#000;font-weight:bold">),&lt;/span> &lt;span style="color:#000">date1&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000">np&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">datetime64&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;2010-01-20&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">))&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="inspect-profile-locations">Inspect profile locations&lt;/h3>
&lt;p>Have a look inside the &lt;code>profile.py&lt;/code> class to see what it can do&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">&lt;span style="color:#000">profile&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">plot_map&lt;/span>&lt;span style="color:#000;font-weight:bold">()&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;pre>&lt;code>/usr/share/miniconda/envs/coast/lib/python3.8/site-packages/cartopy/io/__init__.py:241: DownloadWarning: Downloading: https://naturalearth.s3.amazonaws.com/50m_physical/ne_50m_coastline.zip
warnings.warn(f'Downloading: {url}', DownloadWarning)
&lt;/code>&lt;/pre>
&lt;p>&lt;img src="https://british-oceanographic-data-centre.github.io/COAsT/COAsT/0._profile_introduction_files/0._profile_introduction_12_1.png" alt="png">&lt;/p>
&lt;pre>&lt;code>(&amp;lt;Figure size 640x480 with 2 Axes&amp;gt;, &amp;lt;GeoAxesSubplot: &amp;gt;)
&lt;/code>&lt;/pre>
&lt;h3 id="direct-model-comparison-using-obs_operator-method">Direct Model comparison using obs_operator() method&lt;/h3>
&lt;p>There are a number of routines available for interpolating in the horizontal,
vertical and in time to do direct comparisons of model and profile data.
&lt;code>Profile.obs_operator&lt;/code> will do a nearest neighbour spatial interpolation of
the data in a &lt;code>Gridded&lt;/code> object to profile latitudes/longitudes. It will also
do a custom time interpolation.&lt;/p>
&lt;h4 id="first-load-some-model-data">First load some model data:&lt;/h4>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">&lt;span style="color:#000">root&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;./&amp;#34;&lt;/span>
&lt;span style="color:#8f5902;font-style:italic"># And by defining some file paths&lt;/span>
&lt;span style="color:#000">dn_files&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000">root&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">+&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;./example_files/&amp;#34;&lt;/span>
&lt;span style="color:#000">fn_nemo_dat&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000">path&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">join&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">dn_files&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;coast_example_nemo_data.nc&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;span style="color:#000">fn_nemo_dom&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000">path&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">join&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">dn_files&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;coast_example_nemo_domain.nc&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;span style="color:#000">fn_nemo_config&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000">path&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">join&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">root&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;./config/example_nemo_grid_t.json&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;span style="color:#8f5902;font-style:italic"># Create gridded object:&lt;/span>
&lt;span style="color:#000">nemo&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000">coast&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">Gridded&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">fn_nemo_dat&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">fn_nemo_dom&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">multiple&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#3465a4">True&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">config&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#000">fn_nemo_config&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h4 id="create-a-landmask-array-in-gridded">Create a landmask array in Gridded&lt;/h4>
&lt;p>In this example we add a &lt;code>landmask&lt;/code> variable to the &lt;code>Gridded&lt;/code> dataset.
When this is present, the &lt;code>obs_operator&lt;/code> will use this to interpolation to the
nearest &lt;em>wet&lt;/em> point. If not present, it will just take the nearest grid point (not implemented).&lt;/p>
&lt;p>We also rename the depth at initial time coordinate &lt;code>depth_0&lt;/code> to &lt;code>depth&lt;/code> as this is expected by Profile()&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">&lt;span style="color:#000">nemo&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">dataset&lt;/span>&lt;span style="color:#000;font-weight:bold">[&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;landmask&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">]&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000">nemo&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">dataset&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">bottom_level&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">==&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">0&lt;/span>
&lt;span style="color:#000">nemo&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">dataset&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000">nemo&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">dataset&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">rename&lt;/span>&lt;span style="color:#000;font-weight:bold">({&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;depth_0&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;depth&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">})&lt;/span> &lt;span style="color:#8f5902;font-style:italic"># profile methods will expect a `depth` coordinate&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="interpolate-model-to-horizontal-observation-locations-using-obs_operator-method">Interpolate model to horizontal observation locations using obs_operator() method&lt;/h3>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">&lt;span style="color:#8f5902;font-style:italic"># Use obs operator for horizontal remapping of Gridded onto Profile.&lt;/span>
&lt;span style="color:#000">model_profiles&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000">profile&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">obs_operator&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">nemo&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Now that we have interpolated the model onto Profiles, we have a new Profile
object called &lt;code>model_profiles&lt;/code>. This can be used to do some comparisons with
our original &lt;code>processed_profile&lt;/code> object, which we created above.&lt;/p>
&lt;h3 id="discard-profiles-where-the-interpolation-distance-is-too-large">Discard profiles where the interpolation distance is too large&lt;/h3>
&lt;p>However maybe we first want to restrict the set of model profiles to those that
were close to the observations; perhaps, for example, the observational profiles are beyond the model domain.
The model resolution would be an appropriate scale to pick&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">&lt;span style="color:#000">too_far&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">7&lt;/span> &lt;span style="color:#8f5902;font-style:italic"># distance km&lt;/span>
&lt;span style="color:#000">keep_indices&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000">model_profiles&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">dataset&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">interp_dist&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">&amp;lt;=&lt;/span> &lt;span style="color:#000">too_far&lt;/span>
&lt;span style="color:#000">model_profiles&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000">model_profiles&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">isel&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">id_dim&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#000">keep_indices&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;span style="color:#8f5902;font-style:italic"># Also drop the unwanted observational profiles&lt;/span>
&lt;span style="color:#000">profile&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000">profile&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">isel&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">id_dim&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#000">keep_indices&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="profile-analysis">Profile analysis&lt;/h2>
&lt;h3 id="create-an-object-for-profile-analysis">Create an object for Profile analysis&lt;/h3>
&lt;p>Let&amp;rsquo;s make our ProfileAnalysis object:&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">&lt;span style="color:#000">analysis&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000">coast&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">ProfileAnalysis&lt;/span>&lt;span style="color:#000;font-weight:bold">()&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>We can use &lt;code>ProfileAnalysis.interpolate_vertical&lt;/code> to interpolate all variables
within a Profile object. This can be done onto a set of reference depths or,
matching another object&amp;rsquo;s depth coordinates by passing another profile object.
Let&amp;rsquo;s interpolate our model profiles onto observations depths, then interpolate
both onto a set of reference depths:&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">&lt;span style="color:#8f5902;font-style:italic">### Set depth averaging settings&lt;/span>
&lt;span style="color:#000">ref_depth&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000">np&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">concatenate&lt;/span>&lt;span style="color:#000;font-weight:bold">((&lt;/span>&lt;span style="color:#000">np&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">arange&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">1&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">100&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">2&lt;/span>&lt;span style="color:#000;font-weight:bold">),&lt;/span> &lt;span style="color:#000">np&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">arange&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">100&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">300&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">5&lt;/span>&lt;span style="color:#000;font-weight:bold">),&lt;/span> &lt;span style="color:#000">np&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">arange&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">300&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">1000&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">50&lt;/span>&lt;span style="color:#000;font-weight:bold">)))&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">&lt;span style="color:#8f5902;font-style:italic"># Interpolate model profiles onto observation depths&lt;/span>
&lt;span style="color:#000">model_profiles_interp&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000">analysis&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">interpolate_vertical&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">model_profiles&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">profile&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">interp_method&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;linear&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">&lt;span style="color:#8f5902;font-style:italic"># Vertical interpolation of model profiles to reference depths&lt;/span>
&lt;span style="color:#000">model_profiles_interp_ref&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000">analysis&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">interpolate_vertical&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">model_profiles_interp&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">ref_depth&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;pre>&lt;code># Interpolation of obs profiles to reference depths
profile_interp_ref = analysis.interpolate_vertical(profile, ref_depth)
&lt;/code>&lt;/pre>&lt;p>However, there is a problem here as the &lt;code>interpolate_vertical()&lt;/code> method tries to map the whole contents of &lt;code>profile&lt;/code> to the &lt;code>ref_depth&lt;/code> and the &lt;code>profile&lt;/code> object contains some binary data from the original qc flags. The data from the qc flags was mapped using &lt;code>process_en4()&lt;/code> so the original qc entries can be removed.&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">&lt;span style="color:#8f5902;font-style:italic">## Strip out old QC variables&lt;/span>
&lt;span style="color:#000">profile&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">dataset&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000">profile&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">dataset&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">drop_vars&lt;/span>&lt;span style="color:#000;font-weight:bold">([&lt;/span>&lt;span style="color:#4e9a06">&amp;#39;qc_potential_temperature&amp;#39;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>&lt;span style="color:#4e9a06">&amp;#39;qc_practical_salinity&amp;#39;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>
&lt;span style="color:#4e9a06">&amp;#39;qc_depth&amp;#39;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>&lt;span style="color:#4e9a06">&amp;#39;qc_time&amp;#39;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>
&lt;span style="color:#4e9a06">&amp;#39;qc_flags_profiles&amp;#39;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>&lt;span style="color:#4e9a06">&amp;#39;qc_flags_levels&amp;#39;&lt;/span>&lt;span style="color:#000;font-weight:bold">])&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">&lt;span style="color:#8f5902;font-style:italic"># Interpolation of obs profiles to reference depths&lt;/span>
&lt;span style="color:#000">profile_interp_ref&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000">analysis&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">interpolate_vertical&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">profile&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">ref_depth&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="differencing">Differencing&lt;/h3>
&lt;p>Now that we have two Profile objects that are horizontally and vertically
comparable, we can use &lt;code>difference()&lt;/code> to get some basic errors:&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">&lt;span style="color:#000">differences&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000">analysis&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">difference&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">profile_interp_ref&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">model_profiles_interp_ref&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>This will return a new &lt;code>Profile&lt;/code> object that contains the variable difference,
absolute differences and square differences at all depths and means for each
profile.&lt;/p>
&lt;p>Type&lt;/p>
&lt;pre>&lt;code>differences.dataset
&lt;/code>&lt;/pre>&lt;p>to see what it returns&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">&lt;span style="color:#8f5902;font-style:italic"># E.g. plot the differences on ind_dim vs z_dim axes&lt;/span>
&lt;span style="color:#000">differences&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">dataset&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">diff_temperature&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">plot&lt;/span>&lt;span style="color:#000;font-weight:bold">()&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;pre>&lt;code>&amp;lt;matplotlib.collections.QuadMesh at 0x7ffa94febcd0&amp;gt;
&lt;/code>&lt;/pre>
&lt;p>&lt;img src="https://british-oceanographic-data-centre.github.io/COAsT/COAsT/0._profile_introduction_files/0._profile_introduction_33_1.png" alt="png">&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">&lt;span style="color:#8f5902;font-style:italic"># or a bit prettier on labelled axes&lt;/span>
&lt;span style="color:#000">cmap&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#000">plt&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">get_cmap&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#4e9a06">&amp;#39;seismic&amp;#39;&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;span style="color:#000">fig&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000">plt&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">figure&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">figsize&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">8&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">3&lt;/span>&lt;span style="color:#000;font-weight:bold">))&lt;/span>
&lt;span style="color:#000">plt&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">pcolormesh&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span> &lt;span style="color:#000">differences&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">dataset&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">time&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">ref_depth&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">differences&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">dataset&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">diff_temperature&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">T&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>
&lt;span style="color:#000">label&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#4e9a06">&amp;#39;abs_diff&amp;#39;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">cmap&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#000">cmap&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>
&lt;span style="color:#000">vmin&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=-&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">5&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">vmax&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">5&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;span style="color:#000">plt&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">ylim&lt;/span>&lt;span style="color:#000;font-weight:bold">([&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">0&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">200&lt;/span>&lt;span style="color:#000;font-weight:bold">])&lt;/span>
&lt;span style="color:#000">plt&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">gca&lt;/span>&lt;span style="color:#000;font-weight:bold">()&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">invert_yaxis&lt;/span>&lt;span style="color:#000;font-weight:bold">()&lt;/span>
&lt;span style="color:#000">plt&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">ylabel&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#4e9a06">&amp;#39;depth&amp;#39;&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;span style="color:#000">plt&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">colorbar&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span> &lt;span style="color:#000">label&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#4e9a06">&amp;#39;temperature diff (obs-model)&amp;#39;&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;pre>&lt;code>&amp;lt;matplotlib.colorbar.Colorbar at 0x7ffa94efc400&amp;gt;
&lt;/code>&lt;/pre>
&lt;p>&lt;img src="https://british-oceanographic-data-centre.github.io/COAsT/COAsT/0._profile_introduction_files/0._profile_introduction_34_1.png" alt="png">&lt;/p>
&lt;h3 id="layer-averaging">Layer Averaging&lt;/h3>
&lt;p>We can use the &lt;code>Profile&lt;/code> object to get mean values between specific depth levels
or for some layer above the bathymetric depth. The former can be done using
&lt;code>ProfileAnalysis.depth_means()&lt;/code>, for example the following will return a new
Profile object containing the means of all variables between 0m and 5m:&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">&lt;span style="color:#000">profile_surface&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000">analysis&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">depth_means&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">profile&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000;font-weight:bold">[&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">0&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">5&lt;/span>&lt;span style="color:#000;font-weight:bold">])&lt;/span> &lt;span style="color:#8f5902;font-style:italic"># 0 - 5 metres&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>But since this can work on any Profile object it would be more interesting to apply it to the differences
between the interpolated observations and model points&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">&lt;span style="color:#000">surface_def&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">10&lt;/span> &lt;span style="color:#8f5902;font-style:italic"># in metres&lt;/span>
&lt;span style="color:#000">model_profiles_surface&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000">analysis&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">depth_means&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">model_profiles_interp_ref&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000;font-weight:bold">[&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">0&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">surface_def&lt;/span>&lt;span style="color:#000;font-weight:bold">])&lt;/span>
&lt;span style="color:#000">obs_profiles_surface&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000">analysis&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">depth_means&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">profile_interp_ref&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000;font-weight:bold">[&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">0&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">surface_def&lt;/span>&lt;span style="color:#000;font-weight:bold">])&lt;/span>
&lt;span style="color:#000">surface_errors&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000">analysis&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">difference&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">obs_profiles_surface&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">model_profiles_surface&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;span style="color:#8f5902;font-style:italic"># Plot (observation - model) upper 10m averaged temperatures&lt;/span>
&lt;span style="color:#000">surface_errors&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">plot_map&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">var_str&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;diff_temperature&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;img src="https://british-oceanographic-data-centre.github.io/COAsT/COAsT/0._profile_introduction_files/0._profile_introduction_38_0.png" alt="png">&lt;/p>
&lt;pre>&lt;code>(&amp;lt;Figure size 640x480 with 2 Axes&amp;gt;, &amp;lt;GeoAxesSubplot: &amp;gt;)
&lt;/code>&lt;/pre>
&lt;p>This can be done for any arbitrary depth layer defined by two depths.&lt;/p>
&lt;p>However, in some cases it may be that one of the depth levels is not defined by a constant,
e.g. when calculating bottom means. In this case you may want to calculate averages over a
height from the bottom that is conditional on the bottom depth. This can be done using
&lt;code>ProfileAnalysis.bottom_means()&lt;/code>. For example:&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">&lt;span style="color:#000">bottom_height&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000;font-weight:bold">[&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">10&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">50&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">100&lt;/span>&lt;span style="color:#000;font-weight:bold">]&lt;/span> &lt;span style="color:#8f5902;font-style:italic"># Average over bottom heights of 10m, 30m and 100m for...&lt;/span>
&lt;span style="color:#000">bottom_thresh&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000;font-weight:bold">[&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">100&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">500&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">np&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">inf&lt;/span>&lt;span style="color:#000;font-weight:bold">]&lt;/span> &lt;span style="color:#8f5902;font-style:italic"># ...bathymetry depths less than 100m, 100-500m and 500-infinite&lt;/span>
&lt;span style="color:#000">model_profiles_bottom&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000">analysis&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">bottom_means&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">model_profiles_interp_ref&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">bottom_height&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">bottom_thresh&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>similarly compute the same for the observations&amp;hellip; though first we have to patch in a &lt;code>bathymetry&lt;/code> variable
that will be expected by the method. Grab it from the model dataset.&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">&lt;span style="color:#000">profile_interp_ref&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">dataset&lt;/span>&lt;span style="color:#000;font-weight:bold">[&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;bathymetry&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">]&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000;font-weight:bold">([&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;id_dim&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">],&lt;/span> &lt;span style="color:#000">model_profiles_interp_ref&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">dataset&lt;/span>&lt;span style="color:#000;font-weight:bold">[&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;bathymetry&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">]&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">values&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;span style="color:#000">obs_profiles_bottom&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000">analysis&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">bottom_means&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">profile_interp_ref&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">bottom_height&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">bottom_thresh&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Now the difference can be calculated&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">&lt;span style="color:#000">bottom_errors&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000">analysis&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">difference&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span> &lt;span style="color:#000">obs_profiles_bottom&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">model_profiles_bottom&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;span style="color:#8f5902;font-style:italic"># Plot (observation - model) upper 10m averaged temperatures&lt;/span>
&lt;span style="color:#000">bottom_errors&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">plot_map&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">var_str&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;diff_temperature&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;img src="https://british-oceanographic-data-centre.github.io/COAsT/COAsT/0._profile_introduction_files/0._profile_introduction_44_0.png" alt="png">&lt;/p>
&lt;pre>&lt;code>(&amp;lt;Figure size 640x480 with 2 Axes&amp;gt;, &amp;lt;GeoAxesSubplot: &amp;gt;)
&lt;/code>&lt;/pre>
&lt;p>&lt;strong>NOTE1&lt;/strong>: The bathymetry variable does not actually need to contain bathymetric depths, it can also be used to calculate means above any non-constant surface. For example, it could be mixed layer depth.&lt;/p>
&lt;p>&lt;strong>NOTE2&lt;/strong>: This can be done for any Profile object. So, you could use this workflow to also average a Profile derived from the &lt;code>difference()&lt;/code> routine.&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">&lt;span style="color:#8f5902;font-style:italic"># Since they are indexed by &amp;#39;id_dim&amp;#39; they can be plotted against time&lt;/span>
&lt;span style="color:#000">fig&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000">plt&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">figure&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">figsize&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">8&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">3&lt;/span>&lt;span style="color:#000;font-weight:bold">))&lt;/span>
&lt;span style="color:#000">plt&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">plot&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span> &lt;span style="color:#000">surface_errors&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">dataset&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">time&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">surface_errors&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">dataset&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">diff_temperature&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#4e9a06">&amp;#39;.&amp;#39;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">label&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#4e9a06">&amp;#39;surf T&amp;#39;&lt;/span> &lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;span style="color:#000">plt&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">plot&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span> &lt;span style="color:#000">bottom_errors&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">dataset&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">time&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">bottom_errors&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">dataset&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">diff_temperature&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#4e9a06">&amp;#39;.&amp;#39;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">label&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#4e9a06">&amp;#39;bed T&amp;#39;&lt;/span> &lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;span style="color:#000">plt&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">xlabel&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#4e9a06">&amp;#39;time&amp;#39;&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;span style="color:#000">plt&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">ylabel&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#4e9a06">&amp;#39;temperature errors&amp;#39;&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;span style="color:#000">plt&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">legend&lt;/span>&lt;span style="color:#000;font-weight:bold">()&lt;/span>
&lt;span style="color:#000">plt&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">title&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;Temperature diff (obs-model)&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;pre>&lt;code>Text(0.5, 1.0, 'Temperature diff (obs-model)')
&lt;/code>&lt;/pre>
&lt;p>&lt;img src="https://british-oceanographic-data-centre.github.io/COAsT/COAsT/0._profile_introduction_files/0._profile_introduction_46_1.png" alt="png">&lt;/p>
&lt;h3 id="regional-mask-averaging">Regional (Mask) Averaging&lt;/h3>
&lt;p>We can use &lt;code>Profile&lt;/code> in combination with &lt;code>MaskMaker&lt;/code> to calculate averages over
regions defined by masks. For example, to get the mean errors in the North Sea.
Start by creating a list of boolean masks we would like to use:&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">&lt;span style="color:#000">mm&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000">coast&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">MaskMaker&lt;/span>&lt;span style="color:#000;font-weight:bold">()&lt;/span>
&lt;span style="color:#8f5902;font-style:italic"># Define Regional Masks&lt;/span>
&lt;span style="color:#000">regional_masks&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000;font-weight:bold">[]&lt;/span>
&lt;span style="color:#8f5902;font-style:italic"># Define convenient aliases based on nemo data&lt;/span>
&lt;span style="color:#000">lon&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000">nemo&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">dataset&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">longitude&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">values&lt;/span>
&lt;span style="color:#000">lat&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000">nemo&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">dataset&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">latitude&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">values&lt;/span>
&lt;span style="color:#000">bathy&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000">nemo&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">dataset&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">bathymetry&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">values&lt;/span>
&lt;span style="color:#8f5902;font-style:italic"># Add regional mask for whole domain&lt;/span>
&lt;span style="color:#000">regional_masks&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">append&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">np&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">ones&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">lon&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">shape&lt;/span>&lt;span style="color:#000;font-weight:bold">))&lt;/span>
&lt;span style="color:#8f5902;font-style:italic"># Add regional mask for English Channel&lt;/span>
&lt;span style="color:#000">regional_masks&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">append&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">mm&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">region_def_nws_english_channel&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">lon&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">lat&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">bathy&lt;/span>&lt;span style="color:#000;font-weight:bold">))&lt;/span>
&lt;span style="color:#000">region_names&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000;font-weight:bold">[&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;whole_domain&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;english_channel&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">,]&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Next, we must make these masks into datasets using &lt;code>MaskMaker.make_mask_dataset&lt;/code>.
Masks should be 2D datasets defined by booleans. In our example here we have used
the latitude/longitude array from the nemo object, however it can be defined
however you like.&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">&lt;span style="color:#000">mask_list&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000">mm&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">make_mask_dataset&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">lon&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">lat&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">regional_masks&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Then we use &lt;code>ProfileAnalysis.determine_mask_indices&lt;/code> to figure out which
profiles in a &lt;code>Profile&lt;/code> object lie within each regional mask:&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">&lt;span style="color:#000">mask_indices&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000">analysis&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">determine_mask_indices&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">profile&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">mask_list&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>This returns an object called &lt;code>mask_indices&lt;/code>, which is required to pass to
&lt;code>ProfileAnalysis.mask_means()&lt;/code>. This routine will return a new xarray dataset
containing averaged data for each region:&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">&lt;span style="color:#000">mask_means&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000">analysis&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">mask_means&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">profile&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">mask_indices&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>which can be visualised or further processed&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">&lt;span style="color:#204a87;font-weight:bold">for&lt;/span> &lt;span style="color:#000">count_region&lt;/span> &lt;span style="color:#204a87;font-weight:bold">in&lt;/span> &lt;span style="color:#204a87">range&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#204a87">len&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">region_names&lt;/span>&lt;span style="color:#000;font-weight:bold">)):&lt;/span>
&lt;span style="color:#000">plt&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">plot&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span> &lt;span style="color:#000">mask_means&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">profile_mean_temperature&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">isel&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">dim_mask&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#000">count_region&lt;/span>&lt;span style="color:#000;font-weight:bold">),&lt;/span>
&lt;span style="color:#000">mask_means&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">profile_mean_depth&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">isel&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">dim_mask&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#000">count_region&lt;/span>&lt;span style="color:#000;font-weight:bold">),&lt;/span>
&lt;span style="color:#000">label&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#000">region_names&lt;/span>&lt;span style="color:#000;font-weight:bold">[&lt;/span>&lt;span style="color:#000">count_region&lt;/span>&lt;span style="color:#000;font-weight:bold">],&lt;/span>
&lt;span style="color:#000">marker&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;.&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">linestyle&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#4e9a06">&amp;#39;none&amp;#39;&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;span style="color:#000">plt&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">ylim&lt;/span>&lt;span style="color:#000;font-weight:bold">([&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">10&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">1000&lt;/span>&lt;span style="color:#000;font-weight:bold">])&lt;/span>
&lt;span style="color:#000">plt&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">yscale&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;log&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;span style="color:#000">plt&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">gca&lt;/span>&lt;span style="color:#000;font-weight:bold">()&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">invert_yaxis&lt;/span>&lt;span style="color:#000;font-weight:bold">()&lt;/span>
&lt;span style="color:#000">plt&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">xlabel&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#4e9a06">&amp;#39;temperature&amp;#39;&lt;/span>&lt;span style="color:#000;font-weight:bold">);&lt;/span> &lt;span style="color:#000">plt&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">ylabel&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#4e9a06">&amp;#39;depth&amp;#39;&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;span style="color:#000">plt&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">legend&lt;/span>&lt;span style="color:#000;font-weight:bold">()&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;pre>&lt;code>&amp;lt;matplotlib.legend.Legend at 0x7ffa9d11a1f0&amp;gt;
&lt;/code>&lt;/pre>
&lt;p>&lt;img src="https://british-oceanographic-data-centre.github.io/COAsT/COAsT/0._profile_introduction_files/0._profile_introduction_56_1.png" alt="png">&lt;/p>
&lt;h3 id="gridding-profile-data">Gridding Profile Data&lt;/h3>
&lt;p>If you have large amount of profile data you may want to average it into
grid boxes to get, for example, mean error maps or climatologies. This can be
done using &lt;code>ProfileAnalysis.average_into_grid_boxes()&lt;/code>.&lt;/p>
&lt;p>We can create a gridded dataset shape &lt;code>(y_dim, x_dim)&lt;/code> from all the data using:&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">&lt;span style="color:#000">grid_lon&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000">np&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">arange&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">-&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">15&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">15&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">0.5&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;span style="color:#000">grid_lat&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000">np&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">arange&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">45&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">65&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">0.5&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;span style="color:#000">prof_gridded&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000">analysis&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">average_into_grid_boxes&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">profile&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">grid_lon&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">grid_lat&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;span style="color:#8f5902;font-style:italic"># NB this method does not separately treat `z_dim`, see docstr&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">&lt;span style="color:#000">lat&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000">prof_gridded&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">dataset&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">latitude&lt;/span>
&lt;span style="color:#000">lon&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000">prof_gridded&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">dataset&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">longitude&lt;/span>
&lt;span style="color:#000">temperature&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000">prof_gridded&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">dataset&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">temperature&lt;/span>
&lt;span style="color:#000">plt&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">pcolormesh&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span> &lt;span style="color:#000">lon&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">lat&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">temperature&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;span style="color:#000">plt&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">title&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#4e9a06">&amp;#39;gridded mean temperature&amp;#39;&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;span style="color:#000">plt&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">colorbar&lt;/span>&lt;span style="color:#000;font-weight:bold">()&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;pre>&lt;code>&amp;lt;matplotlib.colorbar.Colorbar at 0x7ffa94985fa0&amp;gt;
&lt;/code>&lt;/pre>
&lt;p>&lt;img src="https://british-oceanographic-data-centre.github.io/COAsT/COAsT/0._profile_introduction_files/0._profile_introduction_59_1.png" alt="png">&lt;/p>
&lt;p>Alternatively, we can calculate averages for each season:&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">&lt;span style="color:#000">prof_gridded_DJF&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000">analysis&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">average_into_grid_boxes&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">profile&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">grid_lon&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">grid_lat&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">season&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;DJF&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">var_modifier&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;_DJF&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;span style="color:#000">prof_gridded_MAM&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000">analysis&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">average_into_grid_boxes&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">profile&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">grid_lon&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">grid_lat&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">season&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;MAM&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">var_modifier&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;_MAM&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;span style="color:#000">prof_gridded_JJA&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000">analysis&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">average_into_grid_boxes&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">profile&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">grid_lon&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">grid_lat&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">season&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;JJA&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">var_modifier&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;_JJA&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;span style="color:#000">prof_gridded_SON&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000">analysis&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">average_into_grid_boxes&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">profile&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">grid_lon&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">grid_lat&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">season&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;SON&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">var_modifier&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;_SON&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Here, &lt;code>season&lt;/code> specifies which season to average over and &lt;code>var_modifier&lt;/code> is added to the end of
all variable names in the object&amp;rsquo;s dataset.&lt;/p>
&lt;p>NB with the example data only DJF has any data.&lt;/p>
&lt;p>This function returns a new Gridded object. It also contains a new variable
called &lt;code>grid_N&lt;/code>, which stores how many profiles were averaged into each grid box.
You may want to use this when using or extending the analysis. E.g. use it with plot symbol size&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">&lt;span style="color:#000">temperature&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000">prof_gridded_DJF&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">dataset&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">temperature_DJF&lt;/span>
&lt;span style="color:#000">N&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000">prof_gridded_DJF&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">dataset&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">grid_N_DJF&lt;/span>
&lt;span style="color:#000">plt&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">scatter&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span> &lt;span style="color:#000">lon&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">lat&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">c&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#000">temperature&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">s&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#000">N&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;span style="color:#000">plt&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">title&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#4e9a06">&amp;#39;DJF gridded mean temperature&amp;#39;&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;span style="color:#000">plt&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">colorbar&lt;/span>&lt;span style="color:#000;font-weight:bold">()&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;pre>&lt;code>&amp;lt;matplotlib.colorbar.Colorbar at 0x7ffa948d4d90&amp;gt;
&lt;/code>&lt;/pre>
&lt;p>&lt;img src="https://british-oceanographic-data-centre.github.io/COAsT/COAsT/0._profile_introduction_files/0._profile_introduction_63_1.png" alt="png">&lt;/p></description></item><item><title>Docs: 1. analysis preprocess en4</title><link>https://british-oceanographic-data-centre.github.io/COAsT/docs/examples/notebooks/profile/1._analysis_preprocess_en4/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://british-oceanographic-data-centre.github.io/COAsT/docs/examples/notebooks/profile/1._analysis_preprocess_en4/</guid><description>
&lt;p>Script for processing raw EN4 data prior to analysis.
See docstring of &lt;code>Profile.process_en4()&lt;/code> for more specifics on what it does.&lt;/p>
&lt;p>This script will just load modules, read in raw EN4 data, cut out a geographical box, call the processing routine and write the processed data to file.&lt;/p>
&lt;p>You don&amp;rsquo;t have to do this for each EN4 file individually if you don&amp;rsquo;t want, you can read in multiple using &lt;code>multiple = True&lt;/code> on the creation of the profile object. However, if analysing model data in parallel chunks, you may want to split up the processing into smaller files to make the analysis faster.&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">&lt;span style="color:#204a87;font-weight:bold">import&lt;/span> &lt;span style="color:#000">sys&lt;/span>
&lt;span style="color:#8f5902;font-style:italic"># IF USING A DEVELOPMENT BRANCH OF COAST, ADD THE REPOSITORY TO PATH:&lt;/span>
&lt;span style="color:#8f5902;font-style:italic"># sys.path.append(&amp;#39;&amp;lt;PATH_TO_COAST_REPO&amp;#39;)&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">import&lt;/span> &lt;span style="color:#000">coast&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">import&lt;/span> &lt;span style="color:#000">pandas&lt;/span> &lt;span style="color:#204a87;font-weight:bold">as&lt;/span> &lt;span style="color:#000">pd&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">from&lt;/span> &lt;span style="color:#000">datetime&lt;/span> &lt;span style="color:#204a87;font-weight:bold">import&lt;/span> &lt;span style="color:#000">datetime&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">from&lt;/span> &lt;span style="color:#000">os&lt;/span> &lt;span style="color:#204a87;font-weight:bold">import&lt;/span> &lt;span style="color:#000">path&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">print&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;Modules loaded&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;span style="color:#8f5902;font-style:italic"># File paths - input en4, output processed file and read config file&lt;/span>
&lt;span style="color:#4e9a06">&amp;#34;&amp;#34;&amp;#34;
&lt;/span>&lt;span style="color:#4e9a06">fn_prof = &amp;#34;&amp;lt;PATH_TO_RAW_EN4_DATA_FILE(S)&amp;gt;&amp;#34;
&lt;/span>&lt;span style="color:#4e9a06">fn_out = &amp;#34;&amp;lt;PATH_TO_OUTPUT_LOCATION_FOR_PROCESSED_PROFILES&amp;gt;&amp;#34;
&lt;/span>&lt;span style="color:#4e9a06">fn_cfg_prof = &amp;#34;&amp;lt;PATH_TO_COAST_PROFILE_CONFIG_FILE&amp;gt;&amp;#34;
&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;&amp;#34;&amp;#34;&lt;/span>
&lt;span style="color:#000">fn_out&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;./output.nc&amp;#34;&lt;/span>
&lt;span style="color:#000">fn_prof&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000">path&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">join&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#4e9a06">&amp;#39;./example_files&amp;#39;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;coast_example_en4_201008.nc&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;span style="color:#000">fn_prof&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000">path&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">join&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#4e9a06">&amp;#39;/Users/jeff/Downloads/EN.4.2.2.profiles.g10.2022&amp;#39;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;EN.4.2.2.f.profiles.g10.2022*.nc&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;span style="color:#000">fn_cfg_prof&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000">path&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">join&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#4e9a06">&amp;#39;/Users/jeff/gitHub/COAsT/config&amp;#39;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;example_en4_profiles.json&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;span style="color:#8f5902;font-style:italic"># Some important settings, easier to get at here&lt;/span>
&lt;span style="color:#000">longitude_bounds&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000;font-weight:bold">[&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">-&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">15&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">15&lt;/span>&lt;span style="color:#000;font-weight:bold">]&lt;/span> &lt;span style="color:#8f5902;font-style:italic"># Geo box to cut out from data (match to model)&lt;/span>
&lt;span style="color:#000">latitude_bounds&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000;font-weight:bold">[&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">40&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">65&lt;/span>&lt;span style="color:#000;font-weight:bold">]&lt;/span>
&lt;span style="color:#000">multiple&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#3465a4">True&lt;/span> &lt;span style="color:#8f5902;font-style:italic"># Reading multple files?&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;pre>&lt;code>Modules loaded
&lt;/code>&lt;/pre>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">&lt;span style="color:#000">fn_prof&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;/Users/jeff/GitHub/COAsT/example_files/coast_example_en4_201008.nc&amp;#34;&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">&lt;span style="color:#8f5902;font-style:italic"># Some important settings, easier to get at here&lt;/span>
&lt;span style="color:#000">longitude_bounds&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000;font-weight:bold">[&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">0&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">360&lt;/span>&lt;span style="color:#000;font-weight:bold">]&lt;/span> &lt;span style="color:#8f5902;font-style:italic"># Geo box to cut out from data (match to model)&lt;/span>
&lt;span style="color:#000">latitude_bounds&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000;font-weight:bold">[&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">-&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">15&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">15&lt;/span>&lt;span style="color:#000;font-weight:bold">]&lt;/span>
&lt;span style="color:#000">multiple&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#3465a4">True&lt;/span> &lt;span style="color:#8f5902;font-style:italic"># Reading multple files?&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Create profile object containing data&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">&lt;span style="color:#000">profile&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000">coast&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">Profile&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">config&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#000">fn_cfg_prof&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;span style="color:#000">profile&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">read_en4&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">fn_prof&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">multiple&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#000">multiple&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;pre>&lt;code>/Users/jeff/gitHub/COAsT/config/example_en4_profiles.json
---------------------------------------------------------------------------
FileNotFoundError Traceback (most recent call last)
/tmp/ipykernel_3925/3838477898.py in &amp;lt;cell line: 1&amp;gt;()
----&amp;gt; 1 profile = coast.Profile(config=fn_cfg_prof)
2 profile.read_en4(fn_prof, multiple=multiple)
/usr/share/miniconda/envs/coast/lib/python3.8/site-packages/coast/data/profile.py in __init__(self, dataset, config)
62 debug(f&amp;quot;Creating a new {get_slug(self)}&amp;quot;)
63 self.config = config
---&amp;gt; 64 super().__init__(self.config)
65
66 # If dataset is provided, put inside this object
/usr/share/miniconda/envs/coast/lib/python3.8/site-packages/coast/data/index.py in __init__(self, config)
32 if config:
33 print(config)
---&amp;gt; 34 self.json_config = ConfigParser(config)
35 self.chunks = self.json_config.config.chunks
36 self.dim_mapping = self.json_config.config.dataset.dimension_map
/usr/share/miniconda/envs/coast/lib/python3.8/site-packages/coast/data/config_parser.py in __init__(self, json_path)
16 json_path (Union[Path, str]): path to json config file.
17 &amp;quot;&amp;quot;&amp;quot;
---&amp;gt; 18 with open(json_path, &amp;quot;r&amp;quot;) as j:
19 json_content = json.loads(j.read())
20 conf_type = ConfigTypes(json_content[ConfigKeys.TYPE])
FileNotFoundError: [Errno 2] No such file or directory: '/Users/jeff/gitHub/COAsT/config/example_en4_profiles.json'
&lt;/code>&lt;/pre>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">&lt;span style="color:#000">profile&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">dataset&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;pre>&lt;code>---------------------------------------------------------------------------
NameError Traceback (most recent call last)
/tmp/ipykernel_3925/2681786031.py in &amp;lt;cell line: 1&amp;gt;()
----&amp;gt; 1 profile.dataset
NameError: name 'profile' is not defined
&lt;/code>&lt;/pre>
&lt;p>Get geographical indices to extract.&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">&lt;span style="color:#000">profile&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000">profile&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">subset_indices_lonlat_box&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">longitude_bounds&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">latitude_bounds&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;pre>&lt;code>---------------------------------------------------------------------------
NameError Traceback (most recent call last)
/tmp/ipykernel_3925/2450699116.py in &amp;lt;cell line: 1&amp;gt;()
----&amp;gt; 1 profile = profile.subset_indices_lonlat_box(longitude_bounds, latitude_bounds)
NameError: name 'profile' is not defined
&lt;/code>&lt;/pre>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">&lt;span style="color:#000">profile&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">quick_plot&lt;/span>&lt;span style="color:#000;font-weight:bold">()&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;pre>&lt;code>---------------------------------------------------------------------------
NameError Traceback (most recent call last)
/tmp/ipykernel_3925/1711720463.py in &amp;lt;cell line: 1&amp;gt;()
----&amp;gt; 1 profile.quick_plot()
NameError: name 'profile' is not defined
&lt;/code>&lt;/pre>
&lt;p>Cut out a time slice of the data.&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">&lt;span style="color:#000">profile&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000">profile&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">time_slice&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">date0&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#000">datetime&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">2010&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">1&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">1&lt;/span>&lt;span style="color:#000;font-weight:bold">),&lt;/span> &lt;span style="color:#000">date1&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#000">datetime&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">2010&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">1&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">20&lt;/span>&lt;span style="color:#000;font-weight:bold">))&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;pre>&lt;code>---------------------------------------------------------------------------
NameError Traceback (most recent call last)
/tmp/ipykernel_3925/567752478.py in &amp;lt;cell line: 1&amp;gt;()
----&amp;gt; 1 profile = profile.time_slice(date0=datetime(2010, 1, 1), date1=datetime(2010, 1, 20))
NameError: name 'profile' is not defined
&lt;/code>&lt;/pre>
&lt;p>Process the extracted data into new processed profile.&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">&lt;span style="color:#000">processed_profile&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000">profile&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">process_en4&lt;/span>&lt;span style="color:#000;font-weight:bold">()&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;pre>&lt;code>---------------------------------------------------------------------------
NameError Traceback (most recent call last)
/tmp/ipykernel_3925/2338363098.py in &amp;lt;cell line: 1&amp;gt;()
----&amp;gt; 1 processed_profile = profile.process_en4()
NameError: name 'profile' is not defined
&lt;/code>&lt;/pre>
&lt;p>Sometimes the following line is needed to avoid an error::&lt;br>
&lt;code>processed_profile.dataset[&amp;quot;time&amp;quot;] = (&amp;quot;id_dim&amp;quot;, pd.to_datetime(processed_profile.dataset.time.values))&lt;/code>&lt;/p>
&lt;p>Write processed profiles to file.&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">&lt;span style="color:#000">processed_profile&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">dataset&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">to_netcdf&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">fn_out&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;pre>&lt;code>---------------------------------------------------------------------------
NameError Traceback (most recent call last)
/tmp/ipykernel_3925/1086284925.py in &amp;lt;cell line: 1&amp;gt;()
----&amp;gt; 1 processed_profile.dataset.to_netcdf(fn_out)
NameError: name 'processed_profile' is not defined
&lt;/code>&lt;/pre>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">
&lt;/code>&lt;/pre>&lt;/div></description></item><item><title>Docs: 2. analysis extract and compare</title><link>https://british-oceanographic-data-centre.github.io/COAsT/docs/examples/notebooks/profile/2._analysis_extract_and_compare/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://british-oceanographic-data-centre.github.io/COAsT/docs/examples/notebooks/profile/2._analysis_extract_and_compare/</guid><description>
&lt;p>This script demonstrates how to use the Profile and Gridded objects to extract model profiles and do some comparisons with observed profiles.
It will do a nearest neighbour extraction of model data (with time interpolation of your choice). It will then calculate differences between the model and obs and averaged profiles and errors into surface and bottom layers.&lt;/p>
&lt;p>This script will result in five new files being written:&lt;/p>
&lt;ul>
&lt;li>
&lt;ol>
&lt;li>extracted_profiles: Model data on model levels extracted at obs locs&lt;/li>
&lt;/ol>
&lt;/li>
&lt;li>
&lt;ol start="2">
&lt;li>interpolated_profiles: Model data on ref depth level&lt;/li>
&lt;/ol>
&lt;/li>
&lt;li>
&lt;ol start="3">
&lt;li>interpolated_obs: Obs data on ref depth levels&lt;/li>
&lt;/ol>
&lt;/li>
&lt;li>
&lt;ol start="4">
&lt;li>profile_errors: Differences between interpolated_profiles and _obs&lt;/li>
&lt;/ol>
&lt;/li>
&lt;li>
&lt;ol start="5">
&lt;li>surface_data: Surface data and errors&lt;/li>
&lt;/ol>
&lt;/li>
&lt;li>
&lt;ol start="6">
&lt;li>bottom_data: Bottom data and errors&lt;/li>
&lt;/ol>
&lt;/li>
&lt;/ul>
&lt;p>If you are dealing with very large datasets, you should take a look at the script &lt;code>analysis_extract_and_compare_single_process_tutorial.ipynb&lt;/code>. This script demonstrates a single process that can be used to build a parallel scheme.&lt;/p>
&lt;p>This script can be used with COAsT example data. Please set:&lt;/p>
&lt;p>fn_dom = path.join('./example_files&amp;rsquo;, &amp;ldquo;coast_example_nemo_domain.nc&amp;rdquo;)&lt;br>
fn_dat = path.join('./example_files&amp;rsquo;, &amp;ldquo;coast_example_nemo_data.nc&amp;rdquo;)&lt;br>
dn_out = &amp;ldquo;./example_files&amp;rdquo;&lt;br>
fn_prof = path.join('./example_files&amp;rsquo;, &amp;ldquo;coast_example_EN4_201008.nc&amp;rdquo;)&lt;br>
fn_cfg_nemo = path.join('./config&amp;rsquo;, &amp;ldquo;example_nemo_grid_t.json&amp;rdquo;)&lt;br>
fn_cfg_prof = path.join('./config&amp;rsquo;, &amp;ldquo;example_en4_profiles.json&amp;rdquo;)&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">&lt;span style="color:#204a87;font-weight:bold">import&lt;/span> &lt;span style="color:#000">sys&lt;/span>
&lt;span style="color:#8f5902;font-style:italic"># IF USING A DEVELOPMENT BRANCH OF COAST, ADD THE REPOSITORY TO PATH:&lt;/span>
&lt;span style="color:#8f5902;font-style:italic"># sys.path.append(&amp;#39;&amp;lt;PATH_TO_COAST_REPO&amp;gt;&amp;#39;)&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">import&lt;/span> &lt;span style="color:#000">coast&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">import&lt;/span> &lt;span style="color:#000">xarray&lt;/span> &lt;span style="color:#204a87;font-weight:bold">as&lt;/span> &lt;span style="color:#000">xr&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">import&lt;/span> &lt;span style="color:#000">numpy&lt;/span> &lt;span style="color:#204a87;font-weight:bold">as&lt;/span> &lt;span style="color:#000">np&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">import&lt;/span> &lt;span style="color:#000">datetime&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">from&lt;/span> &lt;span style="color:#000">dateutil.relativedelta&lt;/span> &lt;span style="color:#204a87;font-weight:bold">import&lt;/span> &lt;span style="color:#000">relativedelta&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">import&lt;/span> &lt;span style="color:#000">os.path&lt;/span> &lt;span style="color:#204a87;font-weight:bold">as&lt;/span> &lt;span style="color:#000">path&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">print&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;Modules loaded&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">flush&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#3465a4">True&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;span style="color:#8f5902;font-style:italic"># Name of the run -- used mainly for naming output files&lt;/span>
&lt;span style="color:#000">run_name&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;co7&amp;#34;&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;pre>&lt;code>Modules loaded
&lt;/code>&lt;/pre>
&lt;p>Figure out what the date range is for this analysis process.&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">&lt;span style="color:#000">start_date&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000">datetime&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">datetime&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">2007&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">1&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">1&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;span style="color:#000">end_date&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000">datetime&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">datetime&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">2010&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">12&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">1&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">print&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;Analysis Range: {0} --&amp;gt;&amp;gt; {1}&amp;#34;&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">format&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">start_date&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">strftime&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;%Y%m&lt;/span>&lt;span style="color:#4e9a06">%d&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">),&lt;/span> &lt;span style="color:#000">end_date&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">strftime&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;%Y%m&lt;/span>&lt;span style="color:#4e9a06">%d&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">)),&lt;/span> &lt;span style="color:#000">flush&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#3465a4">True&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;pre>&lt;code>Analysis Range: 20070101 --&amp;gt;&amp;gt; 20101201
&lt;/code>&lt;/pre>
&lt;p>Depth averaging settings.&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">&lt;span style="color:#000">ref_depth&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000">np&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">concatenate&lt;/span>&lt;span style="color:#000;font-weight:bold">((&lt;/span>&lt;span style="color:#000">np&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">arange&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">1&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">100&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">2&lt;/span>&lt;span style="color:#000;font-weight:bold">),&lt;/span> &lt;span style="color:#000">np&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">arange&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">100&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">300&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">5&lt;/span>&lt;span style="color:#000;font-weight:bold">),&lt;/span> &lt;span style="color:#000">np&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">arange&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">300&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">1000&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">50&lt;/span>&lt;span style="color:#000;font-weight:bold">)))&lt;/span>
&lt;span style="color:#000">surface_def&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">5&lt;/span> &lt;span style="color:#8f5902;font-style:italic"># in metres&lt;/span>
&lt;span style="color:#000">bottom_height&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000;font-weight:bold">[&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">10&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">30&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">100&lt;/span>&lt;span style="color:#000;font-weight:bold">]&lt;/span> &lt;span style="color:#8f5902;font-style:italic"># Use bottom heights of 10m, 30m and 100m for...&lt;/span>
&lt;span style="color:#000">bottom_thresh&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000;font-weight:bold">[&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">100&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">500&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">np&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">inf&lt;/span>&lt;span style="color:#000;font-weight:bold">]&lt;/span> &lt;span style="color:#8f5902;font-style:italic"># ...depths less than 100m, 500m and infinite&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>File paths (All) &amp;ndash; use format suggestions.&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">&lt;span style="color:#4e9a06">&amp;#34;&amp;#34;&amp;#34;
&lt;/span>&lt;span style="color:#4e9a06">fn_dom = &amp;#34;&amp;lt;PATH_TO_NEMO_DOMAIN_FILE&amp;gt;&amp;#34;
&lt;/span>&lt;span style="color:#4e9a06">fn_dat = &amp;#34;&amp;lt;PATH_TO_NEMO_DATA_FILE(S)&amp;gt;&amp;#34; # .format(run_name, start_date.year)
&lt;/span>&lt;span style="color:#4e9a06">dn_out = &amp;#34;&amp;lt;PATH_TO_OUTPUT_DIRECTORY&amp;gt;&amp;#34; # .format(run_name)
&lt;/span>&lt;span style="color:#4e9a06">fn_prof = &amp;#34;&amp;lt;PATH_TO_PROCESSED_EN4_DATA&amp;gt;&amp;#34;
&lt;/span>&lt;span style="color:#4e9a06">fn_cfg_nemo = &amp;#34;&amp;lt;PATH_TO_COAST_GRIDDED_CONFIG_FILE&amp;gt;&amp;#34;
&lt;/span>&lt;span style="color:#4e9a06">fn_cfg_prof = &amp;#34;&amp;lt;PATH_TO_CODE_PROFILE_CONFIG_FILE&amp;gt;&amp;#34;
&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;&amp;#34;&amp;#34;&lt;/span>
&lt;span style="color:#000">fn_dom&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000">path&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">join&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#4e9a06">&amp;#39;./example_files&amp;#39;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;coast_example_nemo_domain.nc&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;span style="color:#000">fn_dat&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000">path&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">join&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#4e9a06">&amp;#39;./example_files&amp;#39;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;coast_example_nemo_data.nc&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;span style="color:#000">dn_out&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;./example_files&amp;#34;&lt;/span>
&lt;span style="color:#000">fn_prof&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000">path&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">join&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#4e9a06">&amp;#39;./example_files&amp;#39;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;coast_example_en4_201008.nc&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;span style="color:#000">fn_cfg_nemo&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000">path&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">join&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#4e9a06">&amp;#39;./config&amp;#39;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;example_nemo_grid_t.json&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;span style="color:#000">fn_cfg_prof&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000">path&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">join&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#4e9a06">&amp;#39;./config&amp;#39;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;example_en4_profiles.json&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>CREATE NEMO OBJECT and read in NEMO data. Extract latitude and longitude array.&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">&lt;span style="color:#204a87;font-weight:bold">print&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;Reading model data..&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">flush&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#3465a4">True&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;span style="color:#000">nemo&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000">coast&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">Gridded&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">fn_dat&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">fn_dom&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">multiple&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#3465a4">True&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">config&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#000">fn_cfg_nemo&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;span style="color:#000">lon&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000">nemo&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">dataset&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">longitude&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">values&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">squeeze&lt;/span>&lt;span style="color:#000;font-weight:bold">()&lt;/span>
&lt;span style="color:#000">lat&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000">nemo&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">dataset&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">latitude&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">values&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">squeeze&lt;/span>&lt;span style="color:#000;font-weight:bold">()&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">print&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;NEMO object created&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">flush&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#3465a4">True&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;pre>&lt;code>Reading model data..
NEMO object created
&lt;/code>&lt;/pre>
&lt;p>Extract time indices between start and end dates.&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">&lt;span style="color:#000">nemo&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000">nemo&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">time_slice&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">start_date&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">end_date&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Create a landmask array &amp;ndash; important for obs_operator. We can get a landmask from bottom_level.&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">&lt;span style="color:#000">nemo&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">dataset&lt;/span>&lt;span style="color:#000;font-weight:bold">[&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;landmask&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">]&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000">nemo&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">dataset&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">bottom_level&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">==&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">0&lt;/span>
&lt;span style="color:#000">nemo&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">dataset&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000">nemo&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">dataset&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">rename&lt;/span>&lt;span style="color:#000;font-weight:bold">({&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;depth_0&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;depth&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">})&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">print&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;Landmask calculated&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">flush&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#3465a4">True&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;pre>&lt;code>Landmask calculated
&lt;/code>&lt;/pre>
&lt;p>CREATE EN4 PROFILE OBJECT&lt;br>
If you have not already processed the data:&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">&lt;span style="color:#000">profile&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000">coast&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">Profile&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">config&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#000">fn_cfg_prof&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;span style="color:#000">profile&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">read_en4&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">fn_prof&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;span style="color:#000">profile&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000">profile&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">process_en4&lt;/span>&lt;span style="color:#000;font-weight:bold">()&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;pre>&lt;code>./config/example_en4_profiles.json
&lt;/code>&lt;/pre>
&lt;p>If you have already processed then uncomment:&lt;br>
profile = coast.Profile(dataset = xr.open_dataset(fn_prof, chunks={&amp;ldquo;id_dim&amp;rdquo;: 10000}))&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">&lt;span style="color:#204a87;font-weight:bold">print&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;Profile object created&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">flush&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#3465a4">True&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;pre>&lt;code>Profile object created
&lt;/code>&lt;/pre>
&lt;p>Slice out the Profile times.&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">&lt;span style="color:#000">profile&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000">profile&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">time_slice&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">start_date&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">end_date&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Extract only the variables that we want.&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">&lt;span style="color:#000">nemo&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">dataset&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000">nemo&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">dataset&lt;/span>&lt;span style="color:#000;font-weight:bold">[[&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;temperature&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;bathymetry&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;bottom_level&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;landmask&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">]]&lt;/span>
&lt;span style="color:#000">profile&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">dataset&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000">profile&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">dataset&lt;/span>&lt;span style="color:#000;font-weight:bold">[[&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;potential_temperature&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;practical_salinity&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;depth&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">]]&lt;/span>
&lt;span style="color:#000">profile&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">dataset&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000">profile&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">dataset&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">rename&lt;/span>&lt;span style="color:#000;font-weight:bold">({&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;potential_temperature&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;temperature&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;practical_salinity&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;salinity&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">})&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Create Profile analysis object.&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">&lt;span style="color:#000">profile_analysis&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000">coast&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">ProfileAnalysis&lt;/span>&lt;span style="color:#000;font-weight:bold">()&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Interpolate model to obs using obs_operator().&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">&lt;span style="color:#000">model_profiles&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000">profile&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">obs_operator&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">nemo&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">print&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;Obs_operator successful.&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">flush&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#3465a4">True&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;pre>&lt;code>Obs_operator successful.
&lt;/code>&lt;/pre>
&lt;p>Throw away profiles where the interpolation distance is larger than 5km.&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">&lt;span style="color:#000">keep_indices&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000">model_profiles&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">dataset&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">interp_dist&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">&amp;lt;=&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">5&lt;/span>
&lt;span style="color:#000">model_profiles&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000">model_profiles&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">isel&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">id_dim&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#000">keep_indices&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;span style="color:#000">profile&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000">profile&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">isel&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">id_dim&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#000">keep_indices&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Load the profiles (careful with memory).&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">&lt;span style="color:#000">profile&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">dataset&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">load&lt;/span>&lt;span style="color:#000;font-weight:bold">()&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">print&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;Model interpolated to obs locations&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">flush&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#3465a4">True&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;pre>&lt;code>Model interpolated to obs locations
&lt;/code>&lt;/pre>
&lt;p>Vertical Interpolation of model profiles to obs depths.&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">&lt;span style="color:#000">model_profiles_interp&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000">profile_analysis&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">interpolate_vertical&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">model_profiles&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">profile&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">interp_method&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;linear&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">print&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;Model interpolated to obs depths&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">flush&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#3465a4">True&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;pre>&lt;code>Model interpolated to obs depths
&lt;/code>&lt;/pre>
&lt;p>Vertical interpolation of model profiles to reference depths.&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">&lt;span style="color:#000">model_profiles_interp&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000">profile_analysis&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">interpolate_vertical&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">model_profiles_interp&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">ref_depth&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;span style="color:#000">model_profiles&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">dataset&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">to_netcdf&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>
&lt;span style="color:#000">dn_out&lt;/span>
&lt;span style="color:#ce5c00;font-weight:bold">+&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;extracted_profiles_{0}_{1}_{2}.nc&amp;#34;&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">format&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">run_name&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">start_date&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">strftime&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;%Y%m&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">),&lt;/span> &lt;span style="color:#000">end_date&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">strftime&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;%Y%m&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">))&lt;/span>
&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;span style="color:#000">model_profiles_interp&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">dataset&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">to_netcdf&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>
&lt;span style="color:#000">dn_out&lt;/span>
&lt;span style="color:#ce5c00;font-weight:bold">+&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;interpolated_profiles_{0}_{1}_{2}.nc&amp;#34;&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">format&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">run_name&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">start_date&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">strftime&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;%Y%m&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">),&lt;/span> &lt;span style="color:#000">end_date&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">strftime&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;%Y%m&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">))&lt;/span>
&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">print&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;Model interpolated to ref depths&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">flush&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#3465a4">True&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;pre>&lt;code>Model interpolated to ref depths
&lt;/code>&lt;/pre>
&lt;p>Interpolation of obs profiles to reference depths.&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">&lt;span style="color:#000">profile_interp&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000">profile_analysis&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">interpolate_vertical&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">profile&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">ref_depth&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;span style="color:#000">profile_interp&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">dataset&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">to_netcdf&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>
&lt;span style="color:#000">dn_out&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">+&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;interpolated_obs_{0}_{1}_{2}.nc&amp;#34;&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">format&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">run_name&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">start_date&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">strftime&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;%Y%m&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">),&lt;/span> &lt;span style="color:#000">end_date&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">strftime&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;%Y%m&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">))&lt;/span>
&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">print&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;Obs interpolated to reference depths&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">flush&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#3465a4">True&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;pre>&lt;code>Obs interpolated to reference depths
&lt;/code>&lt;/pre>
&lt;p>Difference between Model and Obs.&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">&lt;span style="color:#000">differences&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000">profile_analysis&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">difference&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">profile_interp&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">model_profiles_interp&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;span style="color:#000">differences&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">dataset&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">load&lt;/span>&lt;span style="color:#000;font-weight:bold">()&lt;/span>
&lt;span style="color:#000">differences&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">dataset&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">to_netcdf&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>
&lt;span style="color:#000">dn_out&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">+&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;profile_errors_{0}_{1}_{2}.nc&amp;#34;&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">format&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">run_name&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">start_date&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">strftime&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;%Y%m&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">),&lt;/span> &lt;span style="color:#000">end_date&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">strftime&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;%Y%m&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">))&lt;/span>
&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">print&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;Calculated errors and written&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">flush&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#3465a4">True&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;pre>&lt;code>Calculated errors and written
&lt;/code>&lt;/pre>
&lt;p>Surface Values and errors.&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">&lt;span style="color:#000">model_profiles_surface&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000">profile_analysis&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">depth_means&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">model_profiles&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000;font-weight:bold">[&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">0&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">surface_def&lt;/span>&lt;span style="color:#000;font-weight:bold">])&lt;/span>
&lt;span style="color:#000">obs_profiles_surface&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000">profile_analysis&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">depth_means&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">profile&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000;font-weight:bold">[&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">0&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">surface_def&lt;/span>&lt;span style="color:#000;font-weight:bold">])&lt;/span>
&lt;span style="color:#000">surface_errors&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000">profile_analysis&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">difference&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">obs_profiles_surface&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">model_profiles_surface&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;span style="color:#000">surface_data&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000">xr&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">merge&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>
&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">surface_errors&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">dataset&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">model_profiles_surface&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">dataset&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">obs_profiles_surface&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">dataset&lt;/span>&lt;span style="color:#000;font-weight:bold">),&lt;/span> &lt;span style="color:#000">compat&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;override&amp;#34;&lt;/span>
&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;span style="color:#000">surface_data&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">to_netcdf&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>
&lt;span style="color:#000">dn_out&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">+&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;surface_data_{0}_{1}_{2}.nc&amp;#34;&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">format&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">run_name&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">start_date&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">strftime&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;%Y%m&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">),&lt;/span> &lt;span style="color:#000">end_date&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">strftime&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;%Y%m&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">))&lt;/span>
&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Bottom values and errors.&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">&lt;span style="color:#000">model_profiles_bottom&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000">profile_analysis&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">bottom_means&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">model_profiles&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">bottom_height&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">bottom_thresh&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;span style="color:#000">obs_bathymetry&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000">model_profiles&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">dataset&lt;/span>&lt;span style="color:#000;font-weight:bold">[&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;bathymetry&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">]&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">values&lt;/span>
&lt;span style="color:#000">profile&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">dataset&lt;/span>&lt;span style="color:#000;font-weight:bold">[&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;bathymetry&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">]&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000;font-weight:bold">([&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;id_dim&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">],&lt;/span> &lt;span style="color:#000">obs_bathymetry&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;span style="color:#000">obs_profiles_bottom&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000">profile_analysis&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">bottom_means&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">profile&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">bottom_height&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">bottom_thresh&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;span style="color:#000">bottom_errors&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000">profile_analysis&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">difference&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">model_profiles_bottom&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">obs_profiles_bottom&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;span style="color:#000">bottom_data&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000">xr&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">merge&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>
&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">bottom_errors&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">dataset&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">model_profiles_bottom&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">dataset&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">obs_profiles_bottom&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">dataset&lt;/span>&lt;span style="color:#000;font-weight:bold">),&lt;/span> &lt;span style="color:#000">compat&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;override&amp;#34;&lt;/span>
&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;span style="color:#000">bottom_data&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">to_netcdf&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>
&lt;span style="color:#000">dn_out&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">+&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;bottom_data_{0}_{1}_{2}.nc&amp;#34;&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">format&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">run_name&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">start_date&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">strftime&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;%Y%m&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">),&lt;/span> &lt;span style="color:#000">end_date&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">strftime&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;%Y%m&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">))&lt;/span>
&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">print&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;Bottom and surface data estimated and written&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">flush&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#3465a4">True&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">print&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;DONE&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">flush&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#3465a4">True&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;pre>&lt;code>Bottom and surface data estimated and written
DONE
&lt;/code>&lt;/pre></description></item><item><title>Docs: 3. analysis extract and compare single process tutorial</title><link>https://british-oceanographic-data-centre.github.io/COAsT/docs/examples/notebooks/profile/3._analysis_extract_and_compare_single_process_tutorial/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://british-oceanographic-data-centre.github.io/COAsT/docs/examples/notebooks/profile/3._analysis_extract_and_compare_single_process_tutorial/</guid><description>
&lt;p>This runs the same analysis as &lt;code>analysis_extract_and_compare.py&lt;/code> however it
does so in time blocks (multiples of months) to avoid memory problems, and can not be run with the &lt;code>example_files&lt;/code>.
At the top of this file are two variables called min_date and end_date
and freq_monthgs. These are the dates that this script will run an analysis
between and the monthly multiples to run per block. You must pass an index
to this file at the command line, telling the script which month index to run.&lt;/p>
&lt;p>For example&amp;hellip; If the dates are between 20040101 and 20050101, then an index
of 0 will run for the period 20040101 -&amp;gt; 20040201. An index of 4 will run
for the period 20040301 -&amp;gt; 20040401.&lt;/p>
&lt;p>This script exists to be used as part of a parallel scheme on a platform like
JASMIN. For example, using a command interface such as jug. This script
should be run on each process, being passed just a single index.&lt;/p>
&lt;p>If uneditted, this script will output five files PER PROCESS to the output
directory specified by dn_out:&lt;/p>
&lt;ol>
&lt;li>extracted_profiles: Model data on model levels extracted at obs locs&lt;/li>
&lt;li>interpolated_profiles: Model data on ref depth level&lt;/li>
&lt;li>interpolated_obs: Obs data on ref depth levels&lt;/li>
&lt;li>profile_errors: Differences between interpolated_profiles and _obs&lt;/li>
&lt;li>surface_data: Surface data and errors&lt;/li>
&lt;li>bottom_data: Bottom data and errors&lt;/li>
&lt;/ol>
&lt;p>The files can then be concatenated and given to an averaging routine such
as &lt;code>analysis_mask_means.py&lt;/code> or &lt;code>analysis_average_into_grid.py&lt;/code>.&lt;/p>
&lt;h3 id="import-relevant-packages">Import relevant packages&lt;/h3>
&lt;pre>&lt;code>import sys
import coast
import xarray as xr
import numpy as np
import datetime
from dateutil.relativedelta import relativedelta
&lt;/code>&lt;/pre>&lt;h3 id="define-settings">Define settings&lt;/h3>
&lt;pre>&lt;code>index = 1
# Name of the run -- used mainly for naming output files
run_name = &amp;quot;co7&amp;quot;
# Start and end dates for the analysis. The script will cut down model
# and EN4 data to be witin this range.
min_date = datetime.datetime(2004, 1, 1)
freq_months = 12
end_date = datetime.datetime(2004, 3, 1)
&lt;/code>&lt;/pre>&lt;h3 id="figure-out-what-the-date-range-is-for-this-analysis-process">Figure out what the date range is for this analysis process&lt;/h3>
&lt;pre>&lt;code>start_date = min_date + relativedelta(months=int(index * freq_months))
end_date = start_date + relativedelta(months=int(freq_months))
print(&amp;quot;Analysis Range: {0} --&amp;gt;&amp;gt; {1}&amp;quot;.format(start_date.strftime(&amp;quot;%Y%m%d&amp;quot;), end_date.strftime(&amp;quot;%Y%m%d&amp;quot;)), flush=True)
&lt;/code>&lt;/pre>&lt;h3 id="set-depth-averaging-settings">Set depth averaging settings&lt;/h3>
&lt;pre>&lt;code>ref_depth = np.concatenate((np.arange(1, 100, 2), np.arange(100, 300, 5), np.arange(300, 1000, 50)))
surface_def = 5 # in metres
bottom_height = [10, 30, 100] # Use bottom heights of 10m, 30m and 100m for...
bottom_thresh = [100, 500, np.inf] # ...depths less than 100m, 500m and infinite
&lt;/code>&lt;/pre>&lt;h3 id="set-file-paths">Set file paths&lt;/h3>
&lt;pre>&lt;code># define some file paths
fn_dom = &amp;quot;&amp;lt;PATH_TO_NEMO_DOMAIN_FILE&amp;gt;&amp;quot;
fn_dat = &amp;quot;&amp;lt;PATH_TO_NEMO_DATA_FILE(S)&amp;gt;&amp;quot; # .format(run_name, start_date.year)
dn_out = &amp;quot;&amp;lt;PATH_TO_OUTPUT_DIRECTORY&amp;gt;&amp;quot; # .format(run_name)
fn_prof = &amp;quot;&amp;lt;PATH_TO_PROCESSED_EN4_DATA&amp;gt;&amp;quot;
fn_cfg_nemo = &amp;quot;&amp;lt;PATH_TO_COAST_GRIDDED_CONFIG_FILE&amp;gt;&amp;quot;
fn_cfg_prof = &amp;quot;&amp;lt;PATH_TO_CODE_PROFILE_CONFIG_FILE&amp;gt;&amp;quot;
&lt;/code>&lt;/pre>&lt;h3 id="create-nemo-object-and-read-in-nemo-data">Create NEMO object and read in NEMO data.&lt;/h3>
&lt;pre>&lt;code>nemo = coast.Gridded(fn_dat, fn_dom, multiple=True, config=fn_cfg_nemo)
&lt;/code>&lt;/pre>&lt;h3 id="extract-latitude-and-longitude">Extract latitude and longitude&lt;/h3>
&lt;pre>&lt;code>lat = nemo.dataset.latitude.values.squeeze()
lon = nemo.dataset.longitude.values.squeeze()
&lt;/code>&lt;/pre>&lt;h3 id="extract-time-indices-between-start-and-end-dates">Extract time indices between start and end dates&lt;/h3>
&lt;pre>&lt;code>nemo = nemo.time_slice(start_date, end_date)
&lt;/code>&lt;/pre>&lt;pre>&lt;code>nemo.dataset.temperature.values
&lt;/code>&lt;/pre>&lt;h3 id="create-a-landmask-array">Create a landmask array&lt;/h3>
&lt;p>This is important for obs_operator We can get a landmask from bottom_level.&lt;/p>
&lt;pre>&lt;code>nemo.dataset[&amp;quot;landmask&amp;quot;] = nemo.dataset.bottom_level == 0
nemo.dataset = nemo.dataset.rename({&amp;quot;depth_0&amp;quot;: &amp;quot;depth&amp;quot;})
print(&amp;quot;Landmask calculated&amp;quot;, flush=True)
&lt;/code>&lt;/pre>&lt;h3 id="create-en4-profile-object">Create EN4 Profile object&lt;/h3>
&lt;pre>&lt;code># CREATE EN4 PROFILE OBJECT containing processed data. We just need to
# create a Profile object and place the data straight into its dataset
profile = coast.Profile()
profile.dataset = xr.open_dataset(fn_prof, chunks={&amp;quot;id_dim&amp;quot;: 10000})
profile = profile.time_slice(start_date, end_date)
print(&amp;quot;Profile object created&amp;quot;, flush=True)
&lt;/code>&lt;/pre>&lt;h3 id="extract-only-the-variables-that-we-want">Extract only the variables that we want&lt;/h3>
&lt;pre>&lt;code>nemo.dataset = nemo.dataset[[&amp;quot;temperature&amp;quot;, &amp;quot;salinity&amp;quot;, &amp;quot;bathymetry&amp;quot;, &amp;quot;bottom_level&amp;quot;, &amp;quot;landmask&amp;quot;]]
profile.dataset = profile.dataset[[&amp;quot;potential_temperature&amp;quot;, &amp;quot;practical_salinity&amp;quot;, &amp;quot;depth&amp;quot;]]
profile.dataset = profile.dataset.rename({&amp;quot;potential_temperature&amp;quot;: &amp;quot;temperature&amp;quot;, &amp;quot;practical_salinity&amp;quot;: &amp;quot;salinity&amp;quot;})
&lt;/code>&lt;/pre>&lt;h3 id="create-profile-analysis-object">Create Profile analysis object&lt;/h3>
&lt;pre>&lt;code>profile_analysis = coast.ProfileAnalysis()
&lt;/code>&lt;/pre>&lt;h3 id="interpolate-model-to-obs-using-obs_operator">Interpolate model to obs using obs_operator()&lt;/h3>
&lt;pre>&lt;code>model_profiles = profile.obs_operator(nemo)
print(&amp;quot;Obs_operator successful.&amp;quot;, flush=True)
&lt;/code>&lt;/pre>&lt;h3 id="throw-away-profiles-where-the-interpolation-distance-is-larger-than-5km">Throw away profiles where the interpolation distance is larger than 5km.&lt;/h3>
&lt;pre>&lt;code>keep_indices = model_profiles.dataset.interp_dist &amp;lt;= 5
model_profiles = model_profiles.isel(profile=keep_indices)
profile = profile.isel(profile=keep_indices)
&lt;/code>&lt;/pre>&lt;h3 id="load-the-profiles-careful-with-memory">Load the profiles (careful with memory)&lt;/h3>
&lt;pre>&lt;code>profile.dataset.load()
print(&amp;quot;Model interpolated to obs locations&amp;quot;, flush=True)
&lt;/code>&lt;/pre>&lt;h3 id="vertical-interpolation-of-model-profiles-to-obs-depths">Vertical Interpolation of model profiles to obs depths&lt;/h3>
&lt;pre>&lt;code>model_profiles_interp = profile_analysis.interpolate_vertical(model_profiles, profile, interp_method=&amp;quot;linear&amp;quot;)
print(&amp;quot;Model interpolated to obs depths&amp;quot;, flush=True)
&lt;/code>&lt;/pre>&lt;h3 id="vertical-interpolation-of-model-profiles-to-reference-depths">Vertical interpolation of model profiles to reference depths&lt;/h3>
&lt;pre>&lt;code>model_profiles_interp = profile_analysis.interpolate_vertical(model_profiles_interp, ref_depth)
model_profiles.dataset.to_netcdf(
dn_out
+ &amp;quot;extracted_profiles_{0}_{1}_{2}.nc&amp;quot;.format(run_name, start_date.strftime(&amp;quot;%Y%m&amp;quot;), end_date.strftime(&amp;quot;%Y%m&amp;quot;))
)
model_profiles_interp.dataset.to_netcdf(
dn_out
+ &amp;quot;interpolated_profiles_{0}_{1}_{2}.nc&amp;quot;.format(run_name, start_date.strftime(&amp;quot;%Y%m&amp;quot;), end_date.strftime(&amp;quot;%Y%m&amp;quot;))
)
print(&amp;quot;Model interpolated to ref depths&amp;quot;, flush=True)
&lt;/code>&lt;/pre>&lt;h3 id="interpolation-of-obs-profiles-to-reference-depths">Interpolation of obs profiles to reference depths&lt;/h3>
&lt;pre>&lt;code>profile_interp = profile_analysis.interpolate_vertical(profile, ref_depth)
profile_interp.dataset.to_netcdf(
dn_out + &amp;quot;interpolated_obs_{0}_{1}_{2}.nc&amp;quot;.format(run_name, start_date.strftime(&amp;quot;%Y%m&amp;quot;), end_date.strftime(&amp;quot;%Y%m&amp;quot;))
)
print(&amp;quot;Obs interpolated to reference depths&amp;quot;, flush=True)
&lt;/code>&lt;/pre>&lt;h3 id="get-difference-between-model-and-obs">Get difference between Model and Obs&lt;/h3>
&lt;pre>&lt;code>differences = profile_analysis.difference(profile_interp, model_profiles_interp)
differences.dataset.load()
differences.dataset.to_netcdf(
dn_out + &amp;quot;profile_errors_{0}_{1}_{2}.nc&amp;quot;.format(run_name, start_date.strftime(&amp;quot;%Y%m&amp;quot;), end_date.strftime(&amp;quot;%Y%m&amp;quot;))
)
print(&amp;quot;Calculated errors and written&amp;quot;, flush=True)
&lt;/code>&lt;/pre>&lt;h3 id="get-surface-values-and-errors">Get surface values and errors&lt;/h3>
&lt;pre>&lt;code>model_profiles_surface = profile_analysis.depth_means(model_profiles, [0, surface_def])
obs_profiles_surface = profile_analysis.depth_means(profile, [0, surface_def])
surface_errors = profile_analysis.difference(obs_profiles_surface, model_profiles_surface)
surface_data = xr.merge(
(surface_errors.dataset, model_profiles_surface.dataset, obs_profiles_surface.dataset), compat=&amp;quot;override&amp;quot;
)
surface_data.to_netcdf(
dn_out + &amp;quot;surface_data_{0}_{1}_{2}.nc&amp;quot;.format(run_name, start_date.strftime(&amp;quot;%Y%m&amp;quot;), end_date.strftime(&amp;quot;%Y%m&amp;quot;))
)
&lt;/code>&lt;/pre>&lt;h3 id="get-bottom-values-and-errors">Get bottom values and errors&lt;/h3>
&lt;pre>&lt;code>model_profiles_bottom = profile_analysis.bottom_means(model_profiles, bottom_height, bottom_thresh)
obs_bathymetry = model_profiles.dataset[&amp;quot;bathymetry&amp;quot;].values
profile.dataset[&amp;quot;bathymetry&amp;quot;] = ([&amp;quot;id_dim&amp;quot;], obs_bathymetry)
obs_profiles_bottom = profile_analysis.bottom_means(profile, bottom_height, bottom_thresh)
bottom_errors = profile_analysis.difference(model_profiles_bottom, obs_profiles_bottom)
bottom_data = xr.merge(
(bottom_errors.dataset, model_profiles_bottom.dataset, obs_profiles_bottom.dataset), compat=&amp;quot;override&amp;quot;
)
bottom_data.to_netcdf(
dn_out + &amp;quot;bottom_data_{0}_{1}_{2}.nc&amp;quot;.format(run_name, start_date.strftime(&amp;quot;%Y%m&amp;quot;), end_date.strftime(&amp;quot;%Y%m&amp;quot;))
)
&lt;/code>&lt;/pre></description></item><item><title>Docs: 4. analysis mask means tutorial</title><link>https://british-oceanographic-data-centre.github.io/COAsT/docs/examples/notebooks/profile/4._analysis_mask_means_tutorial/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://british-oceanographic-data-centre.github.io/COAsT/docs/examples/notebooks/profile/4._analysis_mask_means_tutorial/</guid><description>
&lt;p>Tutorial to calculate mask means (regional means) of variables within a Profile object.&lt;/p>
&lt;p>Provide paths to four files:&lt;/p>
&lt;pre>&lt;code>fn_dom : NEMO domain file defining mask lon/lat.
fn_cfg_nemo : NEMO config file.
fn_profile : Path to netCDF containing profile data.
fn_out : Path to netCDF output file.
&lt;/code>&lt;/pre>
&lt;p>You can use this script with example files by setting:&lt;/p>
&lt;pre>&lt;code>fn_dom = path.join('./example_files', &amp;quot;coast_example_nemo_domain.nc&amp;quot;)
fn_prof = path.join('./example_files', &amp;quot;coast_example_en4_201008.nc&amp;quot;)
fn_cfg_nemo = path.join('./config', &amp;quot;example_nemo_grid_t.json&amp;quot;)
fn_cfg_prof = path.join('./config', &amp;quot;example_en4_profiles.json&amp;quot;)
&lt;/code>&lt;/pre>
&lt;h3 id="import-relevant-packages">Import relevant packages&lt;/h3>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">&lt;span style="color:#204a87;font-weight:bold">import&lt;/span> &lt;span style="color:#000">coast&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">import&lt;/span> &lt;span style="color:#000">numpy&lt;/span> &lt;span style="color:#204a87;font-weight:bold">as&lt;/span> &lt;span style="color:#000">np&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">from&lt;/span> &lt;span style="color:#000">os&lt;/span> &lt;span style="color:#204a87;font-weight:bold">import&lt;/span> &lt;span style="color:#000">path&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="set-filepaths-to-data-and-configuration">Set filepaths to data and configuration&lt;/h3>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">&lt;span style="color:#4e9a06">&amp;#34;&amp;#34;&amp;#34;
&lt;/span>&lt;span style="color:#4e9a06">fn_dom = &amp;#34;&amp;lt;PATH_TO_NEMO_DOMAIN_FILE&amp;gt;&amp;#34;
&lt;/span>&lt;span style="color:#4e9a06">fn_cfg_nemo = &amp;#34;&amp;lt;PATH_TO_COAST_GRIDDED_CONFIG_FILE&amp;gt;&amp;#34;
&lt;/span>&lt;span style="color:#4e9a06">fn_cfg_prof = &amp;#34;&amp;lt;PATH_TO_COAST_PROFILE_CONFIG_FILE&amp;gt;&amp;#34;
&lt;/span>&lt;span style="color:#4e9a06">fn_prof = &amp;#34;&amp;lt;PATH_TO_COAST_PROFILE_NETCDF&amp;gt;&amp;#34;
&lt;/span>&lt;span style="color:#4e9a06">fn_out = &amp;#34;&amp;lt;PATH_TO_OUTPUT_FILE&amp;gt;&amp;#34;
&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;&amp;#34;&amp;#34;&lt;/span>
&lt;span style="color:#000">fn_out&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;./output.nc&amp;#34;&lt;/span>
&lt;span style="color:#000">fn_dom&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000">path&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">join&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#4e9a06">&amp;#39;./example_files&amp;#39;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;coast_example_nemo_domain.nc&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;span style="color:#000">fn_prof&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000">path&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">join&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#4e9a06">&amp;#39;./example_files&amp;#39;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;coast_example_en4_201008.nc&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;span style="color:#000">fn_cfg_nemo&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000">path&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">join&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#4e9a06">&amp;#39;./config&amp;#39;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;example_nemo_grid_t.json&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;span style="color:#000">fn_cfg_prof&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000">path&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">join&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#4e9a06">&amp;#39;./config&amp;#39;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;example_en4_profiles.json&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="create-nemo-object-and-read-in-nemo-data">Create NEMO object and read in NEMO data&lt;/h3>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">&lt;span style="color:#000">nemo&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000">coast&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">Gridded&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">fn_domain&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#000">fn_dom&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">multiple&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#3465a4">True&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">config&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#000">fn_cfg_nemo&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="extract-latitude-and-longitude-array">Extract latitude and longitude array&lt;/h3>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">&lt;span style="color:#000">lon&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000">nemo&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">dataset&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">longitude&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">values&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">squeeze&lt;/span>&lt;span style="color:#000;font-weight:bold">()&lt;/span>
&lt;span style="color:#000">lat&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000">nemo&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">dataset&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">latitude&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">values&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">squeeze&lt;/span>&lt;span style="color:#000;font-weight:bold">()&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="create-analysis-object-and-mask-maker-object">Create analysis object and mask maker object&lt;/h3>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">&lt;span style="color:#000">profile_analysis&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000">coast&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">ProfileAnalysis&lt;/span>&lt;span style="color:#000;font-weight:bold">()&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="make-profile-object-and-read-data">Make Profile object and read data&lt;/h3>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">&lt;span style="color:#000">profile&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000">coast&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">Profile&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">config&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#000">fn_cfg_prof&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;span style="color:#000">profile&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">read_en4&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">fn_prof&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;pre>&lt;code>./config/example_en4_profiles.json
&lt;/code>&lt;/pre>
&lt;h3 id="make-maskmaker-object-and-define-regional-masks">Make MaskMaker object and define Regional Masks&lt;/h3>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">&lt;span style="color:#8f5902;font-style:italic"># Make MaskMaker object&lt;/span>
&lt;span style="color:#000">mm&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000">coast&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">MaskMaker&lt;/span>&lt;span style="color:#000;font-weight:bold">()&lt;/span>
&lt;span style="color:#8f5902;font-style:italic"># Define Regional Masks&lt;/span>
&lt;span style="color:#000">regional_masks&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000;font-weight:bold">[]&lt;/span>
&lt;span style="color:#000">bath&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000">nemo&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">dataset&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">bathymetry&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">values&lt;/span>
&lt;span style="color:#000">regional_masks&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">append&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">np&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">ones&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">lon&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">shape&lt;/span>&lt;span style="color:#000;font-weight:bold">))&lt;/span>
&lt;span style="color:#000">regional_masks&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">append&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">mm&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">region_def_nws_north_sea&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">lon&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">lat&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">bath&lt;/span>&lt;span style="color:#000;font-weight:bold">))&lt;/span>
&lt;span style="color:#000">regional_masks&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">append&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">mm&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">region_def_nws_outer_shelf&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">lon&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">lat&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">bath&lt;/span>&lt;span style="color:#000;font-weight:bold">))&lt;/span>
&lt;span style="color:#000">regional_masks&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">append&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">mm&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">region_def_nws_english_channel&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">lon&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">lat&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">bath&lt;/span>&lt;span style="color:#000;font-weight:bold">))&lt;/span>
&lt;span style="color:#000">regional_masks&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">append&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">mm&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">region_def_nws_norwegian_trench&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">lon&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">lat&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">bath&lt;/span>&lt;span style="color:#000;font-weight:bold">))&lt;/span>
&lt;span style="color:#000">regional_masks&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">append&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">mm&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">region_def_kattegat&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">lon&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">lat&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">bath&lt;/span>&lt;span style="color:#000;font-weight:bold">))&lt;/span>
&lt;span style="color:#000">regional_masks&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">append&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">mm&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">region_def_south_north_sea&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">lon&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">lat&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">bath&lt;/span>&lt;span style="color:#000;font-weight:bold">))&lt;/span>
&lt;span style="color:#000">off_shelf&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000">mm&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">region_def_off_shelf&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">lon&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">lat&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">bath&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;span style="color:#000">off_shelf&lt;/span>&lt;span style="color:#000;font-weight:bold">[&lt;/span>&lt;span style="color:#000">regional_masks&lt;/span>&lt;span style="color:#000;font-weight:bold">[&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">3&lt;/span>&lt;span style="color:#000;font-weight:bold">]&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">astype&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#204a87">bool&lt;/span>&lt;span style="color:#000;font-weight:bold">)]&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">0&lt;/span>
&lt;span style="color:#000">off_shelf&lt;/span>&lt;span style="color:#000;font-weight:bold">[&lt;/span>&lt;span style="color:#000">regional_masks&lt;/span>&lt;span style="color:#000;font-weight:bold">[&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">4&lt;/span>&lt;span style="color:#000;font-weight:bold">]&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">astype&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#204a87">bool&lt;/span>&lt;span style="color:#000;font-weight:bold">)]&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">0&lt;/span>
&lt;span style="color:#000">regional_masks&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">append&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">off_shelf&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;span style="color:#000">regional_masks&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">append&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">mm&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">region_def_irish_sea&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">lon&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">lat&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">bath&lt;/span>&lt;span style="color:#000;font-weight:bold">))&lt;/span>
&lt;span style="color:#000">region_names&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000;font-weight:bold">[&lt;/span>
&lt;span style="color:#4e9a06">&amp;#34;whole_domain&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>
&lt;span style="color:#4e9a06">&amp;#34;north_sea&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>
&lt;span style="color:#4e9a06">&amp;#34;outer_shelf&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>
&lt;span style="color:#4e9a06">&amp;#34;eng_channel&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>
&lt;span style="color:#4e9a06">&amp;#34;nor_trench&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>
&lt;span style="color:#4e9a06">&amp;#34;kattegat&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>
&lt;span style="color:#4e9a06">&amp;#34;southern_north_sea&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>
&lt;span style="color:#4e9a06">&amp;#34;irish_sea&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>
&lt;span style="color:#4e9a06">&amp;#34;off_shelf&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>
&lt;span style="color:#000;font-weight:bold">]&lt;/span>
&lt;span style="color:#000">mask_list&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000">mm&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">make_mask_dataset&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">lon&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">lat&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">regional_masks&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;span style="color:#000">mask_indices&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000">profile_analysis&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">determine_mask_indices&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">profile&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">mask_list&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="do-mask-averaging">Do mask averaging&lt;/h3>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">&lt;span style="color:#000">mask_means&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000">profile_analysis&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">mask_means&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">profile&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">mask_indices&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="save-mask-dataset-to-file">Save mask dataset to file&lt;/h3>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">&lt;span style="color:#000">mask_means&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">to_netcdf&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">fn_out&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;/code>&lt;/pre>&lt;/div></description></item><item><title>Docs: 5. analysis average into grid boxes</title><link>https://british-oceanographic-data-centre.github.io/COAsT/docs/examples/notebooks/profile/5._analysis_average_into_grid_boxes/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://british-oceanographic-data-centre.github.io/COAsT/docs/examples/notebooks/profile/5._analysis_average_into_grid_boxes/</guid><description>
&lt;p>Script for showing use of &lt;code>Profile.average_into_grid_boxes()&lt;/code>. This routines
takes all data in a Profile obejct and averages it into lat/lon grid boxes.&lt;/p>
&lt;p>This script can be used for comparing observed and modelled climatologies.
It should be run AFTER the nearest profiles have been extracted from the model
data, such as shown in &lt;code>analysis_extract_and_compare.py&lt;/code>.&lt;/p>
&lt;p>Input and output files should be provided as a list. If you only have
one input file, then just enclose the string in [].&lt;/p>
&lt;h3 id="relevant-imports-and-filepath-configuration">Relevant imports and filepath configuration&lt;/h3>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">&lt;span style="color:#204a87;font-weight:bold">import&lt;/span> &lt;span style="color:#000">coast&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">import&lt;/span> &lt;span style="color:#000">numpy&lt;/span> &lt;span style="color:#204a87;font-weight:bold">as&lt;/span> &lt;span style="color:#000">np&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">import&lt;/span> &lt;span style="color:#000">xarray&lt;/span> &lt;span style="color:#204a87;font-weight:bold">as&lt;/span> &lt;span style="color:#000">xr&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">import&lt;/span> &lt;span style="color:#000">os&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">from&lt;/span> &lt;span style="color:#000">os&lt;/span> &lt;span style="color:#204a87;font-weight:bold">import&lt;/span> &lt;span style="color:#000">path&lt;/span>
&lt;span style="color:#8f5902;font-style:italic"># List of input files&lt;/span>
&lt;span style="color:#000">fn_prof&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000">path&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">join&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#4e9a06">&amp;#39;./example_files&amp;#39;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;coast_example_en4_201008.nc&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;span style="color:#000">fn_cfg_prof&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000">path&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">join&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#4e9a06">&amp;#39;./config&amp;#39;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;example_en4_profiles.json&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span> &lt;span style="color:#8f5902;font-style:italic"># If needed&lt;/span>
&lt;span style="color:#000">fn_out&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000">path&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">join&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#4e9a06">&amp;#39;./example_files&amp;#39;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#4e9a06">&amp;#39;mask_mean.nc&amp;#39;&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span> &lt;span style="color:#8f5902;font-style:italic"># Names of output files (coresponding to fn_in_list), include &amp;#34;.nc&amp;#34;&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Define longitude and latitude grid.&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">&lt;span style="color:#000">grid_lon&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000">np&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">arange&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">-&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">15&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">15&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">0.5&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;span style="color:#000">grid_lat&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000">np&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">arange&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">45&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">65&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">0.5&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="load-the-data">Load the data&lt;/h3>
&lt;p>Load in data for averaging (e.g. surface data).&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">&lt;span style="color:#000">prof_data&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000">coast&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">Profile&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">config&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#000">fn_cfg_prof&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;span style="color:#000">prof_data&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">read_en4&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">fn_prof&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;span style="color:#000">profile_analysis&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000">coast&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">ProfileAnalysis&lt;/span>&lt;span style="color:#000;font-weight:bold">()&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;pre>&lt;code>./config/example_en4_profiles.json
&lt;/code>&lt;/pre>
&lt;p>Take just the data we want so it is faster&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">&lt;span style="color:#000">prof_data&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">dataset&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000">prof_data&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">dataset&lt;/span>&lt;span style="color:#000;font-weight:bold">[[&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;temperature&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;practical_salinity&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">]]&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="process-merge-and-save">Process, merge and save&lt;/h3>
&lt;p>Average all data across all seasons.&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">&lt;span style="color:#000">prof_gridded&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000">profile_analysis&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">average_into_grid_boxes&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">prof_data&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">grid_lon&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">grid_lat&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Average data for each season.&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">&lt;span style="color:#000">prof_gridded_DJF&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000">profile_analysis&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">average_into_grid_boxes&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>
&lt;span style="color:#000">prof_data&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">grid_lon&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">grid_lat&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">season&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;DJF&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">var_modifier&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;_DJF&amp;#34;&lt;/span>
&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;span style="color:#000">prof_gridded_MAM&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000">profile_analysis&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">average_into_grid_boxes&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>
&lt;span style="color:#000">prof_data&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">grid_lon&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">grid_lat&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">season&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;MAM&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">var_modifier&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;_MAM&amp;#34;&lt;/span>
&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;span style="color:#000">prof_gridded_JJA&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000">profile_analysis&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">average_into_grid_boxes&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>
&lt;span style="color:#000">prof_data&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">grid_lon&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">grid_lat&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">season&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;JJA&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">var_modifier&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;_JJA&amp;#34;&lt;/span>
&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;span style="color:#000">prof_gridded_SON&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000">profile_analysis&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">average_into_grid_boxes&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>
&lt;span style="color:#000">prof_data&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">grid_lon&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">grid_lat&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">season&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;SON&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">var_modifier&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;_SON&amp;#34;&lt;/span>
&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Merge together.&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">&lt;span style="color:#000">ds_prof_gridded&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000">xr&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">merge&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>
&lt;span style="color:#000;font-weight:bold">(&lt;/span>
&lt;span style="color:#000">prof_gridded&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">dataset&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>
&lt;span style="color:#000">prof_gridded_DJF&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">dataset&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>
&lt;span style="color:#000">prof_gridded_MAM&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">dataset&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>
&lt;span style="color:#000">prof_gridded_JJA&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">dataset&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>
&lt;span style="color:#000">prof_gridded_SON&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">dataset&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>
&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Save to file.&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">&lt;span style="color:#000">ds_prof_gridded&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">to_netcdf&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">fn_out&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">
&lt;/code>&lt;/pre>&lt;/div></description></item><item><title>Docs: Altimetry tutorial</title><link>https://british-oceanographic-data-centre.github.io/COAsT/docs/examples/notebooks/altimetry/altimetry_tutorial/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://british-oceanographic-data-centre.github.io/COAsT/docs/examples/notebooks/altimetry/altimetry_tutorial/</guid><description>
&lt;p>This is a demonstration script for using the Altimetry object in the COAsT package. This object has strict data formatting requirements, which are outlined in &lt;code>altimetry.py&lt;/code>.&lt;/p>
&lt;h3 id="relevant-imports-and-filepath-configuration">Relevant imports and filepath configuration&lt;/h3>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">&lt;span style="color:#8f5902;font-style:italic"># Begin by importing coast and other packages&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">import&lt;/span> &lt;span style="color:#000">coast&lt;/span>
&lt;span style="color:#000">root&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;./&amp;#34;&lt;/span>
&lt;span style="color:#8f5902;font-style:italic"># And by defining some file paths&lt;/span>
&lt;span style="color:#000">dn_files&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000">root&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">+&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;./example_files/&amp;#34;&lt;/span>
&lt;span style="color:#000">fn_nemo_dat&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000">dn_files&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">+&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;coast_example_nemo_data.nc&amp;#34;&lt;/span>
&lt;span style="color:#000">fn_nemo_dom&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000">dn_files&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">+&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;coast_example_nemo_domain.nc&amp;#34;&lt;/span>
&lt;span style="color:#000">fn_nemo_config&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000">root&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">+&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;./config/example_nemo_grid_t.json&amp;#34;&lt;/span>
&lt;span style="color:#000">fn_altimetry&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000">dn_files&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">+&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;coast_example_altimetry_data.nc&amp;#34;&lt;/span>
&lt;span style="color:#000">fn_altimetry_config&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000">root&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">+&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;./config/example_altimetry.json&amp;#34;&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="load-data">Load data&lt;/h3>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">&lt;span style="color:#8f5902;font-style:italic"># We need to load in a NEMO object for doing NEMO things.&lt;/span>
&lt;span style="color:#000">nemo&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000">coast&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">Gridded&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">fn_nemo_dat&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">fn_nemo_dom&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">config&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#000">fn_nemo_config&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;span style="color:#8f5902;font-style:italic"># And now we can load in our Altimetry data. By default, Altimetry is set up&lt;/span>
&lt;span style="color:#8f5902;font-style:italic"># to read in CMEMS netCDF files. However, if no path is supplied, then the&lt;/span>
&lt;span style="color:#8f5902;font-style:italic"># object&amp;#39;s dataset will be initialised as None. Custom data can then be loaded&lt;/span>
&lt;span style="color:#8f5902;font-style:italic"># if desired, as long as it follows the data formatting for Altimetry.&lt;/span>
&lt;span style="color:#8f5902;font-style:italic"># altimetry = coast.Altimetry(fn_altimetry)&lt;/span>
&lt;span style="color:#000">altimetry&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000">coast&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">Altimetry&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">fn_altimetry&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">config&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#000">fn_altimetry_config&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;pre>&lt;code>././config/example_altimetry.json
Altimetry object at 0x55d413422fc0 initialised
&lt;/code>&lt;/pre>
&lt;h3 id="subsetting">Subsetting&lt;/h3>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">&lt;span style="color:#8f5902;font-style:italic"># Before going any further, lets just cut out the bit of the altimetry that&lt;/span>
&lt;span style="color:#8f5902;font-style:italic"># is over the model domain. This can be done using `subset_indices_lonlat_box`&lt;/span>
&lt;span style="color:#8f5902;font-style:italic"># to find relevant indices and then `isel` to extract them. The data here is then also&lt;/span>
&lt;span style="color:#8f5902;font-style:italic"># also thinned slightly.&lt;/span>
&lt;span style="color:#000">ind&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000">altimetry&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">subset_indices_lonlat_box&lt;/span>&lt;span style="color:#000;font-weight:bold">([&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">-&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">10&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">10&lt;/span>&lt;span style="color:#000;font-weight:bold">],&lt;/span> &lt;span style="color:#000;font-weight:bold">[&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">45&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">60&lt;/span>&lt;span style="color:#000;font-weight:bold">])&lt;/span>
&lt;span style="color:#000">ind&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000">ind&lt;/span>&lt;span style="color:#000;font-weight:bold">[::&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">4&lt;/span>&lt;span style="color:#000;font-weight:bold">]&lt;/span>
&lt;span style="color:#000">altimetry&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000">altimetry&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">isel&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">t_dim&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#000">ind&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;pre>&lt;code>Subsetting Altimetry object at 0x55d413422fc0 indices in [-10, 10], [45, 60]
&lt;/code>&lt;/pre>
&lt;h3 id="model-interpolation">Model interpolation&lt;/h3>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">&lt;span style="color:#8f5902;font-style:italic"># Before comparing our observations to the model, we will interpolate a model&lt;/span>
&lt;span style="color:#8f5902;font-style:italic"># variable to the same time and geographical space as the altimetry. This is&lt;/span>
&lt;span style="color:#8f5902;font-style:italic"># done using the obs_operator() method:&lt;/span>
&lt;span style="color:#000">altimetry&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">obs_operator&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">nemo&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">mod_var_name&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;ssh&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">time_interp&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;nearest&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;span style="color:#8f5902;font-style:italic"># Doing this has created a new interpolated variable called interp_ssh and&lt;/span>
&lt;span style="color:#8f5902;font-style:italic"># saved it back into our Altimetry object. Take a look at altimetry.dataset&lt;/span>
&lt;span style="color:#8f5902;font-style:italic"># to see for yourself.&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;pre>&lt;code>Interpolating Gridded object at 0x55d413422fc0 &amp;quot;ssh&amp;quot; with time_interp &amp;quot;nearest&amp;quot;
&lt;/code>&lt;/pre>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">&lt;span style="color:#8f5902;font-style:italic">#altimetry.dataset # uncomment to print data object summary&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="interpolated-vs-observed">Interpolated vs observed&lt;/h3>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">&lt;span style="color:#8f5902;font-style:italic"># Next we will compare this interpolated variable to an observed variable&lt;/span>
&lt;span style="color:#8f5902;font-style:italic"># using some basic metrics. The basic_stats() routine can be used for this,&lt;/span>
&lt;span style="color:#8f5902;font-style:italic"># which calculates some simple metrics including differences, RMSE and&lt;/span>
&lt;span style="color:#8f5902;font-style:italic"># correlations. NOTE: This may not be a wise choice of variables.&lt;/span>
&lt;span style="color:#000">stats&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000">altimetry&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">basic_stats&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;ocean_tide_standard_name&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;interp_ssh&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;pre>&lt;code>Altimetry object at 0x55d413422fc0 initialised
/usr/share/miniconda/envs/coast/lib/python3.8/site-packages/coast/data/altimetry.py:352: FutureWarning: The default value of numeric_only in DataFrame.corr is deprecated. In a future version, it will default to False. Select only valid columns or specify the value of numeric_only to silence this warning.
corr = pdvar.corr(method=method)
/usr/share/miniconda/envs/coast/lib/python3.8/site-packages/coast/data/altimetry.py:366: FutureWarning: The default value of numeric_only in DataFrame.cov is deprecated. In a future version, it will default to False. Select only valid columns or specify the value of numeric_only to silence this warning.
cov = pdvar.cov()
&lt;/code>&lt;/pre>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">&lt;span style="color:#8f5902;font-style:italic"># Take a look inside stats.dataset to see all of the new variables. When using&lt;/span>
&lt;span style="color:#8f5902;font-style:italic"># basic stats, the returned object is also an Altimetry object, so all of the&lt;/span>
&lt;span style="color:#8f5902;font-style:italic"># same methods can be applied. Alternatively, if you want to save the new&lt;/span>
&lt;span style="color:#8f5902;font-style:italic"># metrics to the original altimetry object, set &amp;#39;create_new_object = False&amp;#39;.&lt;/span>
&lt;span style="color:#8f5902;font-style:italic">#stats.dataset # uncomment to print data object summary&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">&lt;span style="color:#8f5902;font-style:italic"># Now we will do a more complex comparison using the Continuous Ranked&lt;/span>
&lt;span style="color:#8f5902;font-style:italic"># Probability Score (CRPS). For this, we need to hand over the model object,&lt;/span>
&lt;span style="color:#8f5902;font-style:italic"># a model variable and an observed variable. We also give it a neighbourhood&lt;/span>
&lt;span style="color:#8f5902;font-style:italic"># radius in km (nh_radius).&lt;/span>
&lt;span style="color:#000">crps&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000">altimetry&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">crps&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">nemo&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">model_var_name&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;ssh&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">obs_var_name&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;ocean_tide_standard_name&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">nh_radius&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">20&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;span style="color:#8f5902;font-style:italic"># Again, take a look inside `crps.dataset` to see some new variables. Similarly&lt;/span>
&lt;span style="color:#8f5902;font-style:italic"># to basic_stats, `create_new_object` keyword arg can be set to `false` to save output to&lt;/span>
&lt;span style="color:#8f5902;font-style:italic"># the original altimetry object.&lt;/span>
&lt;span style="color:#8f5902;font-style:italic">#crps.dataset # uncomment to print data object summary&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;pre>&lt;code>Altimetry object at 0x55d413422fc0 initialised
&lt;/code>&lt;/pre>
&lt;h3 id="plotting-data">Plotting data&lt;/h3>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">&lt;span style="color:#8f5902;font-style:italic"># Altimetry has a ready built quick_plot() routine for taking a look at any&lt;/span>
&lt;span style="color:#8f5902;font-style:italic"># of the observed or derived quantities above. So to take a look at the&lt;/span>
&lt;span style="color:#8f5902;font-style:italic"># &amp;#39;ocean_tide_standard_name&amp;#39; variable:&lt;/span>
&lt;span style="color:#000">fig&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">ax&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000">altimetry&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">quick_plot&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;ocean_tide_standard_name&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;pre>&lt;code>/usr/share/miniconda/envs/coast/lib/python3.8/site-packages/cartopy/io/__init__.py:241: DownloadWarning: Downloading: https://naturalearth.s3.amazonaws.com/50m_physical/ne_50m_coastline.zip
warnings.warn(f'Downloading: {url}', DownloadWarning)
&lt;/code>&lt;/pre>
&lt;p>&lt;img src="https://british-oceanographic-data-centre.github.io/COAsT/COAsT/altimetry_tutorial_files/altimetry_tutorial_15_1.png" alt="png">&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">&lt;span style="color:#8f5902;font-style:italic"># As stats and crps are also `altimetry` objects, quick_plot() can also be used:&lt;/span>
&lt;span style="color:#000">fig&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">ax&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000">crps&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">quick_plot&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;crps&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;img src="https://british-oceanographic-data-centre.github.io/COAsT/COAsT/altimetry_tutorial_files/altimetry_tutorial_16_0.png" alt="png">&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">&lt;span style="color:#8f5902;font-style:italic"># stats quick_plot:&lt;/span>
&lt;span style="color:#000">fig&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">ax&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000">stats&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">quick_plot&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;absolute_error&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;img src="https://british-oceanographic-data-centre.github.io/COAsT/COAsT/altimetry_tutorial_files/altimetry_tutorial_17_0.png" alt="png">&lt;/p></description></item><item><title>Docs: Climatology tutorial</title><link>https://british-oceanographic-data-centre.github.io/COAsT/docs/examples/notebooks/general/climatology_tutorial/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://british-oceanographic-data-centre.github.io/COAsT/docs/examples/notebooks/general/climatology_tutorial/</guid><description>
&lt;p>This demonstration has two parts:&lt;/p>
&lt;ol>
&lt;li>
&lt;p>Climatology.make_climatology():
This demonstration uses the COAsT package to calculate a climatological mean of an
input dataset at a desired output frequency. Output can be written straight
to file.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Climatology.make_multiyear_climatology():
This demonstrations uses the COAsT package to calculate a climatological mean of an
input dataset at a desired output frequency, over multiple years, but will work with single year datasets too.&lt;/p>
&lt;/li>
&lt;/ol>
&lt;p>COAsT and xarray should preserve any lazy loading and chunking. If defined
properly in the read function, memory issues can be avoided and parallel
processes will automatically be used.&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">&lt;span style="color:#204a87;font-weight:bold">import&lt;/span> &lt;span style="color:#000">coast&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="usage-of-coastclimatologymake_climatology">Usage of coast.Climatology.make_climatology().&lt;/h3>
&lt;p>Calculates mean over a given period of time. This doesn&amp;rsquo;t take different years into account, unless using the
&amp;lsquo;years&amp;rsquo; frequency.&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">&lt;span style="color:#000">root&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;./&amp;#34;&lt;/span>
&lt;span style="color:#8f5902;font-style:italic"># Paths to a single or multiple data files.&lt;/span>
&lt;span style="color:#000">dn_files&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000">root&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">+&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;./example_files/&amp;#34;&lt;/span>
&lt;span style="color:#000">fn_nemo_dat&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000">dn_files&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">+&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;coast_example_nemo_data.nc&amp;#34;&lt;/span>
&lt;span style="color:#000">fn_nemo_config&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000">root&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">+&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;./config/example_nemo_grid_t.json&amp;#34;&lt;/span>
&lt;span style="color:#8f5902;font-style:italic"># Set path for domain file if required.&lt;/span>
&lt;span style="color:#000">fn_nemo_dom&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000">dn_files&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">+&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;coast_example_nemo_domain.nc&amp;#34;&lt;/span>
&lt;span style="color:#8f5902;font-style:italic"># Define output filepath (optional: None or str)&lt;/span>
&lt;span style="color:#000">fn_out&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#3465a4">None&lt;/span>
&lt;span style="color:#8f5902;font-style:italic"># Read in multiyear data (This example uses NEMO data from a single file.)&lt;/span>
&lt;span style="color:#000">nemo_data&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000">coast&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">Gridded&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">fn_data&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#000">fn_nemo_dat&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>
&lt;span style="color:#000">fn_domain&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#000">fn_nemo_dom&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>
&lt;span style="color:#000">config&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#000">fn_nemo_config&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>
&lt;span style="color:#000;font-weight:bold">)&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">dataset&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Calculate the climatology for temperature and sea surface height (ssh) as an example:&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">&lt;span style="color:#8f5902;font-style:italic"># Select specific data variables.&lt;/span>
&lt;span style="color:#000">data&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000">nemo_data&lt;/span>&lt;span style="color:#000;font-weight:bold">[[&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;temperature&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;ssh&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">]]&lt;/span>
&lt;span style="color:#8f5902;font-style:italic"># Define frequency -- Any xarray time string: season, month, etc&lt;/span>
&lt;span style="color:#000">climatology_frequency&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;month&amp;#34;&lt;/span>
&lt;span style="color:#8f5902;font-style:italic"># Calculate the climatology and write to file.&lt;/span>
&lt;span style="color:#000">clim&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000">coast&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">Climatology&lt;/span>&lt;span style="color:#000;font-weight:bold">()&lt;/span>
&lt;span style="color:#000">clim_mean&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000">clim&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">make_climatology&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">data&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">climatology_frequency&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">fn_out&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#000">fn_out&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Below shows the structure of a dataset returned, containing 1 month worth of meaned temperature and sea surface height data:&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">&lt;span style="color:#8f5902;font-style:italic">#clim_mean # uncomment to print data object summary&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="usage-of-coastclimatologymultiyear_averages">Usage of coast.Climatology.multiyear_averages().&lt;/h3>
&lt;p>Calculates the mean over a specified period and groups the data by year-period. Here a fully working example is not available as multi-year example data is not in the &lt;code>example_files&lt;/code>. However a working example using synthetic data is given in: &lt;code>tests/test_climatology.py&lt;/code>. This method is designed to be compatible with multi-year datasets, but will work with single year datasets too.&lt;/p>
&lt;pre>&lt;code># Paths to a single or multiple data files.
fn_nemo_data = &amp;quot;/path/to/nemo/*.nc&amp;quot;
# Set path for domain file if required.
fn_nemo_domain = None
# Set path to configuration file
fn_nemo_config = &amp;quot;/path/to/nemo/*.json&amp;quot;
# Read in multiyear data (This example uses NEMO data from multiple datafiles.)
nemo_data = coast.Gridded(fn_data=fn_nemo_data,
fn_domain=fn_nemo_domain,
config=fn_nemo_config,
multiple=True).dataset
&lt;/code>&lt;/pre>&lt;p>Now calculate temperature and ssh means of each season across multiple years for specified data, using seasons module to specify time period.&lt;/p>
&lt;pre>&lt;code>from coast._utils import seasons
# Select specific data variables.
data = nemo_data[[&amp;quot;temperature&amp;quot;, &amp;quot;ssh&amp;quot;]]
clim = coast.Climatology()
# SPRING, SUMMER, AUTUMN, WINTER, ALL are valid values for seasons.
clim_multiyear = clim.multiyear_averages(data, seasons.ALL, time_var='time', time_dim='t_dim')
# Or explicitly defining specific month periods.
# A list of tuples defining start and end month integers. The start months should be in chronological order.
# (you may need to read/load the data again if it gives an error)
month_periods = [(1,2), (12,2)] # Specifies January -&amp;gt; February and December -&amp;gt; February for each year of data.
clim_multiyear = clim.multiyear_averages(data, month_periods , time_var='time', time_dim='t_dim')
&lt;/code>&lt;/pre>&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">
&lt;/code>&lt;/pre>&lt;/div></description></item><item><title>Docs: Contour tutorial</title><link>https://british-oceanographic-data-centre.github.io/COAsT/docs/examples/notebooks/gridded/contour_tutorial/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://british-oceanographic-data-centre.github.io/COAsT/docs/examples/notebooks/gridded/contour_tutorial/</guid><description>
&lt;p>Contour subsetting (a vertical slice of data along a contour).&lt;/p>
&lt;p>This is a demonstration script for using the Contour class in the COAsT
package. This object has strict data formatting requirements, which are
outlined in contour.py.&lt;/p>
&lt;p>The code is taken directly from &lt;code>unit_tesing/unit_test.py&lt;/code>&lt;/p>
&lt;p>In this tutorial we take a look the following Isobath Contour Methods:&lt;/p>
&lt;pre>&lt;code>a. Extract isbath contour between two points
b. Plot contour on map
c. Calculate pressure along contour
d. Calculate flow across contour
e. Calculate pressure gradient driven flow across contour
&lt;/code>&lt;/pre>
&lt;h3 id="load-packages-and-define-some-file-paths">Load packages and define some file paths.&lt;/h3>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">&lt;span style="color:#204a87;font-weight:bold">import&lt;/span> &lt;span style="color:#000">coast&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">import&lt;/span> &lt;span style="color:#000">matplotlib.pyplot&lt;/span> &lt;span style="color:#204a87;font-weight:bold">as&lt;/span> &lt;span style="color:#000">plt&lt;/span>
&lt;span style="color:#8f5902;font-style:italic"># Define some file paths&lt;/span>
&lt;span style="color:#000">root&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;./&amp;#34;&lt;/span>
&lt;span style="color:#000">dn_files&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000">root&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">+&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;./example_files/&amp;#34;&lt;/span>
&lt;span style="color:#000">fn_nemo_dat_t&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000">dn_files&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">+&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;nemo_data_T_grid.nc&amp;#34;&lt;/span>
&lt;span style="color:#000">fn_nemo_dat_u&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000">dn_files&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">+&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;nemo_data_U_grid.nc&amp;#34;&lt;/span>
&lt;span style="color:#000">fn_nemo_dat_v&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000">dn_files&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">+&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;nemo_data_V_grid.nc&amp;#34;&lt;/span>
&lt;span style="color:#000">fn_nemo_dom&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000">dn_files&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">+&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;coast_example_nemo_domain.nc&amp;#34;&lt;/span>
&lt;span style="color:#8f5902;font-style:italic"># Configuration files describing the data files&lt;/span>
&lt;span style="color:#000">fn_config_t_grid&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000">root&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">+&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;./config/example_nemo_grid_t.json&amp;#34;&lt;/span>
&lt;span style="color:#000">fn_config_f_grid&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000">root&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">+&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;./config/example_nemo_grid_f.json&amp;#34;&lt;/span>
&lt;span style="color:#000">fn_config_u_grid&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000">root&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">+&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;./config/example_nemo_grid_u.json&amp;#34;&lt;/span>
&lt;span style="color:#000">fn_config_v_grid&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000">root&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">+&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;./config/example_nemo_grid_v.json&amp;#34;&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="extract-isobath-contour-between-two-points-and-create-contour-object">Extract isobath contour between two points and create contour object.&lt;/h3>
&lt;p>Create a gridded object with the grid only.&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">&lt;span style="color:#000">nemo_f&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000">coast&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">Gridded&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">fn_domain&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#000">fn_nemo_dom&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">config&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#000">fn_config_f_grid&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Then create a contour object on the 200m isobath.&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">&lt;span style="color:#000">contours&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">no_contours&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000">coast&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">Contour&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">get_contours&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">nemo_f&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">200&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Extract the indices for the contour in a specified box.&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">&lt;span style="color:#000">y_ind&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">x_ind&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">contour&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000">coast&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">Contour&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">get_contour_segment&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">nemo_f&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">contours&lt;/span>&lt;span style="color:#000;font-weight:bold">[&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">0&lt;/span>&lt;span style="color:#000;font-weight:bold">],&lt;/span> &lt;span style="color:#000;font-weight:bold">[&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">50&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">-&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">10&lt;/span>&lt;span style="color:#000;font-weight:bold">],&lt;/span> &lt;span style="color:#000;font-weight:bold">[&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">60&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">3&lt;/span>&lt;span style="color:#000;font-weight:bold">])&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Extract the contour for the specified indices.&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">&lt;span style="color:#000">cont_f&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000">coast&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">ContourF&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">nemo_f&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">y_ind&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">x_ind&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">200&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="plot-contour-on-map">Plot contour on map&lt;/h3>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">&lt;span style="color:#000">plt&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">figure&lt;/span>&lt;span style="color:#000;font-weight:bold">()&lt;/span>
&lt;span style="color:#000">coast&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">Contour&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">plot_contour&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">nemo_f&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">contour&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;span style="color:#000">plt&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">show&lt;/span>&lt;span style="color:#000;font-weight:bold">()&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;pre>&lt;code>&amp;lt;Figure size 640x480 with 0 Axes&amp;gt;
&lt;/code>&lt;/pre>
&lt;p>&lt;img src="https://british-oceanographic-data-centre.github.io/COAsT/COAsT/contour_tutorial_files/contour_tutorial_12_1.png" alt="png">&lt;/p>
&lt;h3 id="calculate-pressure-along-contour">Calculate pressure along contour.&lt;/h3>
&lt;p>Repeat the above procedure but on t-points.&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">&lt;span style="color:#000">nemo_t&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000">coast&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">Gridded&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">fn_data&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#000">fn_nemo_dat_t&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">fn_domain&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#000">fn_nemo_dom&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">config&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#000">fn_config_t_grid&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;span style="color:#000">contours&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">no_contours&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000">coast&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">Contour&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">get_contours&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">nemo_t&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">200&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;span style="color:#000">y_ind&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">x_ind&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">contour&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000">coast&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">Contour&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">get_contour_segment&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">nemo_t&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">contours&lt;/span>&lt;span style="color:#000;font-weight:bold">[&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">0&lt;/span>&lt;span style="color:#000;font-weight:bold">],&lt;/span> &lt;span style="color:#000;font-weight:bold">[&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">50&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">-&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">10&lt;/span>&lt;span style="color:#000;font-weight:bold">],&lt;/span> &lt;span style="color:#000;font-weight:bold">[&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">60&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">3&lt;/span>&lt;span style="color:#000;font-weight:bold">])&lt;/span>
&lt;span style="color:#000">cont_t&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000">coast&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">ContourT&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">nemo_t&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">y_ind&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">x_ind&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">200&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Now contruct pressure along this contour segment.&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">&lt;span style="color:#000">cont_t&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">construct_pressure&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">1027&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;span style="color:#8f5902;font-style:italic"># This creates ``cont_t.data_contour.pressure_s`` and ``cont_t.data_contour.pressure_h_zlevels`` fields.&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="calculate-flow-across-contour">Calculate flow across contour.&lt;/h3>
&lt;p>Create the contour segement on f-points again.&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">&lt;span style="color:#000">nemo_f&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000">coast&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">Gridded&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">fn_domain&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#000">fn_nemo_dom&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">config&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#000">fn_config_f_grid&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;span style="color:#000">nemo_u&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000">coast&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">Gridded&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">fn_data&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#000">fn_nemo_dat_u&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">fn_domain&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#000">fn_nemo_dom&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">config&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#000">fn_config_u_grid&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;span style="color:#000">nemo_v&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000">coast&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">Gridded&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">fn_data&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#000">fn_nemo_dat_v&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">fn_domain&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#000">fn_nemo_dom&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">config&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#000">fn_config_v_grid&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;span style="color:#000">contours&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">no_contours&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000">coast&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">Contour&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">get_contours&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">nemo_f&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">200&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;span style="color:#000">y_ind&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">x_ind&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">contour&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000">coast&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">Contour&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">get_contour_segment&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">nemo_f&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">contours&lt;/span>&lt;span style="color:#000;font-weight:bold">[&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">0&lt;/span>&lt;span style="color:#000;font-weight:bold">],&lt;/span> &lt;span style="color:#000;font-weight:bold">[&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">50&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">-&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">10&lt;/span>&lt;span style="color:#000;font-weight:bold">],&lt;/span> &lt;span style="color:#000;font-weight:bold">[&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">60&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">3&lt;/span>&lt;span style="color:#000;font-weight:bold">])&lt;/span>
&lt;span style="color:#000">cont_f&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000">coast&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">ContourF&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">nemo_f&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">y_ind&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">x_ind&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">200&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Calculate the flow across the contour, pass u- and v- gridded velocity objects.&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">&lt;span style="color:#000">cont_f&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">calc_cross_contour_flow&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">nemo_u&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">nemo_v&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;span style="color:#8f5902;font-style:italic"># This creates fields ``cont_f.data_cross_flow.normal_velocities`` and&lt;/span>
&lt;span style="color:#8f5902;font-style:italic">## ``cont_f.data_cross_flow.depth_integrated_normal_transport``&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="calculate-pressure-gradient-driven-flow-across-contour">Calculate pressure gradient driven flow across contour.&lt;/h3>
&lt;p>The &amp;ldquo;calc_geostrophic_flow()&amp;rdquo; operates on f-grid objects and requires configuration files for the u- and v- grids.&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">&lt;span style="color:#000">cont_f&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">calc_geostrophic_flow&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">nemo_t&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">config_u&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#000">fn_config_u_grid&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">config_v&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#000">fn_config_v_grid&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">ref_density&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">1027&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;span style="color:#4e9a06">&amp;#34;&amp;#34;&amp;#34;
&lt;/span>&lt;span style="color:#4e9a06"> This constructs:
&lt;/span>&lt;span style="color:#4e9a06"> cont_f.data_cross_flow.normal_velocity_hpg
&lt;/span>&lt;span style="color:#4e9a06"> cont_f.data_cross_flow.normal_velocity_spg
&lt;/span>&lt;span style="color:#4e9a06"> cont_f.data_cross_flow.transport_across_AB_hpg
&lt;/span>&lt;span style="color:#4e9a06"> cont_f.data_cross_flow.transport_across_AB_spg
&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;&amp;#34;&amp;#34;&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;pre>&lt;code>'\n This constructs:\n cont_f.data_cross_flow.normal_velocity_hpg\n cont_f.data_cross_flow.normal_velocity_spg\n cont_f.data_cross_flow.transport_across_AB_hpg\n cont_f.data_cross_flow.transport_across_AB_spg\n'
&lt;/code>&lt;/pre>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">
&lt;/code>&lt;/pre>&lt;/div></description></item><item><title>Docs: Dask wrapper template tutorial</title><link>https://british-oceanographic-data-centre.github.io/COAsT/docs/examples/notebooks/general/dask_wrapper_template_tutorial/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://british-oceanographic-data-centre.github.io/COAsT/docs/examples/notebooks/general/dask_wrapper_template_tutorial/</guid><description>
&lt;p>The notebook proves a template and some instruction on how to create a dask wrapper&lt;/p>
&lt;h3 id="motivation">Motivation&lt;/h3>
&lt;p>Start with an &lt;code>xarray.DataArray&lt;/code> object called &lt;code>myDataArra&lt;/code>y, that we want to pass into a function. That function will perform eager evaluation and return a numpy array, but we want lazy evaluation with the possibility to allow dask parallelism. See worked example in &lt;code>Process_data.seasonal_decomposition&lt;/code>.&lt;/p>
&lt;h3 id="import-dependencies">Import dependencies&lt;/h3>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">&lt;span style="color:#204a87;font-weight:bold">import&lt;/span> &lt;span style="color:#000">dask.array&lt;/span> &lt;span style="color:#204a87;font-weight:bold">as&lt;/span> &lt;span style="color:#000">da&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">from&lt;/span> &lt;span style="color:#000">dask&lt;/span> &lt;span style="color:#204a87;font-weight:bold">import&lt;/span> &lt;span style="color:#000">delayed&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">import&lt;/span> &lt;span style="color:#000">xarray&lt;/span> &lt;span style="color:#204a87;font-weight:bold">as&lt;/span> &lt;span style="color:#000">xr&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">import&lt;/span> &lt;span style="color:#000">numpy&lt;/span> &lt;span style="color:#204a87;font-weight:bold">as&lt;/span> &lt;span style="color:#000">np&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="step-1-optional-allows-dask-to-distribute-computation-across-multiple-cores-if-not-interested-see-comment-2">Step 1. (optional: allows dask to distribute computation across multiple cores, if not interested see comment 2)&lt;/h3>
&lt;p>Partition data in &lt;code>myDataArray&lt;/code> by chunking it up as desired. Note that chunking dimensions need to make sense for your particular problem! Here we just chunk along &lt;code>dim_2&lt;/code>&lt;/p>
&lt;pre>&lt;code>myDataArray = myDataArray.chunk({&amp;quot;dim_1&amp;quot;: myDataArray.dim_1.size, &amp;quot;dim_2&amp;quot;: chunksize}) # can be more dimensions
&lt;/code>&lt;/pre>&lt;p>Then create a list containing all the array chunks as dask.delayed objects (e.g. 4 chunks =&amp;gt; list contain 4 delayed objects)&lt;/p>
&lt;pre>&lt;code>myDataArray_partitioned = myDataArray.data.to_delayed().ravel()
&lt;/code>&lt;/pre>&lt;h4 id="comment-1">Comment 1&lt;/h4>
&lt;p>There are different ways to partition your data. For example, if you start off with a numpy array rather than an xarray DataArray you can just iterate over the array and partition it that way (the partitions do NOT need to be dask.delayed objects). For example see the very simple case here: &lt;a href="https://docs.dask.org/en/stable/delayed.html">https://docs.dask.org/en/stable/delayed.html&lt;/a>&lt;/p>
&lt;p>The method described in 1 is just very convenient for DataArrays where the multi-dimensional chunks may be the desired way to partition the data.&lt;/p>
&lt;h3 id="step-2">Step 2.&lt;/h3>
&lt;p>Call your eager evaluating function using dask.delayed and pass in your data. This returns a list containing the outputs from the function as dask.delayed objects. The list will have the same length as &lt;code>myDataArray_partitioned&lt;/code>&lt;/p>
&lt;pre>&lt;code>delayed_myFunction_output = [
delayed(myFunction)(aChunk, other_args_for_myFunction) for aChunk in myDataArray_partitioned
]
&lt;/code>&lt;/pre>&lt;h3 id="step-3">Step 3.&lt;/h3>
&lt;p>Convert the lists of delayed objects to lists of dask arrays to allow array operations. It&amp;rsquo;s possible this step is not necessary!&lt;/p>
&lt;pre>&lt;code>dask_array_list = []
for chunk_idx, aChunk in enumerate(delayed_myFunction_output):
# When converting from dask.delayed to dask.array, you must know the shape of the
# array. In this example we know this from the chunk sizes of the original DataArray
chunk_shape = (myDataArray.chunks[0][0], myDataArray.chunks[1][chunk_idx])
dask_array_list.append(da.from_delayed(aChunk, shape=chunk_shape, dtype=float))
&lt;/code>&lt;/pre>&lt;h3 id="step-4">Step 4.&lt;/h3>
&lt;p>Concatenate the array chunks together to get a single dask.array. This can be assigned to a new DataArray as desired.&lt;/p>
&lt;pre>&lt;code>myOutputArray = da.concatenate(dask_array_list, axis=1)
&lt;/code>&lt;/pre>&lt;h4 id="comment-2">Comment 2&lt;/h4>
&lt;p>If you skipped step 1., i.e. just want a lazy operation and no parallelism, you can just do this&lt;/p>
&lt;pre>&lt;code>myOutputArray = da.from_delayed(
delayed(myFunction)(myDataArray, other_args_for_myFunction), shape=myDataArray.shape, dtype=float
)
&lt;/code>&lt;/pre>&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">
&lt;/code>&lt;/pre>&lt;/div></description></item><item><title>Docs: Eof tutorial</title><link>https://british-oceanographic-data-centre.github.io/COAsT/docs/examples/notebooks/general/eof_tutorial/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://british-oceanographic-data-centre.github.io/COAsT/docs/examples/notebooks/general/eof_tutorial/</guid><description>
&lt;p>Using COAsT to compute the Empirical Orthogonal Functions (EOFs) of your data&lt;/p>
&lt;h3 id="relevant-imports-and-filepath-configuration">Relevant imports and filepath configuration&lt;/h3>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">&lt;span style="color:#8f5902;font-style:italic"># Begin by importing coast and other packages&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">import&lt;/span> &lt;span style="color:#000">coast&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">import&lt;/span> &lt;span style="color:#000">xarray&lt;/span> &lt;span style="color:#204a87;font-weight:bold">as&lt;/span> &lt;span style="color:#000">xr&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">import&lt;/span> &lt;span style="color:#000">matplotlib.pyplot&lt;/span> &lt;span style="color:#204a87;font-weight:bold">as&lt;/span> &lt;span style="color:#000">plt&lt;/span>
&lt;span style="color:#8f5902;font-style:italic"># Define some file paths&lt;/span>
&lt;span style="color:#000">root&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;./&amp;#34;&lt;/span>
&lt;span style="color:#000">dn_files&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000">root&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">+&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;./example_files/&amp;#34;&lt;/span>
&lt;span style="color:#000">fn_nemo_dat_t&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000">dn_files&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">+&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;nemo_data_T_grid.nc&amp;#34;&lt;/span>
&lt;span style="color:#000">fn_nemo_dom&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000">dn_files&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">+&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;coast_example_nemo_domain.nc&amp;#34;&lt;/span>
&lt;span style="color:#000">fn_nemo_config&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000">root&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">+&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;./config/example_nemo_grid_t.json&amp;#34;&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="loading-data">Loading data&lt;/h3>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">&lt;span style="color:#8f5902;font-style:italic"># Load data variables that are on the NEMO t-grid&lt;/span>
&lt;span style="color:#000">nemo_t&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000">coast&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">Gridded&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span> &lt;span style="color:#000">fn_data&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000">fn_nemo_dat_t&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">fn_domain&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000">fn_nemo_dom&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">config&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000">fn_nemo_config&lt;/span> &lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="compute-eof">Compute EOF&lt;/h3>
&lt;p>For a variable (or subset of a variable) with two spatial dimensions and one temporal dimension, i.e. (x,y,t), the EOFs, temporal projections and variance explained can be computed by calling the â€˜eofsâ€™ method, and passing in the ssh DataArray as an argument. For example, for the sea surface height field, we can do&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">&lt;span style="color:#000">eof_data&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000">coast&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">compute_eofs&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span> &lt;span style="color:#000">nemo_t&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">dataset&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">ssh&lt;/span> &lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>The method returns an xarray dataset that contains the EOFs, temporal projections and variance as DataArrays&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">&lt;span style="color:#8f5902;font-style:italic">#eof_data # uncomment to print data object summary&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="inspect-eofs">Inspect EOFs&lt;/h3>
&lt;p>The variance explained of the first four modes is&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">&lt;span style="color:#8f5902;font-style:italic"># eof_data.variance.sel(mode=[1,2,3,4]) ## uncomment&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="plotting">Plotting&lt;/h3>
&lt;p>And the EOFs and temporal projections can be quick plotted:&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">&lt;span style="color:#000">eof_data&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">EOF&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">sel&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">mode&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#000;font-weight:bold">[&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">1&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">2&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">3&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">4&lt;/span>&lt;span style="color:#000;font-weight:bold">])&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">plot&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">pcolormesh&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">col&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#4e9a06">&amp;#39;mode&amp;#39;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>&lt;span style="color:#000">col_wrap&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">2&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>&lt;span style="color:#000">x&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#4e9a06">&amp;#39;longitude&amp;#39;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>&lt;span style="color:#000">y&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#4e9a06">&amp;#39;latitude&amp;#39;&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;pre>&lt;code>&amp;lt;xarray.plot.facetgrid.FacetGrid at 0x7f2d49041820&amp;gt;
&lt;/code>&lt;/pre>
&lt;p>&lt;img src="https://british-oceanographic-data-centre.github.io/COAsT/COAsT/eof_tutorial_files/eof_tutorial_12_1.png" alt="png">&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">&lt;span style="color:#000">eof_data&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">temporal_proj&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">sel&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">mode&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#000;font-weight:bold">[&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">1&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">2&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">3&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">4&lt;/span>&lt;span style="color:#000;font-weight:bold">])&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">plot&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">col&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#4e9a06">&amp;#39;mode&amp;#39;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>&lt;span style="color:#000">col_wrap&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">2&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>&lt;span style="color:#000">x&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#4e9a06">&amp;#39;time&amp;#39;&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;pre>&lt;code>&amp;lt;xarray.plot.facetgrid.FacetGrid at 0x7f2d44a6a790&amp;gt;
&lt;/code>&lt;/pre>
&lt;p>&lt;img src="https://british-oceanographic-data-centre.github.io/COAsT/COAsT/eof_tutorial_files/eof_tutorial_13_1.png" alt="png">&lt;/p>
&lt;h3 id="complex-eofs">Complex EOFs&lt;/h3>
&lt;p>The more exotic hilbert complex EOFs can also be computed to investigate the propagation of variability, for example:&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">&lt;span style="color:#000">heof_data&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000">coast&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">compute_hilbert_eofs&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span> &lt;span style="color:#000">nemo_t&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">dataset&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">ssh&lt;/span> &lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;span style="color:#8f5902;font-style:italic">#heof_data # uncomment to print data object summary&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>now with the modes expressed by their amplitude and phase, the spatial propagation of the variability can be examined through the EOF_phase.&lt;/p></description></item><item><title>Docs: Export to netcdf tutorial</title><link>https://british-oceanographic-data-centre.github.io/COAsT/docs/examples/notebooks/general/export_to_netcdf_tutorial/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://british-oceanographic-data-centre.github.io/COAsT/docs/examples/notebooks/general/export_to_netcdf_tutorial/</guid><description>
&lt;p>This is a demonstration script for how to export intermediate data from COAsT
to netCDF files for later analysis or storage.
The tutorial showcases the xarray.to_netcdf() method.
&lt;a href="http://xarray.pydata.org/en/stable/generated/xarray.Dataset.to_netcdf.html">http://xarray.pydata.org/en/stable/generated/xarray.Dataset.to_netcdf.html&lt;/a>&lt;/p>
&lt;h3 id="begin-by-importing-coast-and-other-packages">Begin by importing COAsT and other packages&lt;/h3>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">&lt;span style="color:#204a87;font-weight:bold">import&lt;/span> &lt;span style="color:#000">coast&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">import&lt;/span> &lt;span style="color:#000">xarray&lt;/span> &lt;span style="color:#204a87;font-weight:bold">as&lt;/span> &lt;span style="color:#000">xr&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="now-define-some-file-paths">Now define some file paths&lt;/h3>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">&lt;span style="color:#000">root&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;./&amp;#34;&lt;/span>
&lt;span style="color:#8f5902;font-style:italic"># And by defining some file paths&lt;/span>
&lt;span style="color:#000">dn_files&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000">root&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">+&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;./example_files/&amp;#34;&lt;/span>
&lt;span style="color:#000">fn_nemo_dat&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000">dn_files&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">+&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;coast_example_nemo_data.nc&amp;#34;&lt;/span>
&lt;span style="color:#000">fn_nemo_dom&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000">dn_files&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">+&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;coast_example_nemo_domain.nc&amp;#34;&lt;/span>
&lt;span style="color:#000">config&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000">root&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">+&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;./config/example_nemo_grid_t.json&amp;#34;&lt;/span>
&lt;span style="color:#000">ofile&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;example_export_output.nc&amp;#34;&lt;/span> &lt;span style="color:#8f5902;font-style:italic"># The target filename for output&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="we-need-to-load-in-a-nemo-object-for-doing-nemo-things">We need to load in a NEMO object for doing NEMO things&lt;/h3>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">&lt;span style="color:#000">nemo&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000">coast&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">Gridded&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">fn_nemo_dat&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">fn_nemo_dom&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">config&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#000">config&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="we-can-export-the-whole-xrdataset-to-a-netcdf-file">We can export the whole xr.DataSet to a netCDF file&lt;/h3>
&lt;p>Other file formats are available. From the documentation:&lt;/p>
&lt;ul>
&lt;li>NETCDF4: Data is stored in an HDF5 file, using netCDF4 API features.&lt;/li>
&lt;li>NETCDF4_CLASSIC: Data is stored in an HDF5 file, using only netCDF 3 compatible API features.&lt;/li>
&lt;li>NETCDF3_64BIT: 64-bit offset version of the netCDF 3 file format, which fully supports 2+ GB files, but is only compatible with clients linked against netCDF version 3.6.0 or later.&lt;/li>
&lt;li>NETCDF3_CLASSIC: The classic netCDF 3 file format. It does not handle 2+ GB files very well.&lt;/li>
&lt;/ul>
&lt;p>Mode - &amp;lsquo;w&amp;rsquo; (write) is the default. Other options from the documentation:&lt;/p>
&lt;ul>
&lt;li>mode ({&amp;ldquo;w&amp;rdquo;, &amp;ldquo;a&amp;rdquo;}, default: &amp;ldquo;w&amp;rdquo;) â€“ Write (â€˜wâ€™) or append (â€˜aâ€™) mode.&lt;/li>
&lt;li>If mode=â€™wâ€™, any existing file at this location will be overwritten.&lt;/li>
&lt;li>If mode=â€™aâ€™, existing variables will be overwritten.&lt;/li>
&lt;/ul>
&lt;p>Similarly xr.DataSets collections of variables or xr.DataArray variables can be exported to netCDF for objects in the TRANSECT, TIDEGAUGE, etc classes.&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">&lt;span style="color:#000">nemo&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">dataset&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">to_netcdf&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">ofile&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">mode&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;w&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">format&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;NETCDF4&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="alternatively-a-single-variable-an-xrdataarray-object-can-be-exported">Alternatively a single variable (an xr.DataArray object) can be exported&lt;/h3>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">&lt;span style="color:#000">nemo&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">dataset&lt;/span>&lt;span style="color:#000;font-weight:bold">[&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;temperature&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">]&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">to_netcdf&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">ofile&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">format&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;NETCDF4&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="check-the-exported-file-is-as-you-expect">Check the exported file is as you expect&lt;/h3>
&lt;p>Perhaps by using &lt;code>ncdump -h example_export_output.nc&lt;/code>, or load the file and see that the xarray structure is preserved.&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">&lt;span style="color:#204a87">object&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000">xr&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">open_dataset&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">ofile&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;span style="color:#204a87">object&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">close&lt;/span>&lt;span style="color:#000;font-weight:bold">()&lt;/span> &lt;span style="color:#8f5902;font-style:italic"># close file associated with this object&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">
&lt;/code>&lt;/pre>&lt;/div></description></item><item><title>Docs: setting up Hugo</title><link>https://british-oceanographic-data-centre.github.io/COAsT/docs/contributing-docs/hugo/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://british-oceanographic-data-centre.github.io/COAsT/docs/contributing-docs/hugo/</guid><description>
&lt;p>This page will walk you though a simple setup for hugo extended - which is needed if want to view any changes you make to this site locally.&lt;/p>
&lt;p>For more details please &lt;a href="https://gohugo.io/getting-started/installing/">read this&lt;/a>.&lt;/p>
&lt;h2 id="installation">Installation&lt;/h2>
&lt;h3 id="manual">Manual&lt;/h3>
&lt;ol>
&lt;li>Download hugo &lt;em>extended&lt;/em> from &lt;a href="https://github.com/gohugoio/hugo/releases">GitHub&lt;/a>&lt;/li>
&lt;li>Unzip into preferred location (I use C:\hugo)&lt;/li>
&lt;li>Add to OS PATH
&lt;ul>
&lt;li>optional but makes usage easier&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ol>
&lt;h3 id="via-a-package-manager">Via a Package Manager&lt;/h3>
&lt;p>On Windows you can use &lt;a href="https://chocolatey.org/">Chocolately&lt;/a> to install with:&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-shell" data-lang="shell">choco install hugo-extended
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Or on macOS/Linux you can use &lt;a href="https://brew.sh/">Homebrew&lt;/a> to install with:&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-shell" data-lang="shell">brew install hugo
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="try-it-out">Try it out!&lt;/h2>
&lt;p>You should now be able to try the following in a terminal&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-shell" data-lang="shell">$ hugo --help
&lt;/code>&lt;/pre>&lt;/div>&lt;p>if you have cloned the COAsT-site &lt;a href="github_repo">repo&lt;/a> you should also now be able to;&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-shell" data-lang="shell">$ &lt;span style="color:#204a87">cd&lt;/span> COAsT-site
$ hugo server
&lt;/code>&lt;/pre>&lt;/div>&lt;p>the above will start a local hugo powered version of the website. you can edit any of the files under /content and see your changes at http://localhost:1313/COAsT/&lt;/p></description></item><item><title>Docs: Introduction to gridded class</title><link>https://british-oceanographic-data-centre.github.io/COAsT/docs/examples/notebooks/gridded/introduction_to_gridded_class/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://british-oceanographic-data-centre.github.io/COAsT/docs/examples/notebooks/gridded/introduction_to_gridded_class/</guid><description>
&lt;p>An introduction to the Gridded class. Loading variables and grid information.&lt;/p>
&lt;p>This is designed to be a brief introduction to the Gridded class including:
1. Creation of a Gridded object
2. Loading data into the Gridded object.
3. Combining Gridded output and Gridded domain data.
4. Interrogating the Gridded object.
5. Basic manipulation ans subsetting
6. Looking at the data with matplotlib&lt;/p>
&lt;h3 id="loading-and-interrogating">Loading and Interrogating&lt;/h3>
&lt;p>Begin by importing COAsT and define some file paths for NEMO output data and a NEMO domain, as an example of model data suitable for the Gridded object.&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">&lt;span style="color:#204a87;font-weight:bold">import&lt;/span> &lt;span style="color:#000">coast&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">import&lt;/span> &lt;span style="color:#000">matplotlib.pyplot&lt;/span> &lt;span style="color:#204a87;font-weight:bold">as&lt;/span> &lt;span style="color:#000">plt&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">import&lt;/span> &lt;span style="color:#000">datetime&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">import&lt;/span> &lt;span style="color:#000">numpy&lt;/span> &lt;span style="color:#204a87;font-weight:bold">as&lt;/span> &lt;span style="color:#000">np&lt;/span>
&lt;span style="color:#8f5902;font-style:italic"># Define some file paths&lt;/span>
&lt;span style="color:#000">root&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;./&amp;#34;&lt;/span>
&lt;span style="color:#000">dn_files&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000">root&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">+&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;./example_files/&amp;#34;&lt;/span>
&lt;span style="color:#000">fn_nemo_dat&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000">dn_files&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">+&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;coast_example_nemo_data.nc&amp;#34;&lt;/span>
&lt;span style="color:#000">fn_nemo_dom&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000">dn_files&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">+&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;coast_example_nemo_domain.nc&amp;#34;&lt;/span>
&lt;span style="color:#000">fn_config_t_grid&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000">root&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">+&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;./config/example_nemo_grid_t.json&amp;#34;&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>We can create a new Gridded object by simple calling &lt;code>coast.Gridded()&lt;/code>. By passing this a NEMO data file and a NEMO domain file, COAsT will combine the two into a single xarray dataset within the Gridded object. Each individual Gridded object should be for a specified NEMO grid type, which is specified in a configuration file which is also passed as an argument. The Dask library is switched on by default, chunking can be specified in the configuration file.&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">&lt;span style="color:#000">nemo_t&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000">coast&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">Gridded&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">fn_data&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000">fn_nemo_dat&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">fn_domain&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000">fn_nemo_dom&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">config&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#000">fn_config_t_grid&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Our new Gridded object &lt;code>nemo_t&lt;/code> contains a variable called dataset, which holds information on the two files we passed. Letâ€™s have a look at this:&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">&lt;span style="color:#8f5902;font-style:italic">#nemo_t.dataset # uncomment to print data object summary&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>This is an xarray dataset, which has all the information on netCDF style structures. You can see dimensions, coordinates and data variables. At the moment, none of the actual data is loaded to memory and will remain that way until it needs to be accessed.&lt;/p>
&lt;p>Along with temperature (which has been renamed from votemper) a number of other things have happen under the hood:&lt;/p>
&lt;ol>
&lt;li>The dimensions have been renamed to &lt;code>t_dim&lt;/code>, &lt;code>x_dim&lt;/code>, &lt;code>y_dim&lt;/code>, &lt;code>z_dim&lt;/code>&lt;/li>
&lt;li>The coordinates have been renamed to &lt;code>time&lt;/code>, &lt;code>longitude&lt;/code>, &lt;code>latitude&lt;/code> and &lt;code>depth_0&lt;/code>. These are the coordinates for this grid (the t-grid). Also &lt;code>depth_0&lt;/code> has been calculated as the 3D depth array at time zero.&lt;/li>
&lt;li>The variables &lt;code>e1&lt;/code>, &lt;code>e2&lt;/code> and &lt;code>e3_0&lt;/code> have been created. These are the metrics for the t-grid in the x-dim, y-dim and z_dim (at time zero) directions.&lt;/li>
&lt;/ol>
&lt;p>So we see that the Gridded class has standardised some variable names and created an object based on this discretisation grid by combining the appropriate grid information with all the variables on that grid.&lt;/p>
&lt;p>We can interact with this as an xarray Dataset object. So to extract a specific variable (say temperature):&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">&lt;span style="color:#000">ssh&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000">nemo_t&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">dataset&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">ssh&lt;/span>
&lt;span style="color:#8f5902;font-style:italic">#ssh # uncomment to print data object summary&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Or as a numpy array:&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">&lt;span style="color:#000">ssh_np&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000">ssh&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">values&lt;/span>
&lt;span style="color:#8f5902;font-style:italic">#ssh_np.shape # uncomment to print data object summary&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Then lets plot up a single time snapshot of ssh using matplotlib:&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">&lt;span style="color:#000">plt&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">pcolormesh&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">nemo_t&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">dataset&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">longitude&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">nemo_t&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">dataset&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">latitude&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">nemo_t&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">dataset&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">ssh&lt;/span>&lt;span style="color:#000;font-weight:bold">[&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">0&lt;/span>&lt;span style="color:#000;font-weight:bold">])&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;pre>&lt;code>&amp;lt;matplotlib.collections.QuadMesh at 0x7ff398a78cd0&amp;gt;
&lt;/code>&lt;/pre>
&lt;p>&lt;img src="https://british-oceanographic-data-centre.github.io/COAsT/COAsT/introduction_to_gridded_class_files/introduction_to_gridded_class_11_1.png" alt="png">&lt;/p>
&lt;h3 id="some-manipulation">Some Manipulation&lt;/h3>
&lt;p>There are currently some basic subsetting routines for Gridded objects, to cut out specified regions of data. Fundamentally, this can be done using xarrayâ€™s isel or sel routines to index the data. In this case, the Gridded object will pass arguments straight through to &lt;code>xarray.isel&lt;/code>.&lt;/p>
&lt;p>Lets get the indices of all model points within 111km km of (5W, 55N):&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">&lt;span style="color:#000">ind_y&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">ind_x&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000">nemo_t&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">subset_indices_by_distance&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">centre_lon&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=-&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">5&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">centre_lat&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">55&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">radius&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">111&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;span style="color:#8f5902;font-style:italic">#ind_x.shape # uncomment to print data object summary&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Now create a new, smaller subsetted Gridded object by passing those indices to &lt;code>isel&lt;/code>.&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">&lt;span style="color:#000">nemo_t_subset&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000">nemo_t&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">isel&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">x_dim&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#000">ind_x&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">y_dim&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#000">ind_y&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;span style="color:#8f5902;font-style:italic">#nemo_t_subset.dataset # uncomment to print data object summary&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Alternatively, xarray.isel can be applied directly to the &lt;code>xarray.Dataset&lt;/code> object.
A longitude/latitude box of data can also be extracted using &lt;code>Gridded.subset_indices()&lt;/code>.&lt;/p>
&lt;h3 id="plotting-example-for-nemo-ersem-biogechemical-variables">Plotting example for NEMO-ERSEM biogechemical variables&lt;/h3>
&lt;p>Import COAsT, define some file paths for NEMO-ERSEM output data and a NEMO domain, and read/load your NEMO-ERSEM data into a gridded object, example:&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">&lt;span style="color:#204a87;font-weight:bold">import&lt;/span> &lt;span style="color:#000">coast&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">import&lt;/span> &lt;span style="color:#000">matplotlib.pyplot&lt;/span> &lt;span style="color:#204a87;font-weight:bold">as&lt;/span> &lt;span style="color:#000">plt&lt;/span>
&lt;span style="color:#8f5902;font-style:italic"># Define some file paths&lt;/span>
&lt;span style="color:#000">root&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;./&amp;#34;&lt;/span>
&lt;span style="color:#000">dn_files&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000">root&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">+&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;./example_files/&amp;#34;&lt;/span>
&lt;span style="color:#000">fn_bgc_dat&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000">dn_files&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">+&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;coast_example_SEAsia_BGC_1990.nc&amp;#34;&lt;/span>
&lt;span style="color:#000">fn_bgc_dom&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000">dn_files&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">+&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;coast_example_domain_SEAsia.nc&amp;#34;&lt;/span>
&lt;span style="color:#000">fn_config_bgc_grid&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000">root&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">+&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;./config/example_nemo_bgc.json&amp;#34;&lt;/span>
&lt;span style="color:#000">nemo_bgc&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000">coast&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">Gridded&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">fn_data&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000">fn_bgc_dat&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">fn_domain&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000">fn_bgc_dom&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">config&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#000">fn_config_bgc_grid&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;span style="color:#8f5902;font-style:italic">#nemo_bgc.dataset # uncomment to print data object summary&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>As an example plot a snapshot of dissolved inorganic carbon at the sea surface&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">&lt;span style="color:#000">fig&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000">plt&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">figure&lt;/span>&lt;span style="color:#000;font-weight:bold">()&lt;/span>
&lt;span style="color:#000">plt&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">pcolormesh&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>
&lt;span style="color:#000">nemo_bgc&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">dataset&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">longitude&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>
&lt;span style="color:#000">nemo_bgc&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">dataset&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">latitude&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>
&lt;span style="color:#000">nemo_bgc&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">dataset&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">dic&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">isel&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">t_dim&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">0&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">isel&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">z_dim&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">0&lt;/span>&lt;span style="color:#000;font-weight:bold">),&lt;/span>
&lt;span style="color:#000">cmap&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;RdYlBu_r&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>
&lt;span style="color:#000">vmin&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">1600&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>
&lt;span style="color:#000">vmax&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">2080&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>
&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;span style="color:#000">plt&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">colorbar&lt;/span>&lt;span style="color:#000;font-weight:bold">()&lt;/span>
&lt;span style="color:#000">plt&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">title&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;DIC, mmol/m^3&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;span style="color:#000">plt&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">xlabel&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;longitude&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;span style="color:#000">plt&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">ylabel&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;latitude&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;span style="color:#000">plt&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">show&lt;/span>&lt;span style="color:#000;font-weight:bold">()&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;pre>&lt;code>/tmp/ipykernel_3781/2498690501.py:2: UserWarning: The input coordinates to pcolormesh are interpreted as cell centers, but are not monotonically increasing or decreasing. This may lead to incorrectly calculated cell edges, in which case, please supply explicit cell edges to pcolormesh.
plt.pcolormesh(
&lt;/code>&lt;/pre>
&lt;p>&lt;img src="https://british-oceanographic-data-centre.github.io/COAsT/COAsT/introduction_to_gridded_class_files/introduction_to_gridded_class_20_1.png" alt="png">&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">
&lt;/code>&lt;/pre>&lt;/div></description></item><item><title>Docs: Potential energy tutorial</title><link>https://british-oceanographic-data-centre.github.io/COAsT/docs/examples/notebooks/gridded/potential_energy_tutorial/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://british-oceanographic-data-centre.github.io/COAsT/docs/examples/notebooks/gridded/potential_energy_tutorial/</guid><description>
&lt;p>A demonstration to calculate the Potential Energy Anomaly.&lt;/p>
&lt;h3 id="relevant-imports-and-filepath-configuration">Relevant imports and filepath configuration&lt;/h3>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">&lt;span style="color:#204a87;font-weight:bold">import&lt;/span> &lt;span style="color:#000">coast&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">import&lt;/span> &lt;span style="color:#000">numpy&lt;/span> &lt;span style="color:#204a87;font-weight:bold">as&lt;/span> &lt;span style="color:#000">np&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">import&lt;/span> &lt;span style="color:#000">os&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">import&lt;/span> &lt;span style="color:#000">matplotlib.pyplot&lt;/span> &lt;span style="color:#204a87;font-weight:bold">as&lt;/span> &lt;span style="color:#000">plt&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">import&lt;/span> &lt;span style="color:#000">matplotlib.colors&lt;/span> &lt;span style="color:#204a87;font-weight:bold">as&lt;/span> &lt;span style="color:#000">colors&lt;/span> &lt;span style="color:#8f5902;font-style:italic"># colormap fiddling&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">&lt;span style="color:#8f5902;font-style:italic"># set some paths&lt;/span>
&lt;span style="color:#000">root&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;./&amp;#34;&lt;/span>
&lt;span style="color:#000">dn_files&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000">root&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">+&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;./example_files/&amp;#34;&lt;/span>
&lt;span style="color:#000">fn_nemo_grid_t_dat&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000">dn_files&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">+&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;nemo_data_T_grid_Aug2015.nc&amp;#34;&lt;/span>
&lt;span style="color:#000">fn_nemo_dom&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000">dn_files&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">+&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;coast_example_nemo_domain.nc&amp;#34;&lt;/span>
&lt;span style="color:#000">config_t&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000">root&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">+&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;./config/example_nemo_grid_t.json&amp;#34;&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="loading-data">Loading data&lt;/h3>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">&lt;span style="color:#8f5902;font-style:italic"># Create a Gridded object and load in the data:&lt;/span>
&lt;span style="color:#000">nemo_t&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000">coast&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">Gridded&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">fn_nemo_grid_t_dat&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">fn_nemo_dom&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">config&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#000">config_t&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="calculates-potential-energy-anomaly">Calculates Potential Energy Anomaly&lt;/h3>
&lt;p>The density and depth averaged density can be supplied within gridded_t as &lt;code>density&lt;/code> and
&lt;code>density_bar&lt;/code> DataArrays, respectively. If they are not supplied they will be calculated.
&lt;code>density_bar&lt;/code> is calcuated using depth averages of temperature and salinity.&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">&lt;span style="color:#8f5902;font-style:italic"># Compute a vertical max to exclude depths below 200m&lt;/span>
&lt;span style="color:#000">Zd_mask&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">kmax&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">Ikmax&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000">nemo_t&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">calculate_vertical_mask&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">200.&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;span style="color:#8f5902;font-style:italic"># Initiate a stratification diagnostics object&lt;/span>
&lt;span style="color:#000">strat&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000">coast&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">GriddedStratification&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">nemo_t&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">&lt;span style="color:#8f5902;font-style:italic"># calculate PEA for unmasked depths&lt;/span>
&lt;span style="color:#000">strat&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">calc_pea&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">nemo_t&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">Zd_mask&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="make-a-plot">make a plot&lt;/h2>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">&lt;span style="color:#000">strat&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">quick_plot&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#4e9a06">&amp;#39;PEA&amp;#39;&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;img src="https://british-oceanographic-data-centre.github.io/COAsT/COAsT/potential_energy_tutorial_files/potential_energy_tutorial_10_0.png" alt="png">&lt;/p>
&lt;pre>&lt;code>(&amp;lt;Figure size 1000x1000 with 2 Axes&amp;gt;,
&amp;lt;AxesSubplot: title={'center': '01 Aug 2015: Potential Energy Anomaly (J / m^3)'}, xlabel='longitude', ylabel='latitude'&amp;gt;)
&lt;/code>&lt;/pre>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">
&lt;/code>&lt;/pre>&lt;/div></description></item><item><title>Docs: Pycnocline tutorial</title><link>https://british-oceanographic-data-centre.github.io/COAsT/docs/examples/notebooks/gridded/pycnocline_tutorial/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://british-oceanographic-data-centre.github.io/COAsT/docs/examples/notebooks/gridded/pycnocline_tutorial/</guid><description>
&lt;p>A demonstration of pycnocline depth and thickness diagnostics. The first and second depth moments of stratification are computed as proxies for pycnocline depth and thickness, suitable for a nearly two-layer fluid.&lt;/p>
&lt;p>Note that in the AMM7 example data the plots are not particularly spectacular as the internal tide is poorly resolved at 7km.&lt;/p>
&lt;h3 id="relevant-imports-and-filepath-configuration">Relevant imports and filepath configuration&lt;/h3>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">&lt;span style="color:#204a87;font-weight:bold">import&lt;/span> &lt;span style="color:#000">coast&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">import&lt;/span> &lt;span style="color:#000">numpy&lt;/span> &lt;span style="color:#204a87;font-weight:bold">as&lt;/span> &lt;span style="color:#000">np&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">import&lt;/span> &lt;span style="color:#000">os&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">import&lt;/span> &lt;span style="color:#000">matplotlib.pyplot&lt;/span> &lt;span style="color:#204a87;font-weight:bold">as&lt;/span> &lt;span style="color:#000">plt&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">import&lt;/span> &lt;span style="color:#000">matplotlib.colors&lt;/span> &lt;span style="color:#204a87;font-weight:bold">as&lt;/span> &lt;span style="color:#000">colors&lt;/span> &lt;span style="color:#8f5902;font-style:italic"># colormap fiddling&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">&lt;span style="color:#8f5902;font-style:italic"># set some paths&lt;/span>
&lt;span style="color:#000">root&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;./&amp;#34;&lt;/span>
&lt;span style="color:#000">dn_files&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000">root&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">+&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;./example_files/&amp;#34;&lt;/span>
&lt;span style="color:#000">fn_nemo_grid_t_dat&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000">dn_files&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">+&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;nemo_data_T_grid_Aug2015.nc&amp;#34;&lt;/span>
&lt;span style="color:#000">fn_nemo_dom&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000">dn_files&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">+&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;coast_example_nemo_domain.nc&amp;#34;&lt;/span>
&lt;span style="color:#000">config_t&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000">root&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">+&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;./config/example_nemo_grid_t.json&amp;#34;&lt;/span>
&lt;span style="color:#000">config_w&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000">root&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">+&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;./config/example_nemo_grid_w.json&amp;#34;&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="loading-data">Loading data&lt;/h3>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">&lt;span style="color:#8f5902;font-style:italic"># Create a Gridded object and load in the data:&lt;/span>
&lt;span style="color:#000">nemo_t&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000">coast&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">Gridded&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">fn_nemo_grid_t_dat&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">fn_nemo_dom&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">config&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#000">config_t&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">&lt;span style="color:#8f5902;font-style:italic">#nemo_t.dataset # uncomment to print data object summary&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">&lt;span style="color:#8f5902;font-style:italic"># The stratification variables are computed as centred differences of the t-grid variables. &lt;/span>
&lt;span style="color:#8f5902;font-style:italic"># These will become w-grid variables. So, create an empty w-grid object, to store stratification. &lt;/span>
&lt;span style="color:#8f5902;font-style:italic"># Note how we do not pass a NEMO data file for this load.&lt;/span>
&lt;span style="color:#000">nemo_w&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000">coast&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">Gridded&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">fn_domain&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#000">fn_nemo_dom&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">config&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#000">config_w&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="subset-the-domain">Subset the domain&lt;/h3>
&lt;p>We are not interested in the whole doman so it is computationally efficient to subset the data for the region of interest. Here we will look at the North Sea between (51N: 62N) and (-4E:15E).
We will great subset objects for both the t- and w-grids:&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">&lt;span style="color:#000">ind_2d&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000">nemo_t&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">subset_indices&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">start&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#000;font-weight:bold">[&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">51&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">-&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">4&lt;/span>&lt;span style="color:#000;font-weight:bold">],&lt;/span> &lt;span style="color:#000">end&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#000;font-weight:bold">[&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">62&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">15&lt;/span>&lt;span style="color:#000;font-weight:bold">])&lt;/span>
&lt;span style="color:#000">nemo_nwes_t&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000">nemo_t&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">isel&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">y_dim&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#000">ind_2d&lt;/span>&lt;span style="color:#000;font-weight:bold">[&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">0&lt;/span>&lt;span style="color:#000;font-weight:bold">],&lt;/span> &lt;span style="color:#000">x_dim&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#000">ind_2d&lt;/span>&lt;span style="color:#000;font-weight:bold">[&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">1&lt;/span>&lt;span style="color:#000;font-weight:bold">])&lt;/span> &lt;span style="color:#8f5902;font-style:italic">#nwes = northwest european shelf&lt;/span>
&lt;span style="color:#000">ind_2d&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000">nemo_w&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">subset_indices&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">start&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#000;font-weight:bold">[&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">51&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">-&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">4&lt;/span>&lt;span style="color:#000;font-weight:bold">],&lt;/span> &lt;span style="color:#000">end&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#000;font-weight:bold">[&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">62&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">15&lt;/span>&lt;span style="color:#000;font-weight:bold">])&lt;/span>
&lt;span style="color:#000">nemo_nwes_w&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000">nemo_w&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">isel&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">y_dim&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#000">ind_2d&lt;/span>&lt;span style="color:#000;font-weight:bold">[&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">0&lt;/span>&lt;span style="color:#000;font-weight:bold">],&lt;/span> &lt;span style="color:#000">x_dim&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#000">ind_2d&lt;/span>&lt;span style="color:#000;font-weight:bold">[&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">1&lt;/span>&lt;span style="color:#000;font-weight:bold">])&lt;/span> &lt;span style="color:#8f5902;font-style:italic">#nwes = northwest european shelf&lt;/span>
&lt;span style="color:#8f5902;font-style:italic">#nemo_nwes_t.dataset # uncomment to print data object summary&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="diagnostic-calculations-and-plotting">Diagnostic calculations and plotting&lt;/h3>
&lt;p>We can use a COAsT method to construct the in-situ density:&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">&lt;span style="color:#000">nemo_nwes_t&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">construct_density&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span> &lt;span style="color:#000">eos&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#4e9a06">&amp;#39;EOS10&amp;#39;&lt;/span> &lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Then we construct stratification using a COAsT method to take the vertical derivative. Noting that the inputs are on t-pts and the outputs are on w-pt&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">&lt;span style="color:#000">nemo_nwes_w&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000">nemo_nwes_t&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">differentiate&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span> &lt;span style="color:#4e9a06">&amp;#39;density&amp;#39;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">dim&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#4e9a06">&amp;#39;z_dim&amp;#39;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">out_var_str&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#4e9a06">&amp;#39;rho_dz&amp;#39;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">out_obj&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#000">nemo_nwes_w&lt;/span> &lt;span style="color:#000;font-weight:bold">)&lt;/span> &lt;span style="color:#8f5902;font-style:italic"># --&amp;gt; sci_nwes_w.rho_dz&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>This has created a variable called &lt;code>nemo_nwes_w.rho_dz&lt;/code>.&lt;/p>
&lt;h3 id="create-internal-tide-diagnostics">Create internal tide diagnostics&lt;/h3>
&lt;p>We can now use the GriddedStratification class to construct the first and second moments (over depth) of density. In the limit of an idealised two-layer fluid these converge to the depth and thickness of the interface. I.e. the pycnocline depth and thickness respectively.&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">
&lt;span style="color:#000">strat&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000">coast&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">GriddedStratification&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">nemo_nwes_t&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;span style="color:#8f5902;font-style:italic">#%% Construct pycnocline variables: depth and thickness&lt;/span>
&lt;span style="color:#000">strat&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">construct_pycnocline_vars&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span> &lt;span style="color:#000">nemo_nwes_t&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">nemo_nwes_w&lt;/span> &lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;pre>&lt;code>/usr/share/miniconda/envs/coast/lib/python3.8/site-packages/xarray/core/computation.py:727: RuntimeWarning: invalid value encountered in sqrt
result_data = func(*input_data)
&lt;/code>&lt;/pre>
&lt;h3 id="plotting-data">Plotting data&lt;/h3>
&lt;p>Finally we plot pycnocline variables (depth and thickness) using an GriddedStratification method:&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">&lt;span style="color:#000">strat&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">quick_plot&lt;/span>&lt;span style="color:#000;font-weight:bold">()&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;img src="https://british-oceanographic-data-centre.github.io/COAsT/COAsT/pycnocline_tutorial_files/pycnocline_tutorial_17_0.png" alt="png">&lt;/p>
&lt;p>&lt;img src="https://british-oceanographic-data-centre.github.io/COAsT/COAsT/pycnocline_tutorial_files/pycnocline_tutorial_17_1.png" alt="png">&lt;/p>
&lt;pre>&lt;code>(&amp;lt;Figure size 1000x1000 with 2 Axes&amp;gt;,
&amp;lt;AxesSubplot: title={'center': '01 Aug 2015: masked pycnocline thickness (m)'}, xlabel='longitude', ylabel='latitude'&amp;gt;)
&lt;/code>&lt;/pre></description></item><item><title>Docs: Regridding with xesmf tutorial</title><link>https://british-oceanographic-data-centre.github.io/COAsT/docs/examples/notebooks/gridded/regridding_with_xesmf_tutorial/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://british-oceanographic-data-centre.github.io/COAsT/docs/examples/notebooks/gridded/regridding_with_xesmf_tutorial/</guid><description>
&lt;p>This is a demonstration on regridding in COAsT. To do this, the COAsT package uses the already capable &lt;code>xesmf&lt;/code> package, which will need to be installed independently (is not natively part of the COAsT package).&lt;/p>
&lt;h3 id="introduction">Introduction&lt;/h3>
&lt;p>COAsT uses XESMF by providing a data class &lt;code>xesmf_convert&lt;/code> which provides functions to prepare COAsT.Gridded objects, so they can be passed to XESMF for regridding to either a curvilinear or rectilienar grid.&lt;/p>
&lt;p>All you need to do if provide a Gridded object and a grid type when creating a new instance of this class. It will then contain an appropriate input dataset. You may also provide a second COAsT gridded object if regridding between two objects.&lt;/p>
&lt;h3 id="install-xesmf">Install XESMF&lt;/h3>
&lt;p>See the package&amp;rsquo;s documentation website here:&lt;/p>
&lt;pre>&lt;code>https://xesmf.readthedocs.io/en/latest/index.html
&lt;/code>&lt;/pre>
&lt;p>You can install XESMF using:&lt;/p>
&lt;pre>&lt;code> conda install -c conda-forge xesmf.
&lt;/code>&lt;/pre>
&lt;p>The setup used by this class has been tested for &lt;code>xesmf v0.6.2&lt;/code> alongside &lt;code>esmpy v8.0.0&lt;/code>. It was installed using:&lt;/p>
&lt;pre>&lt;code> conda install -c conda-forge xesmf esmpy=8.0.0
&lt;/code>&lt;/pre>
&lt;h3 id="example-useage">Example useage&lt;/h3>
&lt;p>If regridding a Gridded object to an arbitrarily defined rectilinear or curvilinear grid, you just need to do the following:&lt;/p>
&lt;pre>&lt;code>import xesmf as xe
# Create your gridded object
gridded = coast.Gridded(*args, **kwargs)
# Pass the gridded object over to xesmf_convert
xesmf_ready = coast.xesmf_convert(gridded, input_grid_type = 'curvilinear')
# Now this object will contain a dataset called xesmf_input, which can
# be passed over to xesmf. E.G:
destination_grid = xesmf.util.grid_2d(-15, 15, 1, 45, 65, 1)
regridder = xe.Regridder(xesmf_ready.input_grid, destination_grid, &amp;quot;bilinear&amp;quot;)
regridded_dataset = regridder(xesmf_ready.input_data)
&lt;/code>&lt;/pre>&lt;p>XESMF contains a couple of difference functions for quickly creating output
grids, such as xesmf.util.grid_2d and xesmf.util.grid_global(). See their
website for more info.&lt;/p>
&lt;p>The process is almost the same if regridding from one COAsT.Gridded object
to another (gridded0 -&amp;gt; gridded1):&lt;/p>
&lt;pre>&lt;code>xesmf_ready = coast.xesmf_convert(gridded0, gridded1,
input_grid_type = &amp;quot;curvilinear&amp;quot;,
output_grid_type = &amp;quot;curvilinear&amp;quot;)
regridder = xe.Regridder(xesmf_ready.input_grid,
xesmf_ready.output_grid, &amp;quot;bilinear&amp;quot;)
regridded_dataset = regridder(xesmf_ready.input_data)
&lt;/code>&lt;/pre>&lt;p>Note that you can select which variables you want to regrid, either prior
to using this tool or by indexing the input_data dataset. e.g.:&lt;/p>
&lt;pre>&lt;code>regridded_dataset = regridder(xesmf_ready.input_data['temperature'])
&lt;/code>&lt;/pre>&lt;p>If your input datasets were lazy loaded, then so will the regridded dataset.
At this point you can either load the data or (recomended) save the regridded
data to file:&lt;/p>
&lt;pre>&lt;code>regridded_dataset.to_netcdf(&amp;lt;filename_to_save&amp;gt;)
&lt;/code>&lt;/pre>&lt;p>Before saving back to file, call xesmf_ready.to_gridded() to convert
the regridded xesmf object back to a gridded object&lt;/p>
&lt;h3 id="compatability-note">Compatability Note&lt;/h3>
&lt;p>(written 8 Sept 2022)
&lt;code>xesmf&lt;/code> is not included natively within COAsT as satisfying all the dependencies within COAsT gets increasingly challenging with more components in COAsT. So whilst valuable, &lt;code>xesmf&lt;/code> is currently deemed not core. Here are some notes from a user on its installation with conda:&lt;/p>
&lt;pre>&lt;code>A conda environemt with `esmpy=8.0.0` specified and `xesmf` version unspecified works suggests a downgrade of:
netCDF4 1.5.6
scipy 1.5.3
lxml 4.8
A solution to avoid the downgrade maybe found in
https://github.com/pangeo-data/pangeo-docker-images/issues/101
conda create â€¦ &amp;quot;mpi==openmpi&amp;quot; &amp;quot;esmpy==mpi_openmpi*&amp;quot; xesmf
&lt;/code>&lt;/pre>&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">
&lt;/code>&lt;/pre>&lt;/div></description></item><item><title>Docs: Seasia dic example plot tutorial</title><link>https://british-oceanographic-data-centre.github.io/COAsT/docs/examples/notebooks/gridded/seasia_dic_example_plot_tutorial/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://british-oceanographic-data-centre.github.io/COAsT/docs/examples/notebooks/gridded/seasia_dic_example_plot_tutorial/</guid><description>
&lt;p>Tutorial to make a simple SEAsia 1/12 deg DIC plot.&lt;/p>
&lt;h3 id="import-the-relevant-packages">Import the relevant packages&lt;/h3>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">&lt;span style="color:#204a87;font-weight:bold">import&lt;/span> &lt;span style="color:#000">coast&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">import&lt;/span> &lt;span style="color:#000">matplotlib.pyplot&lt;/span> &lt;span style="color:#204a87;font-weight:bold">as&lt;/span> &lt;span style="color:#000">plt&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="define-file-paths-for-data">Define file paths for data&lt;/h3>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">&lt;span style="color:#000">root&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;./&amp;#34;&lt;/span>
&lt;span style="color:#000">dn_files&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000">root&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">+&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;./example_files/&amp;#34;&lt;/span>
&lt;span style="color:#000">path_config&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000">root&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">+&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;./config/&amp;#34;&lt;/span>
&lt;span style="color:#000">fn_seasia_domain&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000">dn_files&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">+&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;coast_example_domain_SEAsia.nc&amp;#34;&lt;/span>
&lt;span style="color:#000">fn_seasia_var&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000">dn_files&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">+&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;coast_example_SEAsia_BGC_1990.nc&amp;#34;&lt;/span>
&lt;span style="color:#000">fn_seasia_config_bgc&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000">path_config&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">+&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;example_nemo_bgc.json&amp;#34;&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="create-a-gridded-object">Create a Gridded object&lt;/h3>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">&lt;span style="color:#000">seasia_bgc&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000">coast&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">Gridded&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">fn_data&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#000">fn_seasia_var&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">fn_domain&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#000">fn_seasia_domain&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">config&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#000">fn_seasia_config_bgc&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="plot-dic">Plot DIC&lt;/h3>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">&lt;span style="color:#000">fig&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000">plt&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">figure&lt;/span>&lt;span style="color:#000;font-weight:bold">()&lt;/span>
&lt;span style="color:#000">plt&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">pcolormesh&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>
&lt;span style="color:#000">seasia_bgc&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">dataset&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">longitude&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>
&lt;span style="color:#000">seasia_bgc&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">dataset&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">latitude&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>
&lt;span style="color:#000">seasia_bgc&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">dataset&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">dic&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">isel&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">t_dim&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">0&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">isel&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">z_dim&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">0&lt;/span>&lt;span style="color:#000;font-weight:bold">),&lt;/span>
&lt;span style="color:#000">cmap&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;RdYlBu_r&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>
&lt;span style="color:#000">vmin&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">1600&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>
&lt;span style="color:#000">vmax&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">2080&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>
&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;span style="color:#000">plt&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">colorbar&lt;/span>&lt;span style="color:#000;font-weight:bold">()&lt;/span>
&lt;span style="color:#000">plt&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">title&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;DIC, mmol/m^3&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;span style="color:#000">plt&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">xlabel&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;longitude&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;span style="color:#000">plt&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">ylabel&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;latitude&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;span style="color:#000">plt&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">show&lt;/span>&lt;span style="color:#000;font-weight:bold">()&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;pre>&lt;code>/tmp/ipykernel_3889/1161426776.py:2: UserWarning: The input coordinates to pcolormesh are interpreted as cell centers, but are not monotonically increasing or decreasing. This may lead to incorrectly calculated cell edges, in which case, please supply explicit cell edges to pcolormesh.
plt.pcolormesh(
&lt;/code>&lt;/pre>
&lt;p>&lt;img src="https://british-oceanographic-data-centre.github.io/COAsT/COAsT/seasia_dic_example_plot_tutorial_files/seasia_dic_example_plot_tutorial_8_1.png" alt="png">&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">
&lt;/code>&lt;/pre>&lt;/div></description></item><item><title>Docs: Seasonal decomp example</title><link>https://british-oceanographic-data-centre.github.io/COAsT/docs/examples/notebooks/general/seasonal_decomp_example/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://british-oceanographic-data-centre.github.io/COAsT/docs/examples/notebooks/general/seasonal_decomp_example/</guid><description>
&lt;h2 id="overview">Overview&lt;/h2>
&lt;p>A function within the Process_data class that will decompose time series into trend, seasonal and residual components. The function is a wrapper that adds functionality to the &lt;code>seasonal_decompose&lt;/code> function contained in the &lt;a href="https://www.statsmodels.org/stable/generated/statsmodels.tsa.seasonal.seasonal_decompose.html#statsmodels.tsa.seasonal.seasonal_decompose">statsmodels&lt;/a> package to make it more convenient for large geospatial datasets.&lt;/p>
&lt;p>Specifically:&lt;/p>
&lt;ol>
&lt;li>Multiple time series spread across multiple dimensions, e.g. a gridded dataset, can be processed. The user simply passes in an xarray DataArray that has a &amp;ldquo;t_dim&amp;rdquo; dimension and 1 or more additional dimensions, for example gridded spatial dimensions&lt;/li>
&lt;li>Masked locations, such as land points, are handled&lt;/li>
&lt;li>A &lt;a href="https://www.dask.org/">dask&lt;/a> wrapper is applied to the function that
a) supports lazy evaluation
b) allows the dataset to be easily seperated into chunks so that processing can be carried out in parallel (rather than processing every time series sequentially)&lt;/li>
&lt;li>The decomposed time series are returned as xarray DataArrays within a single coast.Gridded object&lt;/li>
&lt;/ol>
&lt;h2 id="an-example">An example&lt;/h2>
&lt;p>Below is an example using the &lt;code>coast.Process_data.seasonal_decomposition&lt;/code> function with the example data. Note that we will artifically extend the length of the example data time series for demonstrative purposes.&lt;/p>
&lt;p>Begin by importing coast, defining paths to the data, and loading the example data into a gridded object:&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">&lt;span style="color:#204a87;font-weight:bold">import&lt;/span> &lt;span style="color:#000">coast&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">import&lt;/span> &lt;span style="color:#000">numpy&lt;/span> &lt;span style="color:#204a87;font-weight:bold">as&lt;/span> &lt;span style="color:#000">np&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">import&lt;/span> &lt;span style="color:#000">xarray&lt;/span> &lt;span style="color:#204a87;font-weight:bold">as&lt;/span> &lt;span style="color:#000">xr&lt;/span>
&lt;span style="color:#8f5902;font-style:italic"># Path to a data file&lt;/span>
&lt;span style="color:#000">root&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;./&amp;#34;&lt;/span>
&lt;span style="color:#000">dn_files&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000">root&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">+&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;./example_files/&amp;#34;&lt;/span>
&lt;span style="color:#000">fn_nemo_dat&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000">dn_files&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">+&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;coast_example_nemo_data.nc&amp;#34;&lt;/span>
&lt;span style="color:#8f5902;font-style:italic"># Set path for domain file if required.&lt;/span>
&lt;span style="color:#000">fn_nemo_dom&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000">dn_files&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">+&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;coast_example_nemo_domain.nc&amp;#34;&lt;/span>
&lt;span style="color:#8f5902;font-style:italic"># Set path for model configuration file&lt;/span>
&lt;span style="color:#000">config&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000">root&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">+&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;./config/example_nemo_grid_t.json&amp;#34;&lt;/span>
&lt;span style="color:#8f5902;font-style:italic"># Read in data (This example uses NEMO data.)&lt;/span>
&lt;span style="color:#000">grd&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000">coast&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">Gridded&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">fn_nemo_dat&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">fn_nemo_dom&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">config&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#000">config&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>The loaded example data only has 7 time stamps, the code below creates a new (fake) extended temperature variable with 48 monthly records. This code is not required to use the function, it is only included here to make a set of time series that are long enough to be interesting.&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">&lt;span style="color:#8f5902;font-style:italic"># create a 4 yr monthly time coordinate array&lt;/span>
&lt;span style="color:#000">time_array&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000">np&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">arange&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>
&lt;span style="color:#000">np&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">datetime64&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;2010-01-01&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">),&lt;/span> &lt;span style="color:#000">np&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">datetime64&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;2014-01-01&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">),&lt;/span> &lt;span style="color:#000">np&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">timedelta64&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">1&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;M&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">),&lt;/span> &lt;span style="color:#000">dtype&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;datetime64[M]&amp;#34;&lt;/span>
&lt;span style="color:#000;font-weight:bold">)&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">astype&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;datetime64[s]&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;span style="color:#8f5902;font-style:italic"># create 4 years of monthly temperature data based on the loaded data&lt;/span>
&lt;span style="color:#000">temperature_array&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000;font-weight:bold">(&lt;/span>
&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">np&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">arange&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">0&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">48&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">*&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">0.05&lt;/span>&lt;span style="color:#000;font-weight:bold">)[:,&lt;/span> &lt;span style="color:#000">np&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">newaxis&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">np&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">newaxis&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">np&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">newaxis&lt;/span>&lt;span style="color:#000;font-weight:bold">]&lt;/span>
&lt;span style="color:#ce5c00;font-weight:bold">+&lt;/span> &lt;span style="color:#000">np&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">random&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">normal&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">0&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">0.1&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">48&lt;/span>&lt;span style="color:#000;font-weight:bold">)[:,&lt;/span> &lt;span style="color:#000">np&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">newaxis&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">np&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">newaxis&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">np&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">newaxis&lt;/span>&lt;span style="color:#000;font-weight:bold">]&lt;/span>
&lt;span style="color:#ce5c00;font-weight:bold">+&lt;/span> &lt;span style="color:#000">np&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">tile&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">grd&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">dataset&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">temperature&lt;/span>&lt;span style="color:#000;font-weight:bold">[:&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">-&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">1&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">2&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000;font-weight:bold">:,&lt;/span> &lt;span style="color:#000;font-weight:bold">:],&lt;/span> &lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">8&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">1&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">1&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">1&lt;/span>&lt;span style="color:#000;font-weight:bold">))&lt;/span>
&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;span style="color:#8f5902;font-style:italic"># create a new temperature DataArray&lt;/span>
&lt;span style="color:#000">temperature&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000">xr&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">DataArray&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>
&lt;span style="color:#000">temperature_array&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>
&lt;span style="color:#000">coords&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;span style="color:#4e9a06">&amp;#34;t_dim&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#000">time_array&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>
&lt;span style="color:#4e9a06">&amp;#34;depth_0&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#000">grd&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">dataset&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">depth_0&lt;/span>&lt;span style="color:#000;font-weight:bold">[:&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">2&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000;font-weight:bold">:,&lt;/span> &lt;span style="color:#000;font-weight:bold">:],&lt;/span>
&lt;span style="color:#4e9a06">&amp;#34;longitude&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#000">grd&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">dataset&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">longitude&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>
&lt;span style="color:#4e9a06">&amp;#34;latitude&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#000">grd&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">dataset&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">latitude&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>
&lt;span style="color:#000;font-weight:bold">},&lt;/span>
&lt;span style="color:#000">dims&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#000;font-weight:bold">[&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;t_dim&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;z_dim&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;y_dim&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;x_dim&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">],&lt;/span>
&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Check out the new data&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">&lt;span style="color:#8f5902;font-style:italic">#temperature # uncomment to print data object summary&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">&lt;span style="color:#000">temperature&lt;/span>&lt;span style="color:#000;font-weight:bold">[&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">0&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">0&lt;/span>&lt;span style="color:#000;font-weight:bold">,:,:]&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">plot&lt;/span>&lt;span style="color:#000;font-weight:bold">()&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;pre>&lt;code>&amp;lt;matplotlib.collections.QuadMesh at 0x7fb418310ee0&amp;gt;
&lt;/code>&lt;/pre>
&lt;p>&lt;img src="https://british-oceanographic-data-centre.github.io/COAsT/COAsT/seasonal_decomp_example_files/seasonal_decomp_example_7_1.png" alt="png">&lt;/p>
&lt;p>Check out time series at 2 different grid points&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">&lt;span style="color:#000">temperature&lt;/span>&lt;span style="color:#000;font-weight:bold">[:,&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">0&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">50&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">50&lt;/span>&lt;span style="color:#000;font-weight:bold">]&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">plot&lt;/span>&lt;span style="color:#000;font-weight:bold">()&lt;/span>
&lt;span style="color:#000">temperature&lt;/span>&lt;span style="color:#000;font-weight:bold">[:,&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">0&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">200&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">200&lt;/span>&lt;span style="color:#000;font-weight:bold">]&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">plot&lt;/span>&lt;span style="color:#000;font-weight:bold">()&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;pre>&lt;code>[&amp;lt;matplotlib.lines.Line2D at 0x7fb41815a490&amp;gt;]
&lt;/code>&lt;/pre>
&lt;p>&lt;img src="https://british-oceanographic-data-centre.github.io/COAsT/COAsT/seasonal_decomp_example_files/seasonal_decomp_example_9_1.png" alt="png">&lt;/p>
&lt;p>Create a &lt;code>coast.Process_data&lt;/code> object, and call the &lt;code>seasonal_decomposition&lt;/code> function, passing in the required arguments. The first two arguments are:&lt;/p>
&lt;ol>
&lt;li>The input data, here the temperature data as an xarray DataArray&lt;/li>
&lt;li>The number of chuncks to split the data into. Here we split the data into 2 chunks so that the dask scheduler will try to run 4 processes in parallel&lt;/li>
&lt;/ol>
&lt;p>The remaining arguments are keyword arguments for the underlying &lt;code>statsmodels.tsa.seasonal.seasonal_decompose&lt;/code> function, which are documented on the &lt;a href="https://www.statsmodels.org/stable/generated/statsmodels.tsa.seasonal.seasonal_decompose.html#statsmodels.tsa.seasonal.seasonal_decompose">statsmodels documentation pages&lt;/a>. Here we specify:&lt;/p>
&lt;ol start="3">
&lt;li>three The type of model, i.e. an additive model&lt;/li>
&lt;li>The period of the seasonal cycle, here it is 6 months&lt;/li>
&lt;li>Extrapolate the trend component to cover the entire range of the time series (this is required because the trend is calculated using a convolution filter)&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">&lt;span style="color:#000">proc_data&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000">coast&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">Process_data&lt;/span>&lt;span style="color:#000;font-weight:bold">()&lt;/span>
&lt;span style="color:#000">grd&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000">proc_data&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">seasonal_decomposition&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">temperature&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">2&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">model&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;additive&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">period&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">6&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">extrapolate_trend&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;freq&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>The returned xarray Dataset contains the decomposed time series (trend, seasonal, residual) as dask arrays&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">&lt;span style="color:#8f5902;font-style:italic">#grd.dataset # uncomment to print data object summary&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Execute the computation&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">&lt;span style="color:#000">grd&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">dataset&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">compute&lt;/span>&lt;span style="color:#000;font-weight:bold">()&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;div>&lt;svg style="position: absolute; width: 0; height: 0; overflow: hidden">
&lt;defs>
&lt;symbol id="icon-database" viewBox="0 0 32 32">
&lt;path d="M16 0c-8.837 0-16 2.239-16 5v4c0 2.761 7.163 5 16 5s16-2.239 16-5v-4c0-2.761-7.163-5-16-5z">&lt;/path>
&lt;path d="M16 17c-8.837 0-16-2.239-16-5v6c0 2.761 7.163 5 16 5s16-2.239 16-5v-6c0 2.761-7.163 5-16 5z">&lt;/path>
&lt;path d="M16 26c-8.837 0-16-2.239-16-5v6c0 2.761 7.163 5 16 5s16-2.239 16-5v-6c0 2.761-7.163 5-16 5z">&lt;/path>
&lt;/symbol>
&lt;symbol id="icon-file-text2" viewBox="0 0 32 32">
&lt;path d="M28.681 7.159c-0.694-0.947-1.662-2.053-2.724-3.116s-2.169-2.030-3.116-2.724c-1.612-1.182-2.393-1.319-2.841-1.319h-15.5c-1.378 0-2.5 1.121-2.5 2.5v27c0 1.378 1.122 2.5 2.5 2.5h23c1.378 0 2.5-1.122 2.5-2.5v-19.5c0-0.448-0.137-1.23-1.319-2.841zM24.543 5.457c0.959 0.959 1.712 1.825 2.268 2.543h-4.811v-4.811c0.718 0.556 1.584 1.309 2.543 2.268zM28 29.5c0 0.271-0.229 0.5-0.5 0.5h-23c-0.271 0-0.5-0.229-0.5-0.5v-27c0-0.271 0.229-0.5 0.5-0.5 0 0 15.499-0 15.5 0v7c0 0.552 0.448 1 1 1h7v19.5z">&lt;/path>
&lt;path d="M23 26h-14c-0.552 0-1-0.448-1-1s0.448-1 1-1h14c0.552 0 1 0.448 1 1s-0.448 1-1 1z">&lt;/path>
&lt;path d="M23 22h-14c-0.552 0-1-0.448-1-1s0.448-1 1-1h14c0.552 0 1 0.448 1 1s-0.448 1-1 1z">&lt;/path>
&lt;path d="M23 18h-14c-0.552 0-1-0.448-1-1s0.448-1 1-1h14c0.552 0 1 0.448 1 1s-0.448 1-1 1z">&lt;/path>
&lt;/symbol>
&lt;/defs>
&lt;/svg>
&lt;style>/* CSS stylesheet for displaying xarray objects in jupyterlab.
*
*/
&lt;p>:root {
&amp;ndash;xr-font-color0: var(&amp;ndash;jp-content-font-color0, rgba(0, 0, 0, 1));
&amp;ndash;xr-font-color2: var(&amp;ndash;jp-content-font-color2, rgba(0, 0, 0, 0.54));
&amp;ndash;xr-font-color3: var(&amp;ndash;jp-content-font-color3, rgba(0, 0, 0, 0.38));
&amp;ndash;xr-border-color: var(&amp;ndash;jp-border-color2, #e0e0e0);
&amp;ndash;xr-disabled-color: var(&amp;ndash;jp-layout-color3, #bdbdbd);
&amp;ndash;xr-background-color: var(&amp;ndash;jp-layout-color0, white);
&amp;ndash;xr-background-color-row-even: var(&amp;ndash;jp-layout-color1, white);
&amp;ndash;xr-background-color-row-odd: var(&amp;ndash;jp-layout-color2, #eeeeee);
}&lt;/p>
&lt;p>html[theme=dark],
body.vscode-dark {
&amp;ndash;xr-font-color0: rgba(255, 255, 255, 1);
&amp;ndash;xr-font-color2: rgba(255, 255, 255, 0.54);
&amp;ndash;xr-font-color3: rgba(255, 255, 255, 0.38);
&amp;ndash;xr-border-color: #1F1F1F;
&amp;ndash;xr-disabled-color: #515151;
&amp;ndash;xr-background-color: #111111;
&amp;ndash;xr-background-color-row-even: #111111;
&amp;ndash;xr-background-color-row-odd: #313131;
}&lt;/p>
&lt;p>.xr-wrap {
display: block !important;
min-width: 300px;
max-width: 700px;
}&lt;/p>
&lt;p>.xr-text-repr-fallback {
/* fallback to plain text repr when CSS is not injected (untrusted notebook) */
display: none;
}&lt;/p>
&lt;p>.xr-header {
padding-top: 6px;
padding-bottom: 6px;
margin-bottom: 4px;
border-bottom: solid 1px var(&amp;ndash;xr-border-color);
}&lt;/p>
&lt;p>.xr-header &amp;gt; div,
.xr-header &amp;gt; ul {
display: inline;
margin-top: 0;
margin-bottom: 0;
}&lt;/p>
&lt;p>.xr-obj-type,
.xr-array-name {
margin-left: 2px;
margin-right: 10px;
}&lt;/p>
&lt;p>.xr-obj-type {
color: var(&amp;ndash;xr-font-color2);
}&lt;/p>
&lt;p>.xr-sections {
padding-left: 0 !important;
display: grid;
grid-template-columns: 150px auto auto 1fr 20px 20px;
}&lt;/p>
&lt;p>.xr-section-item {
display: contents;
}&lt;/p>
&lt;p>.xr-section-item input {
display: none;
}&lt;/p>
&lt;p>.xr-section-item input + label {
color: var(&amp;ndash;xr-disabled-color);
}&lt;/p>
&lt;p>.xr-section-item input:enabled + label {
cursor: pointer;
color: var(&amp;ndash;xr-font-color2);
}&lt;/p>
&lt;p>.xr-section-item input:enabled + label:hover {
color: var(&amp;ndash;xr-font-color0);
}&lt;/p>
&lt;p>.xr-section-summary {
grid-column: 1;
color: var(&amp;ndash;xr-font-color2);
font-weight: 500;
}&lt;/p>
&lt;p>.xr-section-summary &amp;gt; span {
display: inline-block;
padding-left: 0.5em;
}&lt;/p>
&lt;p>.xr-section-summary-in:disabled + label {
color: var(&amp;ndash;xr-font-color2);
}&lt;/p>
&lt;p>.xr-section-summary-in + label:before {
display: inline-block;
content: &amp;lsquo;â–º&amp;rsquo;;
font-size: 11px;
width: 15px;
text-align: center;
}&lt;/p>
&lt;p>.xr-section-summary-in:disabled + label:before {
color: var(&amp;ndash;xr-disabled-color);
}&lt;/p>
&lt;p>.xr-section-summary-in:checked + label:before {
content: &amp;lsquo;â–¼&amp;rsquo;;
}&lt;/p>
&lt;p>.xr-section-summary-in:checked + label &amp;gt; span {
display: none;
}&lt;/p>
&lt;p>.xr-section-summary,
.xr-section-inline-details {
padding-top: 4px;
padding-bottom: 4px;
}&lt;/p>
&lt;p>.xr-section-inline-details {
grid-column: 2 / -1;
}&lt;/p>
&lt;p>.xr-section-details {
display: none;
grid-column: 1 / -1;
margin-bottom: 5px;
}&lt;/p>
&lt;p>.xr-section-summary-in:checked ~ .xr-section-details {
display: contents;
}&lt;/p>
&lt;p>.xr-array-wrap {
grid-column: 1 / -1;
display: grid;
grid-template-columns: 20px auto;
}&lt;/p>
&lt;p>.xr-array-wrap &amp;gt; label {
grid-column: 1;
vertical-align: top;
}&lt;/p>
&lt;p>.xr-preview {
color: var(&amp;ndash;xr-font-color3);
}&lt;/p>
&lt;p>.xr-array-preview,
.xr-array-data {
padding: 0 5px !important;
grid-column: 2;
}&lt;/p>
&lt;p>.xr-array-data,
.xr-array-in:checked ~ .xr-array-preview {
display: none;
}&lt;/p>
&lt;p>.xr-array-in:checked ~ .xr-array-data,
.xr-array-preview {
display: inline-block;
}&lt;/p>
&lt;p>.xr-dim-list {
display: inline-block !important;
list-style: none;
padding: 0 !important;
margin: 0;
}&lt;/p>
&lt;p>.xr-dim-list li {
display: inline-block;
padding: 0;
margin: 0;
}&lt;/p>
&lt;p>.xr-dim-list:before {
content: &amp;lsquo;(';
}&lt;/p>
&lt;p>.xr-dim-list:after {
content: &amp;lsquo;)';
}&lt;/p>
&lt;p>.xr-dim-list li:not(:last-child):after {
content: &amp;lsquo;,';
padding-right: 5px;
}&lt;/p>
&lt;p>.xr-has-index {
font-weight: bold;
}&lt;/p>
&lt;p>.xr-var-list,
.xr-var-item {
display: contents;
}&lt;/p>
&lt;p>.xr-var-item &amp;gt; div,
.xr-var-item label,
.xr-var-item &amp;gt; .xr-var-name span {
background-color: var(&amp;ndash;xr-background-color-row-even);
margin-bottom: 0;
}&lt;/p>
&lt;p>.xr-var-item &amp;gt; .xr-var-name:hover span {
padding-right: 5px;
}&lt;/p>
&lt;p>.xr-var-list &amp;gt; li:nth-child(odd) &amp;gt; div,
.xr-var-list &amp;gt; li:nth-child(odd) &amp;gt; label,
.xr-var-list &amp;gt; li:nth-child(odd) &amp;gt; .xr-var-name span {
background-color: var(&amp;ndash;xr-background-color-row-odd);
}&lt;/p>
&lt;p>.xr-var-name {
grid-column: 1;
}&lt;/p>
&lt;p>.xr-var-dims {
grid-column: 2;
}&lt;/p>
&lt;p>.xr-var-dtype {
grid-column: 3;
text-align: right;
color: var(&amp;ndash;xr-font-color2);
}&lt;/p>
&lt;p>.xr-var-preview {
grid-column: 4;
}&lt;/p>
&lt;p>.xr-var-name,
.xr-var-dims,
.xr-var-dtype,
.xr-preview,
.xr-attrs dt {
white-space: nowrap;
overflow: hidden;
text-overflow: ellipsis;
padding-right: 10px;
}&lt;/p>
&lt;p>.xr-var-name:hover,
.xr-var-dims:hover,
.xr-var-dtype:hover,
.xr-attrs dt:hover {
overflow: visible;
width: auto;
z-index: 1;
}&lt;/p>
&lt;p>.xr-var-attrs,
.xr-var-data {
display: none;
background-color: var(&amp;ndash;xr-background-color) !important;
padding-bottom: 5px !important;
}&lt;/p>
&lt;p>.xr-var-attrs-in:checked ~ .xr-var-attrs,
.xr-var-data-in:checked ~ .xr-var-data {
display: block;
}&lt;/p>
&lt;p>.xr-var-data &amp;gt; table {
float: right;
}&lt;/p>
&lt;p>.xr-var-name span,
.xr-var-data,
.xr-attrs {
padding-left: 25px !important;
}&lt;/p>
&lt;p>.xr-attrs,
.xr-var-attrs,
.xr-var-data {
grid-column: 1 / -1;
}&lt;/p>
&lt;p>dl.xr-attrs {
padding: 0;
margin: 0;
display: grid;
grid-template-columns: 125px auto;
}&lt;/p>
&lt;p>.xr-attrs dt,
.xr-attrs dd {
padding: 0;
margin: 0;
float: left;
padding-right: 10px;
width: auto;
}&lt;/p>
&lt;p>.xr-attrs dt {
font-weight: normal;
grid-column: 1;
}&lt;/p>
&lt;p>.xr-attrs dt:hover span {
display: inline-block;
background: var(&amp;ndash;xr-background-color);
padding-right: 10px;
}&lt;/p>
&lt;p>.xr-attrs dd {
grid-column: 2;
white-space: pre-wrap;
word-break: break-all;
}&lt;/p>
&lt;p>.xr-icon-database,
.xr-icon-file-text2 {
display: inline-block;
vertical-align: middle;
width: 1em;
height: 1.5em !important;
stroke-width: 0;
stroke: currentColor;
fill: currentColor;
}
&lt;/style>&lt;pre class='xr-text-repr-fallback'>&amp;lt;xarray.Dataset&amp;gt;
Dimensions: (t_dim: 48, z_dim: 2, y_dim: 375, x_dim: 297)
Coordinates:&lt;/p>
&lt;ul>
&lt;li>
&lt;p>t_dim (t_dim) datetime64[ns] 2010-01-01 2010-02-01 &amp;hellip; 2013-12-01
depth_0 (z_dim, y_dim, x_dim) float32 0.5 0.5 0.5 0.5 &amp;hellip; 1.5 1.5 1.5 1.5
longitude (y_dim, x_dim) float32 -19.89 -19.78 -19.67 &amp;hellip; 12.78 12.89 13.0
latitude (y_dim, x_dim) float32 40.07 40.07 40.07 40.07 &amp;hellip; 65.0 65.0 65.0
Dimensions without coordinates: z_dim, y_dim, x_dim
Data variables:
trend (t_dim, z_dim, y_dim, x_dim) float64 nan nan nan &amp;hellip; nan nan nan
seasonal (t_dim, z_dim, y_dim, x_dim) float64 nan nan nan &amp;hellip; nan nan nan
residual (t_dim, z_dim, y_dim, x_dim) float64 nan nan nan &amp;hellip; nan nan nan&lt;/pre>&lt;div class='xr-wrap' style='display:none'>&lt;div class='xr-header'>&lt;div class='xr-obj-type'>xarray.Dataset&lt;/div>&lt;/div>&lt;ul class='xr-sections'>&lt;li class='xr-section-item'>&lt;input id='section-72244310-032f-48e4-b86c-833a66ac8c21' class='xr-section-summary-in' type='checkbox' disabled >&lt;label for='section-72244310-032f-48e4-b86c-833a66ac8c21' class='xr-section-summary' title='Expand/collapse section'>Dimensions:&lt;/label>&lt;div class='xr-section-inline-details'>&lt;ul class='xr-dim-list'>&lt;li>&lt;span class='xr-has-index'>t_dim&lt;/span>: 48&lt;/li>&lt;li>&lt;span>z_dim&lt;/span>: 2&lt;/li>&lt;li>&lt;span>y_dim&lt;/span>: 375&lt;/li>&lt;li>&lt;span>x_dim&lt;/span>: 297&lt;/li>&lt;/ul>&lt;/div>&lt;div class='xr-section-details'>&lt;/div>&lt;/li>&lt;li class='xr-section-item'>&lt;input id='section-a8f7756f-6b28-475b-ae65-6e729c83fd22' class='xr-section-summary-in' type='checkbox' checked>&lt;label for='section-a8f7756f-6b28-475b-ae65-6e729c83fd22' class='xr-section-summary' >Coordinates: &lt;span>(4)&lt;/span>&lt;/label>&lt;div class='xr-section-inline-details'>&lt;/div>&lt;div class='xr-section-details'>&lt;ul class='xr-var-list'>&lt;li class='xr-var-item'>&lt;div class='xr-var-name'>&lt;span class='xr-has-index'>t_dim&lt;/span>&lt;/div>&lt;div class='xr-var-dims'>(t_dim)&lt;/div>&lt;div class='xr-var-dtype'>datetime64[ns]&lt;/div>&lt;div class='xr-var-preview xr-preview'>2010-01-01 &amp;hellip; 2013-12-01&lt;/div>&lt;input id='attrs-99b4be37-6dfd-4b20-b3cd-dc5b0feab076' class='xr-var-attrs-in' type='checkbox' disabled>&lt;label for='attrs-99b4be37-6dfd-4b20-b3cd-dc5b0feab076' title='Show/Hide attributes'>&lt;svg class='icon xr-icon-file-text2'>&lt;use xlink:href='#icon-file-text2'>&lt;/use>&lt;/svg>&lt;/label>&lt;input id='data-cda654d6-7eb9-4042-860f-beb73a27bd23' class='xr-var-data-in' type='checkbox'>&lt;label for='data-cda654d6-7eb9-4042-860f-beb73a27bd23' title='Show/Hide data repr'>&lt;svg class='icon xr-icon-database'>&lt;use xlink:href='#icon-database'>&lt;/use>&lt;/svg>&lt;/label>&lt;div class='xr-var-attrs'>&lt;dl class='xr-attrs'>&lt;/dl>&lt;/div>&lt;div class='xr-var-data'>&lt;pre>array(['2010-01-01T00:00:00.000000000', '2010-02-01T00:00:00.000000000',
'2010-03-01T00:00:00.000000000', '2010-04-01T00:00:00.000000000',
'2010-05-01T00:00:00.000000000', '2010-06-01T00:00:00.000000000',
'2010-07-01T00:00:00.000000000', '2010-08-01T00:00:00.000000000',
'2010-09-01T00:00:00.000000000', '2010-10-01T00:00:00.000000000',
'2010-11-01T00:00:00.000000000', '2010-12-01T00:00:00.000000000',
'2011-01-01T00:00:00.000000000', '2011-02-01T00:00:00.000000000',
'2011-03-01T00:00:00.000000000', '2011-04-01T00:00:00.000000000',
'2011-05-01T00:00:00.000000000', '2011-06-01T00:00:00.000000000',
'2011-07-01T00:00:00.000000000', '2011-08-01T00:00:00.000000000',
'2011-09-01T00:00:00.000000000', '2011-10-01T00:00:00.000000000',
'2011-11-01T00:00:00.000000000', '2011-12-01T00:00:00.000000000',
'2012-01-01T00:00:00.000000000', '2012-02-01T00:00:00.000000000',
'2012-03-01T00:00:00.000000000', '2012-04-01T00:00:00.000000000',
'2012-05-01T00:00:00.000000000', '2012-06-01T00:00:00.000000000',
'2012-07-01T00:00:00.000000000', '2012-08-01T00:00:00.000000000',
'2012-09-01T00:00:00.000000000', '2012-10-01T00:00:00.000000000',
'2012-11-01T00:00:00.000000000', '2012-12-01T00:00:00.000000000',
'2013-01-01T00:00:00.000000000', '2013-02-01T00:00:00.000000000',
'2013-03-01T00:00:00.000000000', '2013-04-01T00:00:00.000000000',
'2013-05-01T00:00:00.000000000', '2013-06-01T00:00:00.000000000',
'2013-07-01T00:00:00.000000000', '2013-08-01T00:00:00.000000000',
'2013-09-01T00:00:00.000000000', '2013-10-01T00:00:00.000000000',
'2013-11-01T00:00:00.000000000', '2013-12-01T00:00:00.000000000'],
dtype='datetime64[ns]')&lt;/pre>&lt;/div>&lt;/li>&lt;li class='xr-var-item'>&lt;div class='xr-var-name'>&lt;span>depth_0&lt;/span>&lt;/div>&lt;div class='xr-var-dims'>(z_dim, y_dim, x_dim)&lt;/div>&lt;div class='xr-var-dtype'>float32&lt;/div>&lt;div class='xr-var-preview xr-preview'>0.5 0.5 0.5 0.5 &amp;hellip; 1.5 1.5 1.5 1.5&lt;/div>&lt;input id='attrs-0e2ea2d3-7508-4696-b15e-dec40e7d3b09' class='xr-var-attrs-in' type='checkbox' >&lt;label for='attrs-0e2ea2d3-7508-4696-b15e-dec40e7d3b09' title='Show/Hide attributes'>&lt;svg class='icon xr-icon-file-text2'>&lt;use xlink:href='#icon-file-text2'>&lt;/use>&lt;/svg>&lt;/label>&lt;input id='data-1b829f45-fb06-477c-80ec-03ece107f178' class='xr-var-data-in' type='checkbox'>&lt;label for='data-1b829f45-fb06-477c-80ec-03ece107f178' title='Show/Hide data repr'>&lt;svg class='icon xr-icon-database'>&lt;use xlink:href='#icon-database'>&lt;/use>&lt;/svg>&lt;/label>&lt;div class='xr-var-attrs'>&lt;dl class='xr-attrs'>&lt;dt>&lt;span>units :&lt;/span>&lt;/dt>&lt;dd>m&lt;/dd>&lt;dt>&lt;span>standard_name :&lt;/span>&lt;/dt>&lt;dd>Depth at time zero on the t-grid&lt;/dd>&lt;/dl>&lt;/div>&lt;div class='xr-var-data'>&lt;pre>array([[[0.5 , 0.5 , 0.5 , &amp;hellip;, 0.5 ,
0.5 , 0.5 ],
[0.5 , 0.4975586 , 0.4975586 , &amp;hellip;, 0.10009766,
0.10009766, 0.5 ],
[0.5 , 0.4975586 , 0.4975586 , &amp;hellip;, 0.10009766,
0.10009766, 0.5 ],
&amp;hellip;,
[0.5 , 0.10009766, 0.10009766, &amp;hellip;, 0.10009766,
0.10009766, 0.5 ],
[0.5 , 0.10009766, 0.10009766, &amp;hellip;, 0.10009766,
0.10009766, 0.5 ],
[0.5 , 0.5 , 0.5 , &amp;hellip;, 0.5 ,
0.5 , 0.5 ]],&lt;/p>
&lt;p>[[1.5 , 1.5 , 1.5 , &amp;hellip;, 1.5 ,
1.5 , 1.5 ],
[1.5 , 1.5170898 , 1.5170898 , &amp;hellip;, 0.30029297,
0.30029297, 1.5 ],
[1.5 , 1.5170898 , 1.5170898 , &amp;hellip;, 0.30029297,
0.30029297, 1.5 ],
&amp;hellip;,
[1.5 , 0.30029297, 0.30029297, &amp;hellip;, 0.30029297,
0.30029297, 1.5 ],
[1.5 , 0.30029297, 0.30029297, &amp;hellip;, 0.30029297,
0.30029297, 1.5 ],
[1.5 , 1.5 , 1.5 , &amp;hellip;, 1.5 ,
1.5 , 1.5 ]]], dtype=float32)&lt;/pre>&lt;/div>&lt;/li>&lt;li class='xr-var-item'>&lt;div class='xr-var-name'>&lt;span>longitude&lt;/span>&lt;/div>&lt;div class='xr-var-dims'>(y_dim, x_dim)&lt;/div>&lt;div class='xr-var-dtype'>float32&lt;/div>&lt;div class='xr-var-preview xr-preview'>-19.89 -19.78 -19.67 &amp;hellip; 12.89 13.0&lt;/div>&lt;input id='attrs-93f935f2-94bb-4319-88fa-a398446b3d6d' class='xr-var-attrs-in' type='checkbox' disabled>&lt;label for='attrs-93f935f2-94bb-4319-88fa-a398446b3d6d' title='Show/Hide attributes'>&lt;svg class='icon xr-icon-file-text2'>&lt;use xlink:href='#icon-file-text2'>&lt;/use>&lt;/svg>&lt;/label>&lt;input id='data-cac0f336-dc98-40ff-80e6-dcdc9a7533c4' class='xr-var-data-in' type='checkbox'>&lt;label for='data-cac0f336-dc98-40ff-80e6-dcdc9a7533c4' title='Show/Hide data repr'>&lt;svg class='icon xr-icon-database'>&lt;use xlink:href='#icon-database'>&lt;/use>&lt;/svg>&lt;/label>&lt;div class='xr-var-attrs'>&lt;dl class='xr-attrs'>&lt;/dl>&lt;/div>&lt;div class='xr-var-data'>&lt;pre>array([[-19.888672, -19.777344, -19.666992, &amp;hellip;, 12.777344, 12.888672,
13. ],
[-19.888672, -19.777344, -19.666992, &amp;hellip;, 12.777344, 12.888672,
13. ],
[-19.888672, -19.777344, -19.666992, &amp;hellip;, 12.777344, 12.888672,
13. ],
&amp;hellip;,
[-19.888672, -19.777344, -19.666992, &amp;hellip;, 12.777344, 12.888672,
13. ],
[-19.888672, -19.777344, -19.666992, &amp;hellip;, 12.777344, 12.888672,
13. ],
[-19.888672, -19.777344, -19.666992, &amp;hellip;, 12.777344, 12.888672,
13. ]], dtype=float32)&lt;/pre>&lt;/div>&lt;/li>&lt;li class='xr-var-item'>&lt;div class='xr-var-name'>&lt;span>latitude&lt;/span>&lt;/div>&lt;div class='xr-var-dims'>(y_dim, x_dim)&lt;/div>&lt;div class='xr-var-dtype'>float32&lt;/div>&lt;div class='xr-var-preview xr-preview'>40.07 40.07 40.07 &amp;hellip; 65.0 65.0&lt;/div>&lt;input id='attrs-50a91d69-a96e-4331-b57d-c28789426a35' class='xr-var-attrs-in' type='checkbox' disabled>&lt;label for='attrs-50a91d69-a96e-4331-b57d-c28789426a35' title='Show/Hide attributes'>&lt;svg class='icon xr-icon-file-text2'>&lt;use xlink:href='#icon-file-text2'>&lt;/use>&lt;/svg>&lt;/label>&lt;input id='data-0027ee52-8abf-469d-880a-e02fdb05186e' class='xr-var-data-in' type='checkbox'>&lt;label for='data-0027ee52-8abf-469d-880a-e02fdb05186e' title='Show/Hide data repr'>&lt;svg class='icon xr-icon-database'>&lt;use xlink:href='#icon-database'>&lt;/use>&lt;/svg>&lt;/label>&lt;div class='xr-var-attrs'>&lt;dl class='xr-attrs'>&lt;/dl>&lt;/div>&lt;div class='xr-var-data'>&lt;pre>array([[40.066406, 40.066406, 40.066406, &amp;hellip;, 40.066406, 40.066406,
40.066406],
[40.13379 , 40.13379 , 40.13379 , &amp;hellip;, 40.13379 , 40.13379 ,
40.13379 ],
[40.200195, 40.200195, 40.200195, &amp;hellip;, 40.200195, 40.200195,
40.200195],
&amp;hellip;,
[64.868164, 64.868164, 64.868164, &amp;hellip;, 64.868164, 64.868164,
64.868164],
[64.93457 , 64.93457 , 64.93457 , &amp;hellip;, 64.93457 , 64.93457 ,
64.93457 ],
[65.00098 , 65.00098 , 65.00098 , &amp;hellip;, 65.00098 , 65.00098 ,
65.00098 ]], dtype=float32)&lt;/pre>&lt;/div>&lt;/li>&lt;/ul>&lt;/div>&lt;/li>&lt;li class='xr-section-item'>&lt;input id='section-197934c5-1716-44d8-ba20-ad8530829f77' class='xr-section-summary-in' type='checkbox' checked>&lt;label for='section-197934c5-1716-44d8-ba20-ad8530829f77' class='xr-section-summary' >Data variables: &lt;span>(3)&lt;/span>&lt;/label>&lt;div class='xr-section-inline-details'>&lt;/div>&lt;div class='xr-section-details'>&lt;ul class='xr-var-list'>&lt;li class='xr-var-item'>&lt;div class='xr-var-name'>&lt;span>trend&lt;/span>&lt;/div>&lt;div class='xr-var-dims'>(t_dim, z_dim, y_dim, x_dim)&lt;/div>&lt;div class='xr-var-dtype'>float64&lt;/div>&lt;div class='xr-var-preview xr-preview'>nan nan nan nan &amp;hellip; nan nan nan nan&lt;/div>&lt;input id='attrs-11e17313-4a9e-4c00-8048-b2b84a854a1d' class='xr-var-attrs-in' type='checkbox' disabled>&lt;label for='attrs-11e17313-4a9e-4c00-8048-b2b84a854a1d' title='Show/Hide attributes'>&lt;svg class='icon xr-icon-file-text2'>&lt;use xlink:href='#icon-file-text2'>&lt;/use>&lt;/svg>&lt;/label>&lt;input id='data-095c9c0c-0693-4aa9-9d6a-200dff794b7f' class='xr-var-data-in' type='checkbox'>&lt;label for='data-095c9c0c-0693-4aa9-9d6a-200dff794b7f' title='Show/Hide data repr'>&lt;svg class='icon xr-icon-database'>&lt;use xlink:href='#icon-database'>&lt;/use>&lt;/svg>&lt;/label>&lt;div class='xr-var-attrs'>&lt;dl class='xr-attrs'>&lt;/dl>&lt;/div>&lt;div class='xr-var-data'>&lt;pre>array([[[[ nan, nan, nan, &amp;hellip;, nan,
nan, nan],
[ nan, 15.37396157, 15.37070637, &amp;hellip;, nan,
nan, nan],
[ nan, 15.36289387, 15.53069986, &amp;hellip;, nan,
nan, nan],
&amp;hellip;,
[ nan, nan, nan, &amp;hellip;, nan,
nan, nan],
[ nan, nan, nan, &amp;hellip;, nan,
nan, nan],
[ nan, nan, nan, &amp;hellip;, nan,
nan, nan]],&lt;/p>
&lt;pre>&lt;code>[[ nan, nan, nan, ..., nan,
nan, nan],
[ nan, 15.37298501, 15.36989256, ..., nan,
nan, nan],
[ nan, 15.36175454, 15.53460611, ..., nan,
nan, nan],
&lt;/code>&lt;/pre>
&lt;/li>
&lt;/ul>
&lt;p>&amp;hellip;
[ nan, nan, nan, &amp;hellip;, nan,
nan, nan],
[ nan, nan, nan, &amp;hellip;, nan,
nan, nan],
[ nan, nan, nan, &amp;hellip;, nan,
nan, nan]],&lt;/p>
&lt;pre>&lt;code> [[ nan, nan, nan, ..., nan,
nan, nan],
[ nan, 17.86313266, 17.86004022, ..., nan,
nan, nan],
[ nan, 17.8519022 , 18.02475376, ..., nan,
nan, nan],
...,
[ nan, nan, nan, ..., nan,
nan, nan],
[ nan, nan, nan, ..., nan,
nan, nan],
[ nan, nan, nan, ..., nan,
nan, nan]]]])&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;&amp;lt;/li&amp;gt;&amp;lt;li class='xr-var-item'&amp;gt;&amp;lt;div class='xr-var-name'&amp;gt;&amp;lt;span&amp;gt;seasonal&amp;lt;/span&amp;gt;&amp;lt;/div&amp;gt;&amp;lt;div class='xr-var-dims'&amp;gt;(t_dim, z_dim, y_dim, x_dim)&amp;lt;/div&amp;gt;&amp;lt;div class='xr-var-dtype'&amp;gt;float64&amp;lt;/div&amp;gt;&amp;lt;div class='xr-var-preview xr-preview'&amp;gt;nan nan nan nan ... nan nan nan nan&amp;lt;/div&amp;gt;&amp;lt;input id='attrs-cdc36788-1d2c-4fa7-8ad3-74a39b0dcfef' class='xr-var-attrs-in' type='checkbox' disabled&amp;gt;&amp;lt;label for='attrs-cdc36788-1d2c-4fa7-8ad3-74a39b0dcfef' title='Show/Hide attributes'&amp;gt;&amp;lt;svg class='icon xr-icon-file-text2'&amp;gt;&amp;lt;use xlink:href='#icon-file-text2'&amp;gt;&amp;lt;/use&amp;gt;&amp;lt;/svg&amp;gt;&amp;lt;/label&amp;gt;&amp;lt;input id='data-d17265a9-8ad4-4109-b38c-21ec19ee725b' class='xr-var-data-in' type='checkbox'&amp;gt;&amp;lt;label for='data-d17265a9-8ad4-4109-b38c-21ec19ee725b' title='Show/Hide data repr'&amp;gt;&amp;lt;svg class='icon xr-icon-database'&amp;gt;&amp;lt;use xlink:href='#icon-database'&amp;gt;&amp;lt;/use&amp;gt;&amp;lt;/svg&amp;gt;&amp;lt;/label&amp;gt;&amp;lt;div class='xr-var-attrs'&amp;gt;&amp;lt;dl class='xr-attrs'&amp;gt;&amp;lt;/dl&amp;gt;&amp;lt;/div&amp;gt;&amp;lt;div class='xr-var-data'&amp;gt;&amp;lt;pre&amp;gt;array([[[[ nan, nan, nan, ..., nan,
nan, nan],
[ nan, 0.00736926, -0.0762896 , ..., nan,
nan, nan],
[ nan, 0.0330854 , 0.26274035, ..., nan,
nan, nan],
...,
[ nan, nan, nan, ..., nan,
nan, nan],
[ nan, nan, nan, ..., nan,
nan, nan],
[ nan, nan, nan, ..., nan,
nan, nan]],
[[ nan, nan, nan, ..., nan,
nan, nan],
[ nan, -0.00337293, -0.08719455, ..., nan,
nan, nan],
[ nan, 0.02250598, 0.2588341 , ..., nan,
nan, nan],
&lt;/code>&lt;/pre>
&lt;p>&amp;hellip;
[ nan, nan, nan, &amp;hellip;, nan,
nan, nan],
[ nan, nan, nan, &amp;hellip;, nan,
nan, nan],
[ nan, nan, nan, &amp;hellip;, nan,
nan, nan]],&lt;/p>
&lt;pre>&lt;code> [[ nan, nan, nan, ..., nan,
nan, nan],
[ nan, -0.37316681, -0.35640249, ..., nan,
nan, nan],
[ nan, -0.38342071, -0.73205353, ..., nan,
nan, nan],
...,
[ nan, nan, nan, ..., nan,
nan, nan],
[ nan, nan, nan, ..., nan,
nan, nan],
[ nan, nan, nan, ..., nan,
nan, nan]]]])&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;&amp;lt;/li&amp;gt;&amp;lt;li class='xr-var-item'&amp;gt;&amp;lt;div class='xr-var-name'&amp;gt;&amp;lt;span&amp;gt;residual&amp;lt;/span&amp;gt;&amp;lt;/div&amp;gt;&amp;lt;div class='xr-var-dims'&amp;gt;(t_dim, z_dim, y_dim, x_dim)&amp;lt;/div&amp;gt;&amp;lt;div class='xr-var-dtype'&amp;gt;float64&amp;lt;/div&amp;gt;&amp;lt;div class='xr-var-preview xr-preview'&amp;gt;nan nan nan nan ... nan nan nan nan&amp;lt;/div&amp;gt;&amp;lt;input id='attrs-d0e7dc2d-44cc-4820-ab4c-01b6e344dfe9' class='xr-var-attrs-in' type='checkbox' disabled&amp;gt;&amp;lt;label for='attrs-d0e7dc2d-44cc-4820-ab4c-01b6e344dfe9' title='Show/Hide attributes'&amp;gt;&amp;lt;svg class='icon xr-icon-file-text2'&amp;gt;&amp;lt;use xlink:href='#icon-file-text2'&amp;gt;&amp;lt;/use&amp;gt;&amp;lt;/svg&amp;gt;&amp;lt;/label&amp;gt;&amp;lt;input id='data-90d4b0b0-0095-40a9-b933-df8316610550' class='xr-var-data-in' type='checkbox'&amp;gt;&amp;lt;label for='data-90d4b0b0-0095-40a9-b933-df8316610550' title='Show/Hide data repr'&amp;gt;&amp;lt;svg class='icon xr-icon-database'&amp;gt;&amp;lt;use xlink:href='#icon-database'&amp;gt;&amp;lt;/use&amp;gt;&amp;lt;/svg&amp;gt;&amp;lt;/label&amp;gt;&amp;lt;div class='xr-var-attrs'&amp;gt;&amp;lt;dl class='xr-attrs'&amp;gt;&amp;lt;/dl&amp;gt;&amp;lt;/div&amp;gt;&amp;lt;div class='xr-var-data'&amp;gt;&amp;lt;pre&amp;gt;array([[[[ nan, nan, nan, ..., nan,
nan, nan],
[ nan, 0.08352806, 0.08352806, ..., nan,
nan, nan],
[ nan, 0.08352806, 0.08352806, ..., nan,
nan, nan],
...,
[ nan, nan, nan, ..., nan,
nan, nan],
[ nan, nan, nan, ..., nan,
nan, nan],
[ nan, nan, nan, ..., nan,
nan, nan]],
[[ nan, nan, nan, ..., nan,
nan, nan],
[ nan, 0.08352806, 0.08352806, ..., nan,
nan, nan],
[ nan, 0.08352806, 0.08352806, ..., nan,
nan, nan],
&lt;/code>&lt;/pre>
&lt;p>&amp;hellip;
[ nan, nan, nan, &amp;hellip;, nan,
nan, nan],
[ nan, nan, nan, &amp;hellip;, nan,
nan, nan],
[ nan, nan, nan, &amp;hellip;, nan,
nan, nan]],&lt;/p>
&lt;pre>&lt;code> [[ nan, nan, nan, ..., nan,
nan, nan],
[ nan, -0.24759374, -0.24759374, ..., nan,
nan, nan],
[ nan, -0.24759374, -0.24759374, ..., nan,
nan, nan],
...,
[ nan, nan, nan, ..., nan,
nan, nan],
[ nan, nan, nan, ..., nan,
nan, nan],
[ nan, nan, nan, ..., nan,
nan, nan]]]])&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;&amp;lt;/li&amp;gt;&amp;lt;/ul&amp;gt;&amp;lt;/div&amp;gt;&amp;lt;/li&amp;gt;&amp;lt;li class='xr-section-item'&amp;gt;&amp;lt;input id='section-ea8c2603-bc1b-4533-9b0c-0f131c799681' class='xr-section-summary-in' type='checkbox' disabled &amp;gt;&amp;lt;label for='section-ea8c2603-bc1b-4533-9b0c-0f131c799681' class='xr-section-summary' title='Expand/collapse section'&amp;gt;Attributes: &amp;lt;span&amp;gt;(0)&amp;lt;/span&amp;gt;&amp;lt;/label&amp;gt;&amp;lt;div class='xr-section-inline-details'&amp;gt;&amp;lt;/div&amp;gt;&amp;lt;div class='xr-section-details'&amp;gt;&amp;lt;dl class='xr-attrs'&amp;gt;&amp;lt;/dl&amp;gt;&amp;lt;/div&amp;gt;&amp;lt;/li&amp;gt;&amp;lt;/ul&amp;gt;&amp;lt;/div&amp;gt;&amp;lt;/div&amp;gt;
&lt;/code>&lt;/pre>
&lt;p>Plot the decomposed time series&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">&lt;span style="color:#000">component&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000">xr&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">DataArray&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span> &lt;span style="color:#000;font-weight:bold">[&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;trend&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;seasonal&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;residual&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">],&lt;/span> &lt;span style="color:#000">dims&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;component&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">name&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;component&amp;#34;&lt;/span> &lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;span style="color:#000">temp_decomp&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000">xr&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">concat&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>
&lt;span style="color:#000;font-weight:bold">[&lt;/span>&lt;span style="color:#000">grd&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">dataset&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">trend&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">grd&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">dataset&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">seasonal&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>&lt;span style="color:#000">grd&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">dataset&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">residual&lt;/span>&lt;span style="color:#000;font-weight:bold">],&lt;/span> &lt;span style="color:#000">dim&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#000">component&lt;/span>
&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;span style="color:#000">temp_decomp&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">name&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;temperature&amp;#34;&lt;/span>
&lt;span style="color:#000">temp_decomp&lt;/span>&lt;span style="color:#000;font-weight:bold">[:,:,&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">0&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">200&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">200&lt;/span>&lt;span style="color:#000;font-weight:bold">]&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">plot&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">hue&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;component&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;pre>&lt;code>[&amp;lt;matplotlib.lines.Line2D at 0x7fb41800ef70&amp;gt;,
&amp;lt;matplotlib.lines.Line2D at 0x7fb41800efd0&amp;gt;,
&amp;lt;matplotlib.lines.Line2D at 0x7fb41800ea90&amp;gt;]
&lt;/code>&lt;/pre>
&lt;p>&lt;img src="https://british-oceanographic-data-centre.github.io/COAsT/COAsT/seasonal_decomp_example_files/seasonal_decomp_example_17_1.png" alt="png">&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">
&lt;/code>&lt;/pre>&lt;/div></description></item><item><title>Docs: Tidegauge validation tutorial</title><link>https://british-oceanographic-data-centre.github.io/COAsT/docs/examples/notebooks/tidegauge/tidegauge_validation_tutorial/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://british-oceanographic-data-centre.github.io/COAsT/docs/examples/notebooks/tidegauge/tidegauge_validation_tutorial/</guid><description>
&lt;p>This tutorial gives an overview of some of validation tools available when
using the Tidegauge objects in COAsT.&lt;/p>
&lt;p>This includes:&lt;/p>
&lt;ul>
&lt;li>creating tidegauge objects
&lt;ul>
&lt;li>reading in tidegauge data&lt;/li>
&lt;li>creating tidegauge object from gridded simulation data&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>basic plotting
&lt;ul>
&lt;li>on maps and timeseries&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>analysis
&lt;ul>
&lt;li>harmonic analysis and calculation of non-tidal residual&lt;/li>
&lt;li>doodsonX0 tidal filtering&lt;/li>
&lt;li>threshold statistics&lt;/li>
&lt;li>error calculation: mean errors, mean absolute error (MAE), mean square error (MSE)&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h3 id="import-necessary-libraries">Import necessary libraries&lt;/h3>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">&lt;span style="color:#204a87;font-weight:bold">import&lt;/span> &lt;span style="color:#000">xarray&lt;/span> &lt;span style="color:#204a87;font-weight:bold">as&lt;/span> &lt;span style="color:#000">xr&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">import&lt;/span> &lt;span style="color:#000">numpy&lt;/span> &lt;span style="color:#204a87;font-weight:bold">as&lt;/span> &lt;span style="color:#000">np&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">import&lt;/span> &lt;span style="color:#000">coast&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">import&lt;/span> &lt;span style="color:#000">datetime&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">import&lt;/span> &lt;span style="color:#000">matplotlib.pyplot&lt;/span> &lt;span style="color:#204a87;font-weight:bold">as&lt;/span> &lt;span style="color:#000">plt&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="define-paths">Define paths&lt;/h3>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">&lt;span style="color:#000">fn_dom&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;&amp;lt;PATH_TO_NEMO_DOMAIN&amp;gt;&amp;#34;&lt;/span>
&lt;span style="color:#000">fn_dat&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;&amp;lt;PATH_TO_NEMO_DATA&amp;gt;&amp;#34;&lt;/span>
&lt;span style="color:#000">fn_config&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;&amp;lt;PATH_TO_CONFIG.json&amp;gt;&amp;#34;&lt;/span>
&lt;span style="color:#000">fn_tg&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;&amp;lt;PATH_TO_TIDEGAUGE_NETCDF&amp;gt;&amp;#34;&lt;/span> &lt;span style="color:#8f5902;font-style:italic"># This should already be processed, on the same time dimension&lt;/span>
&lt;span style="color:#8f5902;font-style:italic"># Change this to 0 to not use default files.&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">if&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">1&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>
&lt;span style="color:#8f5902;font-style:italic">#print(f&amp;#34;Use default files&amp;#34;)&lt;/span>
&lt;span style="color:#204a87">dir&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;./example_files/&amp;#34;&lt;/span>
&lt;span style="color:#000">fn_dom&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#204a87">dir&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">+&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;coast_example_nemo_domain.nc&amp;#34;&lt;/span>
&lt;span style="color:#000">fn_dat&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#204a87">dir&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">+&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;coast_example_nemo_data.nc&amp;#34;&lt;/span>
&lt;span style="color:#000">fn_config&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;./config/example_nemo_grid_t.json&amp;#34;&lt;/span>
&lt;span style="color:#000">fn_tidegauge&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#204a87">dir&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">+&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;tide_gauges/lowestoft-p024-uk-bodc&amp;#34;&lt;/span>
&lt;span style="color:#000">fn_tg&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#204a87">dir&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">+&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;tide_gauges/coast_example_tidegauges.nc&amp;#34;&lt;/span> &lt;span style="color:#8f5902;font-style:italic"># These are a collection (xr.DataSet) of tidegauge observations. Created for this demonstration, they are synthetic.&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="reading-data">Reading data&lt;/h3>
&lt;p>We can create our empty tidegauge object:&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">&lt;span style="color:#000">tidegauge&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000">coast&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">Tidegauge&lt;/span>&lt;span style="color:#000;font-weight:bold">()&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;pre>&lt;code>Tidegauge object at 0x55b017f74fc0 initialised
&lt;/code>&lt;/pre>
&lt;p>The &lt;code>Tidegauge&lt;/code> class contains multiple methods for reading different typical
tidegauge formats. This includes reading from the GESLA and BODC databases.
To read a gesla file between two dates, we can use:&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">&lt;span style="color:#000">date0&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000">datetime&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">datetime&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">2007&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">1&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">10&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;span style="color:#000">date1&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000">datetime&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">datetime&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">2007&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">1&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">12&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;span style="color:#000">tidegauge&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">read_gesla_v3&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">fn_tidegauge&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">date_start&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000">date0&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">date_end&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000">date1&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>A Tidegauge object is a type of Timeseries object, so it has the form:&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">&lt;span style="color:#000">tidegauge&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">dataset&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;div>&lt;svg style="position: absolute; width: 0; height: 0; overflow: hidden">
&lt;defs>
&lt;symbol id="icon-database" viewBox="0 0 32 32">
&lt;path d="M16 0c-8.837 0-16 2.239-16 5v4c0 2.761 7.163 5 16 5s16-2.239 16-5v-4c0-2.761-7.163-5-16-5z">&lt;/path>
&lt;path d="M16 17c-8.837 0-16-2.239-16-5v6c0 2.761 7.163 5 16 5s16-2.239 16-5v-6c0 2.761-7.163 5-16 5z">&lt;/path>
&lt;path d="M16 26c-8.837 0-16-2.239-16-5v6c0 2.761 7.163 5 16 5s16-2.239 16-5v-6c0 2.761-7.163 5-16 5z">&lt;/path>
&lt;/symbol>
&lt;symbol id="icon-file-text2" viewBox="0 0 32 32">
&lt;path d="M28.681 7.159c-0.694-0.947-1.662-2.053-2.724-3.116s-2.169-2.030-3.116-2.724c-1.612-1.182-2.393-1.319-2.841-1.319h-15.5c-1.378 0-2.5 1.121-2.5 2.5v27c0 1.378 1.122 2.5 2.5 2.5h23c1.378 0 2.5-1.122 2.5-2.5v-19.5c0-0.448-0.137-1.23-1.319-2.841zM24.543 5.457c0.959 0.959 1.712 1.825 2.268 2.543h-4.811v-4.811c0.718 0.556 1.584 1.309 2.543 2.268zM28 29.5c0 0.271-0.229 0.5-0.5 0.5h-23c-0.271 0-0.5-0.229-0.5-0.5v-27c0-0.271 0.229-0.5 0.5-0.5 0 0 15.499-0 15.5 0v7c0 0.552 0.448 1 1 1h7v19.5z">&lt;/path>
&lt;path d="M23 26h-14c-0.552 0-1-0.448-1-1s0.448-1 1-1h14c0.552 0 1 0.448 1 1s-0.448 1-1 1z">&lt;/path>
&lt;path d="M23 22h-14c-0.552 0-1-0.448-1-1s0.448-1 1-1h14c0.552 0 1 0.448 1 1s-0.448 1-1 1z">&lt;/path>
&lt;path d="M23 18h-14c-0.552 0-1-0.448-1-1s0.448-1 1-1h14c0.552 0 1 0.448 1 1s-0.448 1-1 1z">&lt;/path>
&lt;/symbol>
&lt;/defs>
&lt;/svg>
&lt;style>/* CSS stylesheet for displaying xarray objects in jupyterlab.
*
*/
&lt;p>:root {
&amp;ndash;xr-font-color0: var(&amp;ndash;jp-content-font-color0, rgba(0, 0, 0, 1));
&amp;ndash;xr-font-color2: var(&amp;ndash;jp-content-font-color2, rgba(0, 0, 0, 0.54));
&amp;ndash;xr-font-color3: var(&amp;ndash;jp-content-font-color3, rgba(0, 0, 0, 0.38));
&amp;ndash;xr-border-color: var(&amp;ndash;jp-border-color2, #e0e0e0);
&amp;ndash;xr-disabled-color: var(&amp;ndash;jp-layout-color3, #bdbdbd);
&amp;ndash;xr-background-color: var(&amp;ndash;jp-layout-color0, white);
&amp;ndash;xr-background-color-row-even: var(&amp;ndash;jp-layout-color1, white);
&amp;ndash;xr-background-color-row-odd: var(&amp;ndash;jp-layout-color2, #eeeeee);
}&lt;/p>
&lt;p>html[theme=dark],
body.vscode-dark {
&amp;ndash;xr-font-color0: rgba(255, 255, 255, 1);
&amp;ndash;xr-font-color2: rgba(255, 255, 255, 0.54);
&amp;ndash;xr-font-color3: rgba(255, 255, 255, 0.38);
&amp;ndash;xr-border-color: #1F1F1F;
&amp;ndash;xr-disabled-color: #515151;
&amp;ndash;xr-background-color: #111111;
&amp;ndash;xr-background-color-row-even: #111111;
&amp;ndash;xr-background-color-row-odd: #313131;
}&lt;/p>
&lt;p>.xr-wrap {
display: block !important;
min-width: 300px;
max-width: 700px;
}&lt;/p>
&lt;p>.xr-text-repr-fallback {
/* fallback to plain text repr when CSS is not injected (untrusted notebook) */
display: none;
}&lt;/p>
&lt;p>.xr-header {
padding-top: 6px;
padding-bottom: 6px;
margin-bottom: 4px;
border-bottom: solid 1px var(&amp;ndash;xr-border-color);
}&lt;/p>
&lt;p>.xr-header &amp;gt; div,
.xr-header &amp;gt; ul {
display: inline;
margin-top: 0;
margin-bottom: 0;
}&lt;/p>
&lt;p>.xr-obj-type,
.xr-array-name {
margin-left: 2px;
margin-right: 10px;
}&lt;/p>
&lt;p>.xr-obj-type {
color: var(&amp;ndash;xr-font-color2);
}&lt;/p>
&lt;p>.xr-sections {
padding-left: 0 !important;
display: grid;
grid-template-columns: 150px auto auto 1fr 20px 20px;
}&lt;/p>
&lt;p>.xr-section-item {
display: contents;
}&lt;/p>
&lt;p>.xr-section-item input {
display: none;
}&lt;/p>
&lt;p>.xr-section-item input + label {
color: var(&amp;ndash;xr-disabled-color);
}&lt;/p>
&lt;p>.xr-section-item input:enabled + label {
cursor: pointer;
color: var(&amp;ndash;xr-font-color2);
}&lt;/p>
&lt;p>.xr-section-item input:enabled + label:hover {
color: var(&amp;ndash;xr-font-color0);
}&lt;/p>
&lt;p>.xr-section-summary {
grid-column: 1;
color: var(&amp;ndash;xr-font-color2);
font-weight: 500;
}&lt;/p>
&lt;p>.xr-section-summary &amp;gt; span {
display: inline-block;
padding-left: 0.5em;
}&lt;/p>
&lt;p>.xr-section-summary-in:disabled + label {
color: var(&amp;ndash;xr-font-color2);
}&lt;/p>
&lt;p>.xr-section-summary-in + label:before {
display: inline-block;
content: &amp;lsquo;â–º&amp;rsquo;;
font-size: 11px;
width: 15px;
text-align: center;
}&lt;/p>
&lt;p>.xr-section-summary-in:disabled + label:before {
color: var(&amp;ndash;xr-disabled-color);
}&lt;/p>
&lt;p>.xr-section-summary-in:checked + label:before {
content: &amp;lsquo;â–¼&amp;rsquo;;
}&lt;/p>
&lt;p>.xr-section-summary-in:checked + label &amp;gt; span {
display: none;
}&lt;/p>
&lt;p>.xr-section-summary,
.xr-section-inline-details {
padding-top: 4px;
padding-bottom: 4px;
}&lt;/p>
&lt;p>.xr-section-inline-details {
grid-column: 2 / -1;
}&lt;/p>
&lt;p>.xr-section-details {
display: none;
grid-column: 1 / -1;
margin-bottom: 5px;
}&lt;/p>
&lt;p>.xr-section-summary-in:checked ~ .xr-section-details {
display: contents;
}&lt;/p>
&lt;p>.xr-array-wrap {
grid-column: 1 / -1;
display: grid;
grid-template-columns: 20px auto;
}&lt;/p>
&lt;p>.xr-array-wrap &amp;gt; label {
grid-column: 1;
vertical-align: top;
}&lt;/p>
&lt;p>.xr-preview {
color: var(&amp;ndash;xr-font-color3);
}&lt;/p>
&lt;p>.xr-array-preview,
.xr-array-data {
padding: 0 5px !important;
grid-column: 2;
}&lt;/p>
&lt;p>.xr-array-data,
.xr-array-in:checked ~ .xr-array-preview {
display: none;
}&lt;/p>
&lt;p>.xr-array-in:checked ~ .xr-array-data,
.xr-array-preview {
display: inline-block;
}&lt;/p>
&lt;p>.xr-dim-list {
display: inline-block !important;
list-style: none;
padding: 0 !important;
margin: 0;
}&lt;/p>
&lt;p>.xr-dim-list li {
display: inline-block;
padding: 0;
margin: 0;
}&lt;/p>
&lt;p>.xr-dim-list:before {
content: &amp;lsquo;(';
}&lt;/p>
&lt;p>.xr-dim-list:after {
content: &amp;lsquo;)';
}&lt;/p>
&lt;p>.xr-dim-list li:not(:last-child):after {
content: &amp;lsquo;,';
padding-right: 5px;
}&lt;/p>
&lt;p>.xr-has-index {
font-weight: bold;
}&lt;/p>
&lt;p>.xr-var-list,
.xr-var-item {
display: contents;
}&lt;/p>
&lt;p>.xr-var-item &amp;gt; div,
.xr-var-item label,
.xr-var-item &amp;gt; .xr-var-name span {
background-color: var(&amp;ndash;xr-background-color-row-even);
margin-bottom: 0;
}&lt;/p>
&lt;p>.xr-var-item &amp;gt; .xr-var-name:hover span {
padding-right: 5px;
}&lt;/p>
&lt;p>.xr-var-list &amp;gt; li:nth-child(odd) &amp;gt; div,
.xr-var-list &amp;gt; li:nth-child(odd) &amp;gt; label,
.xr-var-list &amp;gt; li:nth-child(odd) &amp;gt; .xr-var-name span {
background-color: var(&amp;ndash;xr-background-color-row-odd);
}&lt;/p>
&lt;p>.xr-var-name {
grid-column: 1;
}&lt;/p>
&lt;p>.xr-var-dims {
grid-column: 2;
}&lt;/p>
&lt;p>.xr-var-dtype {
grid-column: 3;
text-align: right;
color: var(&amp;ndash;xr-font-color2);
}&lt;/p>
&lt;p>.xr-var-preview {
grid-column: 4;
}&lt;/p>
&lt;p>.xr-var-name,
.xr-var-dims,
.xr-var-dtype,
.xr-preview,
.xr-attrs dt {
white-space: nowrap;
overflow: hidden;
text-overflow: ellipsis;
padding-right: 10px;
}&lt;/p>
&lt;p>.xr-var-name:hover,
.xr-var-dims:hover,
.xr-var-dtype:hover,
.xr-attrs dt:hover {
overflow: visible;
width: auto;
z-index: 1;
}&lt;/p>
&lt;p>.xr-var-attrs,
.xr-var-data {
display: none;
background-color: var(&amp;ndash;xr-background-color) !important;
padding-bottom: 5px !important;
}&lt;/p>
&lt;p>.xr-var-attrs-in:checked ~ .xr-var-attrs,
.xr-var-data-in:checked ~ .xr-var-data {
display: block;
}&lt;/p>
&lt;p>.xr-var-data &amp;gt; table {
float: right;
}&lt;/p>
&lt;p>.xr-var-name span,
.xr-var-data,
.xr-attrs {
padding-left: 25px !important;
}&lt;/p>
&lt;p>.xr-attrs,
.xr-var-attrs,
.xr-var-data {
grid-column: 1 / -1;
}&lt;/p>
&lt;p>dl.xr-attrs {
padding: 0;
margin: 0;
display: grid;
grid-template-columns: 125px auto;
}&lt;/p>
&lt;p>.xr-attrs dt,
.xr-attrs dd {
padding: 0;
margin: 0;
float: left;
padding-right: 10px;
width: auto;
}&lt;/p>
&lt;p>.xr-attrs dt {
font-weight: normal;
grid-column: 1;
}&lt;/p>
&lt;p>.xr-attrs dt:hover span {
display: inline-block;
background: var(&amp;ndash;xr-background-color);
padding-right: 10px;
}&lt;/p>
&lt;p>.xr-attrs dd {
grid-column: 2;
white-space: pre-wrap;
word-break: break-all;
}&lt;/p>
&lt;p>.xr-icon-database,
.xr-icon-file-text2 {
display: inline-block;
vertical-align: middle;
width: 1em;
height: 1.5em !important;
stroke-width: 0;
stroke: currentColor;
fill: currentColor;
}
&lt;/style>&lt;pre class='xr-text-repr-fallback'>&amp;lt;xarray.Dataset&amp;gt;
Dimensions: (id_dim: 1, t_dim: 193)
Coordinates:
time (t_dim) datetime64[ns] 2007-01-10 &amp;hellip; 2007-01-12
longitude (id_dim) float64 1.751
latitude (id_dim) float64 52.47
id_name (id_dim) &amp;lt;U9 'Lowestoft'
Dimensions without coordinates: id_dim, t_dim
Data variables:
ssh (id_dim, t_dim) float64 2.818 2.823 2.871 &amp;hellip; 3.214 3.257 3.371
qc_flags (id_dim, t_dim) int64 1 1 1 1 1 1 1 1 1 1 &amp;hellip; 1 1 1 1 1 1 1 1 1 1&lt;/pre>&lt;div class='xr-wrap' style='display:none'>&lt;div class='xr-header'>&lt;div class='xr-obj-type'>xarray.Dataset&lt;/div>&lt;/div>&lt;ul class='xr-sections'>&lt;li class='xr-section-item'>&lt;input id='section-6f996409-8392-4f2f-84eb-b814709b937d' class='xr-section-summary-in' type='checkbox' disabled >&lt;label for='section-6f996409-8392-4f2f-84eb-b814709b937d' class='xr-section-summary' title='Expand/collapse section'>Dimensions:&lt;/label>&lt;div class='xr-section-inline-details'>&lt;ul class='xr-dim-list'>&lt;li>&lt;span>id_dim&lt;/span>: 1&lt;/li>&lt;li>&lt;span>t_dim&lt;/span>: 193&lt;/li>&lt;/ul>&lt;/div>&lt;div class='xr-section-details'>&lt;/div>&lt;/li>&lt;li class='xr-section-item'>&lt;input id='section-bdc76214-ab25-4250-9ca2-17b788e6d6b6' class='xr-section-summary-in' type='checkbox' checked>&lt;label for='section-bdc76214-ab25-4250-9ca2-17b788e6d6b6' class='xr-section-summary' >Coordinates: &lt;span>(4)&lt;/span>&lt;/label>&lt;div class='xr-section-inline-details'>&lt;/div>&lt;div class='xr-section-details'>&lt;ul class='xr-var-list'>&lt;li class='xr-var-item'>&lt;div class='xr-var-name'>&lt;span>time&lt;/span>&lt;/div>&lt;div class='xr-var-dims'>(t_dim)&lt;/div>&lt;div class='xr-var-dtype'>datetime64[ns]&lt;/div>&lt;div class='xr-var-preview xr-preview'>2007-01-10 &amp;hellip; 2007-01-12&lt;/div>&lt;input id='attrs-458e0adf-2ab8-4ed3-b788-06a8746752e5' class='xr-var-attrs-in' type='checkbox' disabled>&lt;label for='attrs-458e0adf-2ab8-4ed3-b788-06a8746752e5' title='Show/Hide attributes'>&lt;svg class='icon xr-icon-file-text2'>&lt;use xlink:href='#icon-file-text2'>&lt;/use>&lt;/svg>&lt;/label>&lt;input id='data-b04d2bb0-8dd0-452c-af3e-faea58c04f8d' class='xr-var-data-in' type='checkbox'>&lt;label for='data-b04d2bb0-8dd0-452c-af3e-faea58c04f8d' title='Show/Hide data repr'>&lt;svg class='icon xr-icon-database'>&lt;use xlink:href='#icon-database'>&lt;/use>&lt;/svg>&lt;/label>&lt;div class='xr-var-attrs'>&lt;dl class='xr-attrs'>&lt;/dl>&lt;/div>&lt;div class='xr-var-data'>&lt;pre>array(['2007-01-10T00:00:00.000000000', '2007-01-10T00:15:00.000000000',
'2007-01-10T00:30:00.000000000', '2007-01-10T00:45:00.000000000',
'2007-01-10T01:00:00.000000000', '2007-01-10T01:15:00.000000000',
'2007-01-10T01:30:00.000000000', '2007-01-10T01:45:00.000000000',
'2007-01-10T02:00:00.000000000', '2007-01-10T02:15:00.000000000',
'2007-01-10T02:30:00.000000000', '2007-01-10T02:45:00.000000000',
'2007-01-10T03:00:00.000000000', '2007-01-10T03:15:00.000000000',
'2007-01-10T03:30:00.000000000', '2007-01-10T03:45:00.000000000',
'2007-01-10T04:00:00.000000000', '2007-01-10T04:15:00.000000000',
'2007-01-10T04:30:00.000000000', '2007-01-10T04:45:00.000000000',
'2007-01-10T05:00:00.000000000', '2007-01-10T05:15:00.000000000',
'2007-01-10T05:30:00.000000000', '2007-01-10T05:45:00.000000000',
'2007-01-10T06:00:00.000000000', '2007-01-10T06:15:00.000000000',
'2007-01-10T06:30:00.000000000', '2007-01-10T06:45:00.000000000',
'2007-01-10T07:00:00.000000000', '2007-01-10T07:15:00.000000000',
'2007-01-10T07:30:00.000000000', '2007-01-10T07:45:00.000000000',
'2007-01-10T08:00:00.000000000', '2007-01-10T08:15:00.000000000',
'2007-01-10T08:30:00.000000000', '2007-01-10T08:45:00.000000000',
'2007-01-10T09:00:00.000000000', '2007-01-10T09:15:00.000000000',
'2007-01-10T09:30:00.000000000', '2007-01-10T09:45:00.000000000',
&amp;hellip;
'2007-01-11T14:30:00.000000000', '2007-01-11T14:45:00.000000000',
'2007-01-11T15:00:00.000000000', '2007-01-11T15:15:00.000000000',
'2007-01-11T15:30:00.000000000', '2007-01-11T15:45:00.000000000',
'2007-01-11T16:00:00.000000000', '2007-01-11T16:15:00.000000000',
'2007-01-11T16:30:00.000000000', '2007-01-11T16:45:00.000000000',
'2007-01-11T17:00:00.000000000', '2007-01-11T17:15:00.000000000',
'2007-01-11T17:30:00.000000000', '2007-01-11T17:45:00.000000000',
'2007-01-11T18:00:00.000000000', '2007-01-11T18:15:00.000000000',
'2007-01-11T18:30:00.000000000', '2007-01-11T18:45:00.000000000',
'2007-01-11T19:00:00.000000000', '2007-01-11T19:15:00.000000000',
'2007-01-11T19:30:00.000000000', '2007-01-11T19:45:00.000000000',
'2007-01-11T20:00:00.000000000', '2007-01-11T20:15:00.000000000',
'2007-01-11T20:30:00.000000000', '2007-01-11T20:45:00.000000000',
'2007-01-11T21:00:00.000000000', '2007-01-11T21:15:00.000000000',
'2007-01-11T21:30:00.000000000', '2007-01-11T21:45:00.000000000',
'2007-01-11T22:00:00.000000000', '2007-01-11T22:15:00.000000000',
'2007-01-11T22:30:00.000000000', '2007-01-11T22:45:00.000000000',
'2007-01-11T23:00:00.000000000', '2007-01-11T23:15:00.000000000',
'2007-01-11T23:30:00.000000000', '2007-01-11T23:45:00.000000000',
'2007-01-12T00:00:00.000000000'], dtype='datetime64[ns]')&lt;/pre>&lt;/div>&lt;/li>&lt;li class='xr-var-item'>&lt;div class='xr-var-name'>&lt;span>longitude&lt;/span>&lt;/div>&lt;div class='xr-var-dims'>(id_dim)&lt;/div>&lt;div class='xr-var-dtype'>float64&lt;/div>&lt;div class='xr-var-preview xr-preview'>1.751&lt;/div>&lt;input id='attrs-d54bd4ac-bc23-4ed1-a450-cc7f08b9e69c' class='xr-var-attrs-in' type='checkbox' disabled>&lt;label for='attrs-d54bd4ac-bc23-4ed1-a450-cc7f08b9e69c' title='Show/Hide attributes'>&lt;svg class='icon xr-icon-file-text2'>&lt;use xlink:href='#icon-file-text2'>&lt;/use>&lt;/svg>&lt;/label>&lt;input id='data-c6cdb637-eebd-4120-9252-cb0d9c153006' class='xr-var-data-in' type='checkbox'>&lt;label for='data-c6cdb637-eebd-4120-9252-cb0d9c153006' title='Show/Hide data repr'>&lt;svg class='icon xr-icon-database'>&lt;use xlink:href='#icon-database'>&lt;/use>&lt;/svg>&lt;/label>&lt;div class='xr-var-attrs'>&lt;dl class='xr-attrs'>&lt;/dl>&lt;/div>&lt;div class='xr-var-data'>&lt;pre>array([1.75083])&lt;/pre>&lt;/div>&lt;/li>&lt;li class='xr-var-item'>&lt;div class='xr-var-name'>&lt;span>latitude&lt;/span>&lt;/div>&lt;div class='xr-var-dims'>(id_dim)&lt;/div>&lt;div class='xr-var-dtype'>float64&lt;/div>&lt;div class='xr-var-preview xr-preview'>52.47&lt;/div>&lt;input id='attrs-0098f799-c5ba-4d2f-ba8a-ea90c2d23e30' class='xr-var-attrs-in' type='checkbox' disabled>&lt;label for='attrs-0098f799-c5ba-4d2f-ba8a-ea90c2d23e30' title='Show/Hide attributes'>&lt;svg class='icon xr-icon-file-text2'>&lt;use xlink:href='#icon-file-text2'>&lt;/use>&lt;/svg>&lt;/label>&lt;input id='data-f69f4971-aba1-4652-90aa-9350d4af9717' class='xr-var-data-in' type='checkbox'>&lt;label for='data-f69f4971-aba1-4652-90aa-9350d4af9717' title='Show/Hide data repr'>&lt;svg class='icon xr-icon-database'>&lt;use xlink:href='#icon-database'>&lt;/use>&lt;/svg>&lt;/label>&lt;div class='xr-var-attrs'>&lt;dl class='xr-attrs'>&lt;/dl>&lt;/div>&lt;div class='xr-var-data'>&lt;pre>array([52.473])&lt;/pre>&lt;/div>&lt;/li>&lt;li class='xr-var-item'>&lt;div class='xr-var-name'>&lt;span>id_name&lt;/span>&lt;/div>&lt;div class='xr-var-dims'>(id_dim)&lt;/div>&lt;div class='xr-var-dtype'>&amp;lt;U9&lt;/div>&lt;div class='xr-var-preview xr-preview'>'Lowestoft'&lt;/div>&lt;input id='attrs-1aed8b1e-fd84-408d-9d43-41c1cb8d3b6e' class='xr-var-attrs-in' type='checkbox' disabled>&lt;label for='attrs-1aed8b1e-fd84-408d-9d43-41c1cb8d3b6e' title='Show/Hide attributes'>&lt;svg class='icon xr-icon-file-text2'>&lt;use xlink:href='#icon-file-text2'>&lt;/use>&lt;/svg>&lt;/label>&lt;input id='data-5e94b051-4cfa-4ebe-8282-4f5c90b61b7e' class='xr-var-data-in' type='checkbox'>&lt;label for='data-5e94b051-4cfa-4ebe-8282-4f5c90b61b7e' title='Show/Hide data repr'>&lt;svg class='icon xr-icon-database'>&lt;use xlink:href='#icon-database'>&lt;/use>&lt;/svg>&lt;/label>&lt;div class='xr-var-attrs'>&lt;dl class='xr-attrs'>&lt;/dl>&lt;/div>&lt;div class='xr-var-data'>&lt;pre>array(['Lowestoft'], dtype='&amp;lt;U9')&lt;/pre>&lt;/div>&lt;/li>&lt;/ul>&lt;/div>&lt;/li>&lt;li class='xr-section-item'>&lt;input id='section-ccd53266-52ec-46a7-a932-7cd41ef29693' class='xr-section-summary-in' type='checkbox' checked>&lt;label for='section-ccd53266-52ec-46a7-a932-7cd41ef29693' class='xr-section-summary' >Data variables: &lt;span>(2)&lt;/span>&lt;/label>&lt;div class='xr-section-inline-details'>&lt;/div>&lt;div class='xr-section-details'>&lt;ul class='xr-var-list'>&lt;li class='xr-var-item'>&lt;div class='xr-var-name'>&lt;span>ssh&lt;/span>&lt;/div>&lt;div class='xr-var-dims'>(id_dim, t_dim)&lt;/div>&lt;div class='xr-var-dtype'>float64&lt;/div>&lt;div class='xr-var-preview xr-preview'>2.818 2.823 2.871 &amp;hellip; 3.257 3.371&lt;/div>&lt;input id='attrs-e776eeba-b655-4c57-b4be-5191b8d8f3ba' class='xr-var-attrs-in' type='checkbox' disabled>&lt;label for='attrs-e776eeba-b655-4c57-b4be-5191b8d8f3ba' title='Show/Hide attributes'>&lt;svg class='icon xr-icon-file-text2'>&lt;use xlink:href='#icon-file-text2'>&lt;/use>&lt;/svg>&lt;/label>&lt;input id='data-d5c9395b-9361-4a3a-ae11-a4509ca660f2' class='xr-var-data-in' type='checkbox'>&lt;label for='data-d5c9395b-9361-4a3a-ae11-a4509ca660f2' title='Show/Hide data repr'>&lt;svg class='icon xr-icon-database'>&lt;use xlink:href='#icon-database'>&lt;/use>&lt;/svg>&lt;/label>&lt;div class='xr-var-attrs'>&lt;dl class='xr-attrs'>&lt;/dl>&lt;/div>&lt;div class='xr-var-data'>&lt;pre>array([[ 2.818, 2.823, 2.871, 2.931, 2.961, 2.979, 2.953, 2.913,
2.864, 2.806, 2.723, 2.664, 2.606, 2.511, 2.43 , 2.379,
2.296, 2.201, 2.105, 2.006, 1.908, 1.801, 1.684, 1.579,
1.494, 1.402, 1.306, 1.233, 1.171, 1.102, 1.054, 1.028,
0.989, 0.97 , 0.983, 1.004, 1.026, 1.068, 1.153, 1.225,
1.296, 1.362, 1.436, 1.481, 1.536, 1.615, 1.695, 1.726,
1.802, 1.842, 1.86 , 1.872, 1.897, 1.912, 1.946, 1.994,
2.006, 2.028, 2.067, 2.081, 2.098, 2.137, 2.113, 2.068,
2.053, 1.985, 1.917, 1.869, 1.803, 1.695, 1.642, 1.545,
1.463, 1.463, 1.466, 1.462, 1.476, 1.524, 1.574, 1.633,
1.661, 1.717, 1.818, 1.918, 2.018, 2.093, 2.14 , 2.223,
2.278, 2.303, 2.372, 2.375, 2.395, 2.468, 2.481, 2.487,
2.535, 2.543, 2.578, 2.621, 2.627, 2.626, 2.585, 2.563,
2.529, 2.451, 2.335, 2.207, 2.086, 1.982, 1.855, 1.741,
1.618, 1.531, 1.429, 1.342, 1.246, 1.141, 1.031, 0.902,
0.784, 0.673, 0.571, 0.457, 0.323, 0.203, 0.13 , 0.056,
-0.028, -0.077, -0.093, -0.143, -0.181, -0.211, -0.217, -0.182,
-0.1 , -0.046, 0.02 , 0.121, 0.247, 0.358, 0.468, 0.65 ,
0.845, 0.987, 1.059, 1.199, 1.322, 1.38 , 1.465, 1.519,
1.559, 1.691, 1.775, 1.844, 2.019, 2.113, 2.159, 2.266,
2.311, 2.406, 2.512, 2.533, 2.43 , 2.309, 2.185, 2.136,
2.086, 2.066, 2.114, 2.114, 2.051, 2.033, 2.055, 2.1 ,
2.192, 2.278, 2.334, 2.421, 2.497, 2.548, 2.603, 2.679,
2.803, 2.859, 2.875, 3.001, 3.075, 3.135, 3.214, 3.257,
3.371]])&lt;/pre>&lt;/div>&lt;/li>&lt;li class='xr-var-item'>&lt;div class='xr-var-name'>&lt;span>qc_flags&lt;/span>&lt;/div>&lt;div class='xr-var-dims'>(id_dim, t_dim)&lt;/div>&lt;div class='xr-var-dtype'>int64&lt;/div>&lt;div class='xr-var-preview xr-preview'>1 1 1 1 1 1 1 1 &amp;hellip; 1 1 1 1 1 1 1 1&lt;/div>&lt;input id='attrs-a85108f6-467f-4c00-b7ea-2ab4f1359ba6' class='xr-var-attrs-in' type='checkbox' disabled>&lt;label for='attrs-a85108f6-467f-4c00-b7ea-2ab4f1359ba6' title='Show/Hide attributes'>&lt;svg class='icon xr-icon-file-text2'>&lt;use xlink:href='#icon-file-text2'>&lt;/use>&lt;/svg>&lt;/label>&lt;input id='data-41a40df4-c5d6-48b0-ae72-2ec40a0a74c1' class='xr-var-data-in' type='checkbox'>&lt;label for='data-41a40df4-c5d6-48b0-ae72-2ec40a0a74c1' title='Show/Hide data repr'>&lt;svg class='icon xr-icon-database'>&lt;use xlink:href='#icon-database'>&lt;/use>&lt;/svg>&lt;/label>&lt;div class='xr-var-attrs'>&lt;dl class='xr-attrs'>&lt;/dl>&lt;/div>&lt;div class='xr-var-data'>&lt;pre>array([[1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]])&lt;/pre>&lt;/div>&lt;/li>&lt;/ul>&lt;/div>&lt;/li>&lt;li class='xr-section-item'>&lt;input id='section-84954f72-9280-4679-970e-16c80b84946f' class='xr-section-summary-in' type='checkbox' disabled >&lt;label for='section-84954f72-9280-4679-970e-16c80b84946f' class='xr-section-summary' title='Expand/collapse section'>Attributes: &lt;span>(0)&lt;/span>&lt;/label>&lt;div class='xr-section-inline-details'>&lt;/div>&lt;div class='xr-section-details'>&lt;dl class='xr-attrs'>&lt;/dl>&lt;/div>&lt;/li>&lt;/ul>&lt;/div>&lt;/div>&lt;/p>
&lt;p>An example data variable could be ssh, or ntr (non-tidal residual). This object can also be used for other instrument types, not just tide gauges. For example moorings.&lt;/p>
&lt;p>Every id index for this object should use the same time coordinates. Therefore, timeseries need to be aligned before being placed into the object. If there is any padding needed, then NaNs should be used. NaNs should also be used for quality control/data rejection.&lt;/p>
&lt;p>For the rest of our examples, we will use data from multiple tide gauges
on the same time dimension. It will be read in from a simple netCDF file:&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">&lt;span style="color:#000">tt&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000">xr&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">open_dataset&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">fn_tg&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;span style="color:#000">obs&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000">coast&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">Tidegauge&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">dataset&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#000">tt&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;pre>&lt;code>Tidegauge object at 0x55b017f74fc0 initialised
&lt;/code>&lt;/pre>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">&lt;span style="color:#8f5902;font-style:italic"># Create the object and then inset the netcdf dataset&lt;/span>
&lt;span style="color:#000">tt&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000">xr&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">open_dataset&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">fn_tg&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;span style="color:#000">obs&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000">coast&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">Tidegauge&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">dataset&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#000">tt&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;span style="color:#000">obs&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">dataset&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000">obs&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">dataset&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">set_coords&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;time&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;pre>&lt;code>Tidegauge object at 0x55b017f74fc0 initialised
&lt;/code>&lt;/pre>
&lt;h2 id="quick-plotting-to-visualise-tidegauge-data">Quick plotting to visualise Tidegauge data&lt;/h2>
&lt;p>Tidegauge has ready made quick plotting routines for viewing time series and tide gauge location. To look at the tide gauge location:&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">&lt;span style="color:#000">fig&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">ax&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000">obs&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">plot_on_map&lt;/span>&lt;span style="color:#000;font-weight:bold">()&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;pre>&lt;code>/usr/share/miniconda/envs/coast/lib/python3.8/site-packages/cartopy/io/__init__.py:241: DownloadWarning: Downloading: https://naturalearth.s3.amazonaws.com/50m_physical/ne_50m_coastline.zip
warnings.warn(f'Downloading: {url}', DownloadWarning)
&lt;/code>&lt;/pre>
&lt;p>&lt;img src="https://british-oceanographic-data-centre.github.io/COAsT/COAsT/tidegauge_validation_tutorial_files/tidegauge_validation_tutorial_16_1.png" alt="png">&lt;/p>
&lt;p>There is also a slightly expanded version where you can plot multiple tidegauge objects, included as a list, and also the colour (if it is a dataarray with one value per location).&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">&lt;span style="color:#8f5902;font-style:italic"># plot a list tidegauge datasets (here repeating obs for the point of demonstration) and colour&lt;/span>
&lt;span style="color:#000">fig&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">ax&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000">obs&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">plot_on_map_multiple&lt;/span>&lt;span style="color:#000;font-weight:bold">([&lt;/span>&lt;span style="color:#000">obs&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>&lt;span style="color:#000">obs&lt;/span>&lt;span style="color:#000;font-weight:bold">],&lt;/span> &lt;span style="color:#000">color_var_str&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;latitude&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;img src="https://british-oceanographic-data-centre.github.io/COAsT/COAsT/tidegauge_validation_tutorial_files/tidegauge_validation_tutorial_18_0.png" alt="png">&lt;/p>
&lt;p>Time series can be plotted using &lt;code>matplotlib.pyplot&lt;/code> methods. However &lt;code>xarray&lt;/code> has its own plotting wrappers that can be used, which offers some conveniences with labelling&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">&lt;span style="color:#000">stn_id&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">1&lt;/span> &lt;span style="color:#8f5902;font-style:italic"># pick a gauge station&lt;/span>
&lt;span style="color:#000">plt&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">subplot&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">2&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">1&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">1&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;span style="color:#000">obs&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">dataset&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">ssh&lt;/span>&lt;span style="color:#000;font-weight:bold">[&lt;/span>&lt;span style="color:#000">stn_id&lt;/span>&lt;span style="color:#000;font-weight:bold">]&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">plot&lt;/span>&lt;span style="color:#000;font-weight:bold">()&lt;/span> &lt;span style="color:#8f5902;font-style:italic"># rename time dimension to enable automatic x-axis labelling&lt;/span>
&lt;span style="color:#000">plt&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">subplot&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">2&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">1&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">2&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;span style="color:#000">obs&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">dataset&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">ssh&lt;/span>&lt;span style="color:#000;font-weight:bold">[&lt;/span>&lt;span style="color:#000">stn_id&lt;/span>&lt;span style="color:#000;font-weight:bold">]&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">rename&lt;/span>&lt;span style="color:#000;font-weight:bold">({&lt;/span>&lt;span style="color:#4e9a06">&amp;#39;t_dim&amp;#39;&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#4e9a06">&amp;#39;time&amp;#39;&lt;/span>&lt;span style="color:#000;font-weight:bold">})&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">plot&lt;/span>&lt;span style="color:#000;font-weight:bold">()&lt;/span> &lt;span style="color:#8f5902;font-style:italic"># rename time dimension to enable automatic x-axis labelling&lt;/span>
&lt;span style="color:#000">plt&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">tight_layout&lt;/span>&lt;span style="color:#000;font-weight:bold">()&lt;/span>
&lt;span style="color:#000">plt&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">show&lt;/span>&lt;span style="color:#000;font-weight:bold">()&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;img src="https://british-oceanographic-data-centre.github.io/COAsT/COAsT/tidegauge_validation_tutorial_files/tidegauge_validation_tutorial_20_0.png" alt="png">&lt;/p>
&lt;p>Or you can use the &lt;code>Tidegauge.plot_timeseries()&lt;/code> method, in which start and end dates can also be specified.&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">&lt;span style="color:#000">obs&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">isel&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">id_dim&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#000">stn_id&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">plot_timeseries&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">date_start&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#000">np&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">datetime64&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#4e9a06">&amp;#39;2007-01-01&amp;#39;&lt;/span>&lt;span style="color:#000;font-weight:bold">),&lt;/span>
&lt;span style="color:#000">date_end&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000">np&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">datetime64&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#4e9a06">&amp;#39;2007-01-31&amp;#39;&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span> &lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;pre>&lt;code>(&amp;lt;Figure size 1000x1000 with 1 Axes&amp;gt;,
&amp;lt;matplotlib.collections.PathCollection at 0x7f7f56e9cd00&amp;gt;)
&lt;/code>&lt;/pre>
&lt;p>&lt;img src="https://british-oceanographic-data-centre.github.io/COAsT/COAsT/tidegauge_validation_tutorial_files/tidegauge_validation_tutorial_22_1.png" alt="png">&lt;/p>
&lt;h2 id="basic-manipulation-subsetting--plotting">Basic manipulation: subsetting + plotting&lt;/h2>
&lt;p>We can do some simple spatial and temporal manipulations of this data:&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">&lt;span style="color:#8f5902;font-style:italic"># Cut out a time window&lt;/span>
&lt;span style="color:#000">obs_cut&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000">obs&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">time_slice&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span> &lt;span style="color:#000">date0&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000">datetime&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">datetime&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">2007&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">1&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">1&lt;/span>&lt;span style="color:#000;font-weight:bold">),&lt;/span> &lt;span style="color:#000">date1&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000">datetime&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">datetime&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">2007&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">1&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">31&lt;/span>&lt;span style="color:#000;font-weight:bold">))&lt;/span>
&lt;span style="color:#8f5902;font-style:italic"># Cut out geographical boxes&lt;/span>
&lt;span style="color:#000">obs_upper&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000">obs_cut&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">subset_indices_lonlat_box&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">lonbounds&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000;font-weight:bold">[&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">0&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">3&lt;/span>&lt;span style="color:#000;font-weight:bold">],&lt;/span>
&lt;span style="color:#000">latbounds&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000;font-weight:bold">[&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">50&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">55&lt;/span>&lt;span style="color:#000;font-weight:bold">])&lt;/span>
&lt;span style="color:#000">obs_lower&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000">obs_cut&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">subset_indices_lonlat_box&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">lonbounds&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000;font-weight:bold">[&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">-&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">9&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">-&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">3&lt;/span>&lt;span style="color:#000;font-weight:bold">],&lt;/span>
&lt;span style="color:#000">latbounds&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000;font-weight:bold">[&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">55.5&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">59&lt;/span>&lt;span style="color:#000;font-weight:bold">])&lt;/span>
&lt;span style="color:#8f5902;font-style:italic">#fig, ax = obs_cut.plot_on_map()&lt;/span>
&lt;span style="color:#000">fig&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">ax&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000">obs_upper&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">plot_on_map_multiple&lt;/span>&lt;span style="color:#000;font-weight:bold">([&lt;/span>&lt;span style="color:#000">obs_upper&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">obs_lower&lt;/span>&lt;span style="color:#000;font-weight:bold">],&lt;/span> &lt;span style="color:#000">color_var_str&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;latitude&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;pre>&lt;code>Tidegauge object at 0x55b017f74fc0 initialised
Tidegauge object at 0x55b017f74fc0 initialised
Tidegauge object at 0x55b017f74fc0 initialised
&lt;/code>&lt;/pre>
&lt;p>&lt;img src="https://british-oceanographic-data-centre.github.io/COAsT/COAsT/tidegauge_validation_tutorial_files/tidegauge_validation_tutorial_24_1.png" alt="png">&lt;/p>
&lt;h3 id="gridded-model-comparison">Gridded model comparison&lt;/h3>
&lt;p>To compare our observations to the model, we will interpolate a model variable to the same time and geographical space as the tidegauge. This is done using the &lt;code>obs_operator()&lt;/code> method.&lt;/p>
&lt;p>But first load some gridded data and manipulate some variable names for convenience&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">&lt;span style="color:#000">nemo&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000">coast&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">Gridded&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">fn_dat&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">fn_dom&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">multiple&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#3465a4">True&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">config&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#000">fn_config&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;span style="color:#8f5902;font-style:italic"># Rename depth_0 to be depth&lt;/span>
&lt;span style="color:#000">nemo&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">dataset&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000">nemo&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">dataset&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">rename&lt;/span>&lt;span style="color:#000;font-weight:bold">({&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;depth_0&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;depth&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">})&lt;/span>
&lt;span style="color:#8f5902;font-style:italic">#nemo.dataset = nemo.dataset[[&amp;#34;ssh&amp;#34;, &amp;#34;landmask&amp;#34;]]&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>interpolate model onto obs locations&lt;/p>
&lt;pre>&lt;code>tidegauge_from_model = obs.obs_operator(nemo, time_interp='nearest')
&lt;/code>&lt;/pre>&lt;p>Doing this would create a new interpolated tidegauge called &lt;code>tidegauge_from_model&lt;/code>
Take a look at &lt;code>tidegauge_from_model.dataset&lt;/code> to see for yourself. If a &lt;code>landmask&lt;/code>
variable is present in the &lt;code>Gridded&lt;/code> dataset then the nearest wet points will
be taken. Otherwise, just the nearest point is taken. If &lt;code>landmask&lt;/code> is required
but not present you will need to insert it into the dataset yourself. For nemo
data, you could use the &lt;code>bottom_level&lt;/code> or &lt;code>mbathy&lt;/code> variables to do this. E.g:&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">&lt;span style="color:#8f5902;font-style:italic"># Create a landmask array and put it into the nemo object.&lt;/span>
&lt;span style="color:#8f5902;font-style:italic"># Here, using the bottom_level == 0 variable from the domain file is enough.&lt;/span>
&lt;span style="color:#000">nemo&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">dataset&lt;/span>&lt;span style="color:#000;font-weight:bold">[&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;landmask&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">]&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000">nemo&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">dataset&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">bottom_level&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">==&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">0&lt;/span>
&lt;span style="color:#8f5902;font-style:italic"># Then do the interpolation&lt;/span>
&lt;span style="color:#000">tidegauge_from_model&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000">obs&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">obs_operator&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">nemo&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">time_interp&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#4e9a06">&amp;#39;nearest&amp;#39;&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;pre>&lt;code>Calculating spatial indices.
Calculating time indices.
Indexing model data at tide gauge locations..
Calculating interpolation distances.
Interpolating in time...
Tidegauge object at 0x55b017f74fc0 initialised
&lt;/code>&lt;/pre>
&lt;p>However, the new &lt;code>tidegauge_from_model&lt;/code> will the same number of time entries as the &lt;code>obs&lt;/code> data (rather than the model data). So, for a more useful demonstration we trim the observed gauge data so it better matches the model data.&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">&lt;span style="color:#8f5902;font-style:italic"># Cut down data to be only in 2007 to match model data.&lt;/span>
&lt;span style="color:#000">start_date&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000">datetime&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">datetime&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">2007&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">1&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">1&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;span style="color:#000">end_date&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000">datetime&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">datetime&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">2007&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">1&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">31&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;span style="color:#000">obs&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000">obs&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">time_slice&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">start_date&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">end_date&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;pre>&lt;code>Tidegauge object at 0x55b017f74fc0 initialised
&lt;/code>&lt;/pre>
&lt;h3 id="interpolate-model-data-onto-obs-locations">Interpolate model data onto obs locations&lt;/h3>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">&lt;span style="color:#000">model_timeseries&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000">obs&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">obs_operator&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">nemo&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;span style="color:#8f5902;font-style:italic"># Take a look&lt;/span>
&lt;span style="color:#000">model_timeseries&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">dataset&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;pre>&lt;code>Calculating spatial indices.
Calculating time indices.
Indexing model data at tide gauge locations..
Calculating interpolation distances.
Interpolating in time...
Tidegauge object at 0x55b017f74fc0 initialised
&lt;/code>&lt;/pre>
&lt;div>&lt;svg style="position: absolute; width: 0; height: 0; overflow: hidden">
&lt;defs>
&lt;symbol id="icon-database" viewBox="0 0 32 32">
&lt;path d="M16 0c-8.837 0-16 2.239-16 5v4c0 2.761 7.163 5 16 5s16-2.239 16-5v-4c0-2.761-7.163-5-16-5z">&lt;/path>
&lt;path d="M16 17c-8.837 0-16-2.239-16-5v6c0 2.761 7.163 5 16 5s16-2.239 16-5v-6c0 2.761-7.163 5-16 5z">&lt;/path>
&lt;path d="M16 26c-8.837 0-16-2.239-16-5v6c0 2.761 7.163 5 16 5s16-2.239 16-5v-6c0 2.761-7.163 5-16 5z">&lt;/path>
&lt;/symbol>
&lt;symbol id="icon-file-text2" viewBox="0 0 32 32">
&lt;path d="M28.681 7.159c-0.694-0.947-1.662-2.053-2.724-3.116s-2.169-2.030-3.116-2.724c-1.612-1.182-2.393-1.319-2.841-1.319h-15.5c-1.378 0-2.5 1.121-2.5 2.5v27c0 1.378 1.122 2.5 2.5 2.5h23c1.378 0 2.5-1.122 2.5-2.5v-19.5c0-0.448-0.137-1.23-1.319-2.841zM24.543 5.457c0.959 0.959 1.712 1.825 2.268 2.543h-4.811v-4.811c0.718 0.556 1.584 1.309 2.543 2.268zM28 29.5c0 0.271-0.229 0.5-0.5 0.5h-23c-0.271 0-0.5-0.229-0.5-0.5v-27c0-0.271 0.229-0.5 0.5-0.5 0 0 15.499-0 15.5 0v7c0 0.552 0.448 1 1 1h7v19.5z">&lt;/path>
&lt;path d="M23 26h-14c-0.552 0-1-0.448-1-1s0.448-1 1-1h14c0.552 0 1 0.448 1 1s-0.448 1-1 1z">&lt;/path>
&lt;path d="M23 22h-14c-0.552 0-1-0.448-1-1s0.448-1 1-1h14c0.552 0 1 0.448 1 1s-0.448 1-1 1z">&lt;/path>
&lt;path d="M23 18h-14c-0.552 0-1-0.448-1-1s0.448-1 1-1h14c0.552 0 1 0.448 1 1s-0.448 1-1 1z">&lt;/path>
&lt;/symbol>
&lt;/defs>
&lt;/svg>
&lt;style>/* CSS stylesheet for displaying xarray objects in jupyterlab.
*
*/
&lt;p>:root {
&amp;ndash;xr-font-color0: var(&amp;ndash;jp-content-font-color0, rgba(0, 0, 0, 1));
&amp;ndash;xr-font-color2: var(&amp;ndash;jp-content-font-color2, rgba(0, 0, 0, 0.54));
&amp;ndash;xr-font-color3: var(&amp;ndash;jp-content-font-color3, rgba(0, 0, 0, 0.38));
&amp;ndash;xr-border-color: var(&amp;ndash;jp-border-color2, #e0e0e0);
&amp;ndash;xr-disabled-color: var(&amp;ndash;jp-layout-color3, #bdbdbd);
&amp;ndash;xr-background-color: var(&amp;ndash;jp-layout-color0, white);
&amp;ndash;xr-background-color-row-even: var(&amp;ndash;jp-layout-color1, white);
&amp;ndash;xr-background-color-row-odd: var(&amp;ndash;jp-layout-color2, #eeeeee);
}&lt;/p>
&lt;p>html[theme=dark],
body.vscode-dark {
&amp;ndash;xr-font-color0: rgba(255, 255, 255, 1);
&amp;ndash;xr-font-color2: rgba(255, 255, 255, 0.54);
&amp;ndash;xr-font-color3: rgba(255, 255, 255, 0.38);
&amp;ndash;xr-border-color: #1F1F1F;
&amp;ndash;xr-disabled-color: #515151;
&amp;ndash;xr-background-color: #111111;
&amp;ndash;xr-background-color-row-even: #111111;
&amp;ndash;xr-background-color-row-odd: #313131;
}&lt;/p>
&lt;p>.xr-wrap {
display: block !important;
min-width: 300px;
max-width: 700px;
}&lt;/p>
&lt;p>.xr-text-repr-fallback {
/* fallback to plain text repr when CSS is not injected (untrusted notebook) */
display: none;
}&lt;/p>
&lt;p>.xr-header {
padding-top: 6px;
padding-bottom: 6px;
margin-bottom: 4px;
border-bottom: solid 1px var(&amp;ndash;xr-border-color);
}&lt;/p>
&lt;p>.xr-header &amp;gt; div,
.xr-header &amp;gt; ul {
display: inline;
margin-top: 0;
margin-bottom: 0;
}&lt;/p>
&lt;p>.xr-obj-type,
.xr-array-name {
margin-left: 2px;
margin-right: 10px;
}&lt;/p>
&lt;p>.xr-obj-type {
color: var(&amp;ndash;xr-font-color2);
}&lt;/p>
&lt;p>.xr-sections {
padding-left: 0 !important;
display: grid;
grid-template-columns: 150px auto auto 1fr 20px 20px;
}&lt;/p>
&lt;p>.xr-section-item {
display: contents;
}&lt;/p>
&lt;p>.xr-section-item input {
display: none;
}&lt;/p>
&lt;p>.xr-section-item input + label {
color: var(&amp;ndash;xr-disabled-color);
}&lt;/p>
&lt;p>.xr-section-item input:enabled + label {
cursor: pointer;
color: var(&amp;ndash;xr-font-color2);
}&lt;/p>
&lt;p>.xr-section-item input:enabled + label:hover {
color: var(&amp;ndash;xr-font-color0);
}&lt;/p>
&lt;p>.xr-section-summary {
grid-column: 1;
color: var(&amp;ndash;xr-font-color2);
font-weight: 500;
}&lt;/p>
&lt;p>.xr-section-summary &amp;gt; span {
display: inline-block;
padding-left: 0.5em;
}&lt;/p>
&lt;p>.xr-section-summary-in:disabled + label {
color: var(&amp;ndash;xr-font-color2);
}&lt;/p>
&lt;p>.xr-section-summary-in + label:before {
display: inline-block;
content: &amp;lsquo;â–º&amp;rsquo;;
font-size: 11px;
width: 15px;
text-align: center;
}&lt;/p>
&lt;p>.xr-section-summary-in:disabled + label:before {
color: var(&amp;ndash;xr-disabled-color);
}&lt;/p>
&lt;p>.xr-section-summary-in:checked + label:before {
content: &amp;lsquo;â–¼&amp;rsquo;;
}&lt;/p>
&lt;p>.xr-section-summary-in:checked + label &amp;gt; span {
display: none;
}&lt;/p>
&lt;p>.xr-section-summary,
.xr-section-inline-details {
padding-top: 4px;
padding-bottom: 4px;
}&lt;/p>
&lt;p>.xr-section-inline-details {
grid-column: 2 / -1;
}&lt;/p>
&lt;p>.xr-section-details {
display: none;
grid-column: 1 / -1;
margin-bottom: 5px;
}&lt;/p>
&lt;p>.xr-section-summary-in:checked ~ .xr-section-details {
display: contents;
}&lt;/p>
&lt;p>.xr-array-wrap {
grid-column: 1 / -1;
display: grid;
grid-template-columns: 20px auto;
}&lt;/p>
&lt;p>.xr-array-wrap &amp;gt; label {
grid-column: 1;
vertical-align: top;
}&lt;/p>
&lt;p>.xr-preview {
color: var(&amp;ndash;xr-font-color3);
}&lt;/p>
&lt;p>.xr-array-preview,
.xr-array-data {
padding: 0 5px !important;
grid-column: 2;
}&lt;/p>
&lt;p>.xr-array-data,
.xr-array-in:checked ~ .xr-array-preview {
display: none;
}&lt;/p>
&lt;p>.xr-array-in:checked ~ .xr-array-data,
.xr-array-preview {
display: inline-block;
}&lt;/p>
&lt;p>.xr-dim-list {
display: inline-block !important;
list-style: none;
padding: 0 !important;
margin: 0;
}&lt;/p>
&lt;p>.xr-dim-list li {
display: inline-block;
padding: 0;
margin: 0;
}&lt;/p>
&lt;p>.xr-dim-list:before {
content: &amp;lsquo;(';
}&lt;/p>
&lt;p>.xr-dim-list:after {
content: &amp;lsquo;)';
}&lt;/p>
&lt;p>.xr-dim-list li:not(:last-child):after {
content: &amp;lsquo;,';
padding-right: 5px;
}&lt;/p>
&lt;p>.xr-has-index {
font-weight: bold;
}&lt;/p>
&lt;p>.xr-var-list,
.xr-var-item {
display: contents;
}&lt;/p>
&lt;p>.xr-var-item &amp;gt; div,
.xr-var-item label,
.xr-var-item &amp;gt; .xr-var-name span {
background-color: var(&amp;ndash;xr-background-color-row-even);
margin-bottom: 0;
}&lt;/p>
&lt;p>.xr-var-item &amp;gt; .xr-var-name:hover span {
padding-right: 5px;
}&lt;/p>
&lt;p>.xr-var-list &amp;gt; li:nth-child(odd) &amp;gt; div,
.xr-var-list &amp;gt; li:nth-child(odd) &amp;gt; label,
.xr-var-list &amp;gt; li:nth-child(odd) &amp;gt; .xr-var-name span {
background-color: var(&amp;ndash;xr-background-color-row-odd);
}&lt;/p>
&lt;p>.xr-var-name {
grid-column: 1;
}&lt;/p>
&lt;p>.xr-var-dims {
grid-column: 2;
}&lt;/p>
&lt;p>.xr-var-dtype {
grid-column: 3;
text-align: right;
color: var(&amp;ndash;xr-font-color2);
}&lt;/p>
&lt;p>.xr-var-preview {
grid-column: 4;
}&lt;/p>
&lt;p>.xr-var-name,
.xr-var-dims,
.xr-var-dtype,
.xr-preview,
.xr-attrs dt {
white-space: nowrap;
overflow: hidden;
text-overflow: ellipsis;
padding-right: 10px;
}&lt;/p>
&lt;p>.xr-var-name:hover,
.xr-var-dims:hover,
.xr-var-dtype:hover,
.xr-attrs dt:hover {
overflow: visible;
width: auto;
z-index: 1;
}&lt;/p>
&lt;p>.xr-var-attrs,
.xr-var-data {
display: none;
background-color: var(&amp;ndash;xr-background-color) !important;
padding-bottom: 5px !important;
}&lt;/p>
&lt;p>.xr-var-attrs-in:checked ~ .xr-var-attrs,
.xr-var-data-in:checked ~ .xr-var-data {
display: block;
}&lt;/p>
&lt;p>.xr-var-data &amp;gt; table {
float: right;
}&lt;/p>
&lt;p>.xr-var-name span,
.xr-var-data,
.xr-attrs {
padding-left: 25px !important;
}&lt;/p>
&lt;p>.xr-attrs,
.xr-var-attrs,
.xr-var-data {
grid-column: 1 / -1;
}&lt;/p>
&lt;p>dl.xr-attrs {
padding: 0;
margin: 0;
display: grid;
grid-template-columns: 125px auto;
}&lt;/p>
&lt;p>.xr-attrs dt,
.xr-attrs dd {
padding: 0;
margin: 0;
float: left;
padding-right: 10px;
width: auto;
}&lt;/p>
&lt;p>.xr-attrs dt {
font-weight: normal;
grid-column: 1;
}&lt;/p>
&lt;p>.xr-attrs dt:hover span {
display: inline-block;
background: var(&amp;ndash;xr-background-color);
padding-right: 10px;
}&lt;/p>
&lt;p>.xr-attrs dd {
grid-column: 2;
white-space: pre-wrap;
word-break: break-all;
}&lt;/p>
&lt;p>.xr-icon-database,
.xr-icon-file-text2 {
display: inline-block;
vertical-align: middle;
width: 1em;
height: 1.5em !important;
stroke-width: 0;
stroke: currentColor;
fill: currentColor;
}
&lt;/style>&lt;pre class='xr-text-repr-fallback'>&amp;lt;xarray.Dataset&amp;gt;
Dimensions: (z_dim: 51, axis_nbounds: 2, t_dim: 720, id_dim: 61,
interp_dist: 61)
Coordinates:
longitude (id_dim) float32 1.444 -4.0 -5.333 &amp;hellip; 7.666 -9.111 8.777
latitude (id_dim) float32 51.93 51.53 58.0 51.67 &amp;hellip; 58.0 51.53 53.87
depth (z_dim, id_dim) float32 0.1001 0.2183 0.2529 &amp;hellip; 27.32 10.11
time (t_dim) datetime64[ns] 2007-01-01 &amp;hellip; 2007-01-30T23:00:00&lt;/p>
&lt;ul>
&lt;li>
&lt;p>interp_dist (interp_dist) float64 10.56 4.33 15.65 &amp;hellip; 5.835 4.96 3.957
Dimensions without coordinates: z_dim, axis_nbounds, t_dim, id_dim
Data variables:
deptht_bounds (z_dim, axis_nbounds) float32 0.0 6.157 &amp;hellip; 5.924e+03
ssh (t_dim, id_dim) float32 nan nan nan &amp;hellip; 0.3721 -0.0752 0.7412
temperature (t_dim, z_dim, id_dim) float32 nan nan nan &amp;hellip; nan nan nan
bathymetry (id_dim) float32 10.0 21.81 6.075 15.56 &amp;hellip; 17.8 14.06 10.0
e1 (id_dim) float32 7.618e+03 7.686e+03 &amp;hellip; 7.686e+03 7.285e+03
e2 (id_dim) float32 7.414e+03 7.414e+03 &amp;hellip; 7.414e+03 7.414e+03
e3_0 (z_dim, id_dim) float32 0.2002 0.4365 0.5059 &amp;hellip; 0.541 0.2002
bottom_level (id_dim) float32 50.0 50.0 12.0 32.0 &amp;hellip; 44.0 17.0 26.0 50.0
landmask (id_dim) bool False False False False &amp;hellip; False False False
Attributes:
name: AMM7_1d_20070101_20070131_25hourm_grid_T
description: ocean T grid variables, 25h meaned
title: ocean T grid variables, 25h meaned
Conventions: CF-1.6
timeStamp: 2019-Dec-26 04:35:28 GMT
uuid: 96cae459-d3a1-4f4f-b82b-9259179f95f7
history: Tue May 19 12:07:51 2020: ncks -v votemper,sossheig -d time&amp;hellip;
NCO: 4.4.7&lt;/pre>&lt;div class='xr-wrap' style='display:none'>&lt;div class='xr-header'>&lt;div class='xr-obj-type'>xarray.Dataset&lt;/div>&lt;/div>&lt;ul class='xr-sections'>&lt;li class='xr-section-item'>&lt;input id='section-adbcc442-771d-4114-b76e-1e80ea36a848' class='xr-section-summary-in' type='checkbox' disabled >&lt;label for='section-adbcc442-771d-4114-b76e-1e80ea36a848' class='xr-section-summary' title='Expand/collapse section'>Dimensions:&lt;/label>&lt;div class='xr-section-inline-details'>&lt;ul class='xr-dim-list'>&lt;li>&lt;span>z_dim&lt;/span>: 51&lt;/li>&lt;li>&lt;span>axis_nbounds&lt;/span>: 2&lt;/li>&lt;li>&lt;span>t_dim&lt;/span>: 720&lt;/li>&lt;li>&lt;span>id_dim&lt;/span>: 61&lt;/li>&lt;li>&lt;span class='xr-has-index'>interp_dist&lt;/span>: 61&lt;/li>&lt;/ul>&lt;/div>&lt;div class='xr-section-details'>&lt;/div>&lt;/li>&lt;li class='xr-section-item'>&lt;input id='section-8fc74827-3941-4c1c-9eda-11b9eabfd0e3' class='xr-section-summary-in' type='checkbox' checked>&lt;label for='section-8fc74827-3941-4c1c-9eda-11b9eabfd0e3' class='xr-section-summary' >Coordinates: &lt;span>(5)&lt;/span>&lt;/label>&lt;div class='xr-section-inline-details'>&lt;/div>&lt;div class='xr-section-details'>&lt;ul class='xr-var-list'>&lt;li class='xr-var-item'>&lt;div class='xr-var-name'>&lt;span>longitude&lt;/span>&lt;/div>&lt;div class='xr-var-dims'>(id_dim)&lt;/div>&lt;div class='xr-var-dtype'>float32&lt;/div>&lt;div class='xr-var-preview xr-preview'>1.444 -4.0 -5.333 &amp;hellip; -9.111 8.777&lt;/div>&lt;input id='attrs-3afa8a4b-16b2-4e2c-90b0-8e3829078bbc' class='xr-var-attrs-in' type='checkbox' disabled>&lt;label for='attrs-3afa8a4b-16b2-4e2c-90b0-8e3829078bbc' title='Show/Hide attributes'>&lt;svg class='icon xr-icon-file-text2'>&lt;use xlink:href='#icon-file-text2'>&lt;/use>&lt;/svg>&lt;/label>&lt;input id='data-528536c2-2a47-4281-a874-f12b15c7df90' class='xr-var-data-in' type='checkbox'>&lt;label for='data-528536c2-2a47-4281-a874-f12b15c7df90' title='Show/Hide data repr'>&lt;svg class='icon xr-icon-database'>&lt;use xlink:href='#icon-database'>&lt;/use>&lt;/svg>&lt;/label>&lt;div class='xr-var-attrs'>&lt;dl class='xr-attrs'>&lt;/dl>&lt;/div>&lt;div class='xr-var-data'>&lt;pre>array([ 1.4443359 , -4. , -5.333008 , -5.111328 , -3. ,
-3.1113281 , -5.2226562 , -3. , -1.4443359 , 1.4443359 ,
-4.666992 , 1.3330078 , -6.2226562 , -2.555664 , -3.7783203 ,
-4.333008 , 1.1113281 , -0.55566406, -5.555664 , -5.111328 ,
-1.4443359 , -2. , -1.1113281 , -2.8886719 , -1.8886719 ,
-6.333008 , -3.1113281 , -6.2226562 , -0. , 0.11132812,
-4. , 1.3330078 , -2.7783203 , -2.1113281 , -1.4443359 ,
-3.555664 , -1.4443359 , -2.7783203 , -3.2226562 , 1.7773438 ,
-5. , -5.555664 , -3.1113281 , -1.1113281 , -6.333008 ,
-5. , -4.7783203 , -6.666992 , -2.7783203 , -1.4443359 ,
-4.111328 , -4.111328 , -1.4443359 , 11.22168 , 11.777344 ,
4.888672 , 11.22168 , -7.333008 , 7.6660156 , -9.111328 ,
8.777344 ], dtype=float32)&lt;/pre>&lt;/div>&lt;/li>&lt;li class='xr-var-item'>&lt;div class='xr-var-name'>&lt;span>latitude&lt;/span>&lt;/div>&lt;div class='xr-var-dims'>(id_dim)&lt;/div>&lt;div class='xr-var-dtype'>float32&lt;/div>&lt;div class='xr-var-preview xr-preview'>51.93 51.53 58.0 &amp;hellip; 51.53 53.87&lt;/div>&lt;input id='attrs-ed94f379-5e3c-4abe-84b3-0eab07c4d921' class='xr-var-attrs-in' type='checkbox' disabled>&lt;label for='attrs-ed94f379-5e3c-4abe-84b3-0eab07c4d921' title='Show/Hide attributes'>&lt;svg class='icon xr-icon-file-text2'>&lt;use xlink:href='#icon-file-text2'>&lt;/use>&lt;/svg>&lt;/label>&lt;input id='data-67462e50-042b-4e44-9527-2605d1335348' class='xr-var-data-in' type='checkbox'>&lt;label for='data-67462e50-042b-4e44-9527-2605d1335348' title='Show/Hide data repr'>&lt;svg class='icon xr-icon-database'>&lt;use xlink:href='#icon-database'>&lt;/use>&lt;/svg>&lt;/label>&lt;div class='xr-var-attrs'>&lt;dl class='xr-attrs'>&lt;/dl>&lt;/div>&lt;div class='xr-var-data'>&lt;pre>array([51.933594, 51.53418 , 58.000977, 51.666992, 54.000977, 51.26758 ,
58.467773, 58.467773, 55.067383, 51.933594, 53.333984, 52.933594,
56.66797 , 50.600586, 53.333984, 50.333984, 51.53418 , 54.467773,
50.067383, 54.80078 , 55.067383, 57.13379 , 60.20117 , 51.53418 ,
50.666992, 49.933594, 53.467773, 55.600586, 53.600586, 50.7334 ,
57.600586, 51.067383, 51.53418 , 49.13379 , 55.067383, 54.666992,
55.067383, 51.53418 , 56.000977, 52.467773, 52.067383, 54.666992,
51.26758 , 50.7334 , 58.13379 , 55.734375, 54.067383, 55.26758 ,
51.53418 , 55.067383, 52.734375, 51.26758 , 55.067383, 58.333984,
57.66797 , 61.93457 , 64.868164, 55.40039 , 58.000977, 51.53418 ,
53.867188], dtype=float32)&lt;/pre>&lt;/div>&lt;/li>&lt;li class='xr-var-item'>&lt;div class='xr-var-name'>&lt;span>depth&lt;/span>&lt;/div>&lt;div class='xr-var-dims'>(z_dim, id_dim)&lt;/div>&lt;div class='xr-var-dtype'>float32&lt;/div>&lt;div class='xr-var-preview xr-preview'>0.1001 0.2183 &amp;hellip; 27.32 10.11&lt;/div>&lt;input id='attrs-398d79b6-c7ae-493c-bc2f-17dc43204ff9' class='xr-var-attrs-in' type='checkbox' >&lt;label for='attrs-398d79b6-c7ae-493c-bc2f-17dc43204ff9' title='Show/Hide attributes'>&lt;svg class='icon xr-icon-file-text2'>&lt;use xlink:href='#icon-file-text2'>&lt;/use>&lt;/svg>&lt;/label>&lt;input id='data-256af0ff-a869-4850-b1c4-a542a8ea745b' class='xr-var-data-in' type='checkbox'>&lt;label for='data-256af0ff-a869-4850-b1c4-a542a8ea745b' title='Show/Hide data repr'>&lt;svg class='icon xr-icon-database'>&lt;use xlink:href='#icon-database'>&lt;/use>&lt;/svg>&lt;/label>&lt;div class='xr-var-attrs'>&lt;dl class='xr-attrs'>&lt;dt>&lt;span>units :&lt;/span>&lt;/dt>&lt;dd>m&lt;/dd>&lt;dt>&lt;span>standard_name :&lt;/span>&lt;/dt>&lt;dd>Depth at time zero on the t-grid&lt;/dd>&lt;/dl>&lt;/div>&lt;div class='xr-var-data'>&lt;pre>array([[1.00097656e-01, 2.18261719e-01, 2.52929688e-01, &amp;hellip;,
5.02441406e-01, 2.70507812e-01, 1.00097656e-01],
[3.00292969e-01, 6.54785156e-01, 7.58789062e-01, &amp;hellip;,
1.49365234e+00, 8.11523438e-01, 3.00292969e-01],
[5.00488281e-01, 1.09130859e+00, 1.26464844e+00, &amp;hellip;,
2.46826172e+00, 1.35253906e+00, 5.00488281e-01],
&amp;hellip;,
[9.70947266e+00, 2.11713867e+01, 2.45341797e+01, &amp;hellip;,
1.70940918e+02, 2.62392578e+01, 9.70947266e+00],
[9.90966797e+00, 2.16079102e+01, 2.50400391e+01, &amp;hellip;,
1.75505371e+02, 2.67802734e+01, 9.90966797e+00],
[1.01098633e+01, 2.20444336e+01, 2.55458984e+01, &amp;hellip;,
1.79002441e+02, 2.73212891e+01, 1.01098633e+01]], dtype=float32)&lt;/pre>&lt;/div>&lt;/li>&lt;li class='xr-var-item'>&lt;div class='xr-var-name'>&lt;span>time&lt;/span>&lt;/div>&lt;div class='xr-var-dims'>(t_dim)&lt;/div>&lt;div class='xr-var-dtype'>datetime64[ns]&lt;/div>&lt;div class='xr-var-preview xr-preview'>2007-01-01 &amp;hellip; 2007-01-30T23:00:00&lt;/div>&lt;input id='attrs-e7c38591-551c-4df8-8a41-e4dc8d098b04' class='xr-var-attrs-in' type='checkbox' >&lt;label for='attrs-e7c38591-551c-4df8-8a41-e4dc8d098b04' title='Show/Hide attributes'>&lt;svg class='icon xr-icon-file-text2'>&lt;use xlink:href='#icon-file-text2'>&lt;/use>&lt;/svg>&lt;/label>&lt;input id='data-6c8c2321-34b5-421d-9834-6aa0b86d0f46' class='xr-var-data-in' type='checkbox'>&lt;label for='data-6c8c2321-34b5-421d-9834-6aa0b86d0f46' title='Show/Hide data repr'>&lt;svg class='icon xr-icon-database'>&lt;use xlink:href='#icon-database'>&lt;/use>&lt;/svg>&lt;/label>&lt;div class='xr-var-attrs'>&lt;dl class='xr-attrs'>&lt;dt>&lt;span>axis :&lt;/span>&lt;/dt>&lt;dd>T&lt;/dd>&lt;dt>&lt;span>standard_name :&lt;/span>&lt;/dt>&lt;dd>time&lt;/dd>&lt;dt>&lt;span>long_name :&lt;/span>&lt;/dt>&lt;dd>Time axis&lt;/dd>&lt;dt>&lt;span>time_origin :&lt;/span>&lt;/dt>&lt;dd>1900-01-01 00:00:00&lt;/dd>&lt;dt>&lt;span>bounds :&lt;/span>&lt;/dt>&lt;dd>time_counter_bounds&lt;/dd>&lt;/dl>&lt;/div>&lt;div class='xr-var-data'>&lt;pre>array(['2007-01-01T00:00:00.000000000', '2007-01-01T01:00:00.000000000',
'2007-01-01T02:00:00.000000000', &amp;hellip;, '2007-01-30T21:00:00.000000000',
'2007-01-30T22:00:00.000000000', '2007-01-30T23:00:00.000000000'],
dtype='datetime64[ns]')&lt;/pre>&lt;/div>&lt;/li>&lt;li class='xr-var-item'>&lt;div class='xr-var-name'>&lt;span class='xr-has-index'>interp_dist&lt;/span>&lt;/div>&lt;div class='xr-var-dims'>(interp_dist)&lt;/div>&lt;div class='xr-var-dtype'>float64&lt;/div>&lt;div class='xr-var-preview xr-preview'>10.56 4.33 15.65 &amp;hellip; 4.96 3.957&lt;/div>&lt;input id='attrs-d34d5c6c-89d6-49b9-af86-266198dc55eb' class='xr-var-attrs-in' type='checkbox' disabled>&lt;label for='attrs-d34d5c6c-89d6-49b9-af86-266198dc55eb' title='Show/Hide attributes'>&lt;svg class='icon xr-icon-file-text2'>&lt;use xlink:href='#icon-file-text2'>&lt;/use>&lt;/svg>&lt;/label>&lt;input id='data-9fcd23ef-bdda-45d4-9551-f11ea6220fbc' class='xr-var-data-in' type='checkbox'>&lt;label for='data-9fcd23ef-bdda-45d4-9551-f11ea6220fbc' title='Show/Hide data repr'>&lt;svg class='icon xr-icon-database'>&lt;use xlink:href='#icon-database'>&lt;/use>&lt;/svg>&lt;/label>&lt;div class='xr-var-attrs'>&lt;dl class='xr-attrs'>&lt;/dl>&lt;/div>&lt;div class='xr-var-data'>&lt;pre>array([10.557536, 4.32986 , 15.652248, 6.018475, 6.219445, 6.03486 ,
10.097628, 5.838893, 6.671627, 7.062506, 3.811328, 2.10403 ,
10.895208, 7.653076, 3.124836, 11.159928, 27.307532, 4.520905,
4.064858, 4.679088, 6.671627, 4.967727, 5.4814 , 7.053344,
5.352902, 2.058653, 6.497781, 3.618604, 12.729041, 6.597736,
0.247078, 5.276769, 5.090907, 5.522412, 6.671627, 1.957449,
6.671627, 5.130461, 2.833094, 1.887713, 6.068393, 7.322999,
6.03486 , 7.690458, 8.786909, 6.134009, 2.111385, 6.791151,
5.130461, 6.671627, 4.76955 , 6.294531, 6.671627, 1.823125,
2.146439, 11.946562, 1.343733, 3.712935, 5.835372, 4.960209,
3.956633])&lt;/pre>&lt;/div>&lt;/li>&lt;/ul>&lt;/div>&lt;/li>&lt;li class='xr-section-item'>&lt;input id='section-4649ce9a-5022-4189-8227-39a084172c03' class='xr-section-summary-in' type='checkbox' checked>&lt;label for='section-4649ce9a-5022-4189-8227-39a084172c03' class='xr-section-summary' >Data variables: &lt;span>(9)&lt;/span>&lt;/label>&lt;div class='xr-section-inline-details'>&lt;/div>&lt;div class='xr-section-details'>&lt;ul class='xr-var-list'>&lt;li class='xr-var-item'>&lt;div class='xr-var-name'>&lt;span>deptht_bounds&lt;/span>&lt;/div>&lt;div class='xr-var-dims'>(z_dim, axis_nbounds)&lt;/div>&lt;div class='xr-var-dtype'>float32&lt;/div>&lt;div class='xr-var-preview xr-preview'>0.0 6.157 &amp;hellip; 5.72e+03 5.924e+03&lt;/div>&lt;input id='attrs-a671a142-a768-4491-8167-9010562442be' class='xr-var-attrs-in' type='checkbox' disabled>&lt;label for='attrs-a671a142-a768-4491-8167-9010562442be' title='Show/Hide attributes'>&lt;svg class='icon xr-icon-file-text2'>&lt;use xlink:href='#icon-file-text2'>&lt;/use>&lt;/svg>&lt;/label>&lt;input id='data-48511575-a91a-43f7-b768-a6ed9ecd4066' class='xr-var-data-in' type='checkbox'>&lt;label for='data-48511575-a91a-43f7-b768-a6ed9ecd4066' title='Show/Hide data repr'>&lt;svg class='icon xr-icon-database'>&lt;use xlink:href='#icon-database'>&lt;/use>&lt;/svg>&lt;/label>&lt;div class='xr-var-attrs'>&lt;dl class='xr-attrs'>&lt;/dl>&lt;/div>&lt;div class='xr-var-data'>&lt;pre>array([[ 0. , 6.1572266],
[ 6.1572266, 12.678711 ],
[ 12.678711 , 19.65332 ],
[ 19.65332 , 27.19043 ],
[ 27.19043 , 35.426758 ],
[ 35.426758 , 44.527344 ],
[ 44.527344 , 54.69922 ],
[ 54.69922 , 66.19141 ],
[ 66.19141 , 79.305664 ],
[ 79.305664 , 94.41016 ],
[ 94.41016 , 111.94238 ],
[ 111.94238 , 132.41895 ],
[ 132.41895 , 156.44531 ],
[ 156.44531 , 184.71582 ],
[ 184.71582 , 218.01562 ],
[ 218.01562 , 257.20605 ],
[ 257.20605 , 303.20508 ],
[ 303.20508 , 356.95898 ],
[ 356.95898 , 419.39258 ],
[ 419.39258 , 491.35645 ],
&amp;hellip;
[1955.7686 , 2136.3613 ],
[2136.3613 , 2321.292 ],
[2321.292 , 2509.8564 ],
[2509.8564 , 2701.4355 ],
[2701.4355 , 2895.504 ],
[2895.504 , 3091.6123 ],
[3091.6123 , 3289.3867 ],
[3289.3867 , 3488.5156 ],
[3488.5156 , 3688.7441 ],
[3688.7441 , 3889.8613 ],
[3889.8613 , 4091.6963 ],
[4091.6963 , 4294.1094 ],
[4294.1094 , 4496.9893 ],
[4496.9893 , 4700.242 ],
[4700.242 , 4903.797 ],
[4903.797 , 5107.5938 ],
[5107.5938 , 5311.584 ],
[5311.584 , 5515.7295 ],
[5515.7295 , 5720. ],
[5720. , 5924.2705 ]], dtype=float32)&lt;/pre>&lt;/div>&lt;/li>&lt;li class='xr-var-item'>&lt;div class='xr-var-name'>&lt;span>ssh&lt;/span>&lt;/div>&lt;div class='xr-var-dims'>(t_dim, id_dim)&lt;/div>&lt;div class='xr-var-dtype'>float32&lt;/div>&lt;div class='xr-var-preview xr-preview'>nan nan nan &amp;hellip; -0.0752 0.7412&lt;/div>&lt;input id='attrs-aa6eb0ee-b010-46fc-b44f-4ebe0794bf75' class='xr-var-attrs-in' type='checkbox' >&lt;label for='attrs-aa6eb0ee-b010-46fc-b44f-4ebe0794bf75' title='Show/Hide attributes'>&lt;svg class='icon xr-icon-file-text2'>&lt;use xlink:href='#icon-file-text2'>&lt;/use>&lt;/svg>&lt;/label>&lt;input id='data-75ac61b0-e7ea-4894-973c-4a0dcb80b214' class='xr-var-data-in' type='checkbox'>&lt;label for='data-75ac61b0-e7ea-4894-973c-4a0dcb80b214' title='Show/Hide data repr'>&lt;svg class='icon xr-icon-database'>&lt;use xlink:href='#icon-database'>&lt;/use>&lt;/svg>&lt;/label>&lt;div class='xr-var-attrs'>&lt;dl class='xr-attrs'>&lt;dt>&lt;span>units :&lt;/span>&lt;/dt>&lt;dd>m&lt;/dd>&lt;dt>&lt;span>online_operation :&lt;/span>&lt;/dt>&lt;dd>instant&lt;/dd>&lt;dt>&lt;span>interval_operation :&lt;/span>&lt;/dt>&lt;dd>300 s&lt;/dd>&lt;dt>&lt;span>interval_write :&lt;/span>&lt;/dt>&lt;dd>1 d&lt;/dd>&lt;dt>&lt;span>cell_methods :&lt;/span>&lt;/dt>&lt;dd>time: point (interval: 300 s)&lt;/dd>&lt;/dl>&lt;/div>&lt;div class='xr-var-data'>&lt;pre>array([[ nan, nan, nan, &amp;hellip;, nan,
nan, nan],
[ nan, nan, nan, &amp;hellip;, nan,
nan, nan],
[ nan, nan, nan, &amp;hellip;, nan,
nan, nan],
&amp;hellip;,
[ 0.24902344, -0.046875 , 0.20019531, &amp;hellip;, 0.3720703 ,
-0.07519531, 0.74121094],
[ 0.24902344, -0.046875 , 0.20019531, &amp;hellip;, 0.3720703 ,
-0.07519531, 0.74121094],
[ 0.24902344, -0.046875 , 0.20019531, &amp;hellip;, 0.3720703 ,
-0.07519531, 0.74121094]], dtype=float32)&lt;/pre>&lt;/div>&lt;/li>&lt;li class='xr-var-item'>&lt;div class='xr-var-name'>&lt;span>temperature&lt;/span>&lt;/div>&lt;div class='xr-var-dims'>(t_dim, z_dim, id_dim)&lt;/div>&lt;div class='xr-var-dtype'>float32&lt;/div>&lt;div class='xr-var-preview xr-preview'>nan nan nan nan &amp;hellip; nan nan nan nan&lt;/div>&lt;input id='attrs-44a9bf1b-dfd7-4d99-bd6a-06a14caa3427' class='xr-var-attrs-in' type='checkbox' >&lt;label for='attrs-44a9bf1b-dfd7-4d99-bd6a-06a14caa3427' title='Show/Hide attributes'>&lt;svg class='icon xr-icon-file-text2'>&lt;use xlink:href='#icon-file-text2'>&lt;/use>&lt;/svg>&lt;/label>&lt;input id='data-faeafbdc-8889-4c8a-969a-55e3e39cdf6f' class='xr-var-data-in' type='checkbox'>&lt;label for='data-faeafbdc-8889-4c8a-969a-55e3e39cdf6f' title='Show/Hide data repr'>&lt;svg class='icon xr-icon-database'>&lt;use xlink:href='#icon-database'>&lt;/use>&lt;/svg>&lt;/label>&lt;div class='xr-var-attrs'>&lt;dl class='xr-attrs'>&lt;dt>&lt;span>units :&lt;/span>&lt;/dt>&lt;dd>degC&lt;/dd>&lt;dt>&lt;span>online_operation :&lt;/span>&lt;/dt>&lt;dd>instant&lt;/dd>&lt;dt>&lt;span>interval_operation :&lt;/span>&lt;/dt>&lt;dd>300 s&lt;/dd>&lt;dt>&lt;span>interval_write :&lt;/span>&lt;/dt>&lt;dd>1 d&lt;/dd>&lt;dt>&lt;span>cell_methods :&lt;/span>&lt;/dt>&lt;dd>time: point (interval: 300 s)&lt;/dd>&lt;/dl>&lt;/div>&lt;div class='xr-var-data'>&lt;pre>array([[[ nan, nan, nan, &amp;hellip;, nan, nan,
nan],
[ nan, nan, nan, &amp;hellip;, nan, nan,
nan],
[ nan, nan, nan, &amp;hellip;, nan, nan,
nan],
&amp;hellip;,
[ nan, nan, nan, &amp;hellip;, nan, nan,
nan],
[ nan, nan, nan, &amp;hellip;, nan, nan,
nan],
[ nan, nan, nan, &amp;hellip;, nan, nan,
nan]],&lt;/p>
&lt;p>[[ nan, nan, nan, &amp;hellip;, nan, nan,
nan],
[ nan, nan, nan, &amp;hellip;, nan, nan,
nan],
[ nan, nan, nan, &amp;hellip;, nan, nan,
nan],
&amp;hellip;
[7.4384766, 8.22168 , nan, &amp;hellip;, nan, nan,
5.0009766],
[7.439453 , 8.22168 , nan, &amp;hellip;, nan, nan,
5.0009766],
[ nan, nan, nan, &amp;hellip;, nan, nan,
nan]],&lt;/p>
&lt;p>[[7.4335938, 8.217773 , 7.245117 , &amp;hellip;, 5.8652344, 8.924805 ,
5.0322266],
[7.4345703, 8.219727 , 7.245117 , &amp;hellip;, 5.8671875, 8.926758 ,
5.0322266],
[7.4345703, 8.219727 , 7.2421875, &amp;hellip;, 5.8691406, 8.926758 ,
5.0322266],
&amp;hellip;,
[7.4384766, 8.22168 , nan, &amp;hellip;, nan, nan,
5.0009766],
[7.439453 , 8.22168 , nan, &amp;hellip;, nan, nan,
5.0009766],
[ nan, nan, nan, &amp;hellip;, nan, nan,
nan]]], dtype=float32)&lt;/pre>&lt;/div>&lt;/li>&lt;li class='xr-var-item'>&lt;div class='xr-var-name'>&lt;span>bathymetry&lt;/span>&lt;/div>&lt;div class='xr-var-dims'>(id_dim)&lt;/div>&lt;div class='xr-var-dtype'>float32&lt;/div>&lt;div class='xr-var-preview xr-preview'>10.0 21.81 6.075 &amp;hellip; 14.06 10.0&lt;/div>&lt;input id='attrs-1ef1c015-b9a4-441b-90e8-9c716cbc2beb' class='xr-var-attrs-in' type='checkbox' >&lt;label for='attrs-1ef1c015-b9a4-441b-90e8-9c716cbc2beb' title='Show/Hide attributes'>&lt;svg class='icon xr-icon-file-text2'>&lt;use xlink:href='#icon-file-text2'>&lt;/use>&lt;/svg>&lt;/label>&lt;input id='data-163abc53-6777-4477-92a2-03010ca84861' class='xr-var-data-in' type='checkbox'>&lt;label for='data-163abc53-6777-4477-92a2-03010ca84861' title='Show/Hide data repr'>&lt;svg class='icon xr-icon-database'>&lt;use xlink:href='#icon-database'>&lt;/use>&lt;/svg>&lt;/label>&lt;div class='xr-var-attrs'>&lt;dl class='xr-attrs'>&lt;dt>&lt;span>units :&lt;/span>&lt;/dt>&lt;dd>m&lt;/dd>&lt;dt>&lt;span>standard_name :&lt;/span>&lt;/dt>&lt;dd>bathymetry&lt;/dd>&lt;dt>&lt;span>description :&lt;/span>&lt;/dt>&lt;dd>depth of last wet w-level on the horizontal t-grid&lt;/dd>&lt;/dl>&lt;/div>&lt;div class='xr-var-data'>&lt;pre>array([10. , 21.80957 , 6.0751953, 15.558594 , 10.65625 ,
12.145508 , 53.125 , 47.216797 , 10.3125 , 10. ,
21.898438 , 10.095703 , 11.674805 , 15.611328 , 11.230469 ,
20.368164 , 10.25293 , 14.34082 , 23.28418 , 37.7666 ,
10.3125 , 34.78711 , 15.394531 , 10. , 12.630859 ,
21.493164 , 10. , 18.167969 , 10. , 17.354492 ,
10. , 24.625 , 10. , 9.915039 , 10.3125 ,
10. , 10.3125 , 10. , 10. , 10.0703125,
37.003906 , 10.40918 , 12.145508 , 10. , 30.885742 ,
35.280273 , 17.089844 , 33.78711 , 10. , 10.3125 ,
10. , 37.25879 , 10.3125 , 12.712891 , 8.652344 ,
14.458984 , 83.96973 , 19.424805 , 17.804688 , 14.060547 ,
10. ], dtype=float32)&lt;/pre>&lt;/div>&lt;/li>&lt;li class='xr-var-item'>&lt;div class='xr-var-name'>&lt;span>e1&lt;/span>&lt;/div>&lt;div class='xr-var-dims'>(id_dim)&lt;/div>&lt;div class='xr-var-dtype'>float32&lt;/div>&lt;div class='xr-var-preview xr-preview'>7.618e+03 7.686e+03 &amp;hellip; 7.285e+03&lt;/div>&lt;input id='attrs-058e6d2f-0b04-48a0-98ac-c09d4e37b6a1' class='xr-var-attrs-in' type='checkbox' disabled>&lt;label for='attrs-058e6d2f-0b04-48a0-98ac-c09d4e37b6a1' title='Show/Hide attributes'>&lt;svg class='icon xr-icon-file-text2'>&lt;use xlink:href='#icon-file-text2'>&lt;/use>&lt;/svg>&lt;/label>&lt;input id='data-dd928a5f-5531-490f-9e3d-2b14d60bca14' class='xr-var-data-in' type='checkbox'>&lt;label for='data-dd928a5f-5531-490f-9e3d-2b14d60bca14' title='Show/Hide data repr'>&lt;svg class='icon xr-icon-database'>&lt;use xlink:href='#icon-database'>&lt;/use>&lt;/svg>&lt;/label>&lt;div class='xr-var-attrs'>&lt;dl class='xr-attrs'>&lt;/dl>&lt;/div>&lt;div class='xr-var-data'>&lt;pre>array([7617.912 , 7685.6387, 6547.1533, 7663.1045, 7262.1484, 7730.582 ,
6461.591 , 6461.591 , 7074.802 , 7617.912 , 7377.966 , 7446.9775,
6789.205 , 7842.205 , 7377.966 , 7886.5586, 7685.6387, 7180.49 ,
7930.74 , 7121.871 , 7074.802 , 6704.8984, 6140.08 , 7685.6387,
7831.091 , 7952.7676, 7354.881 , 6980.205 , 7331.758 , 7819.965 ,
6620.1465, 7764.1797, 7685.6387, 8084.0186, 7074.802 , 7145.3477,
7074.802 , 7685.6387, 6908.8594, 7527.032 , 7595.254 , 7145.3477,
7730.582 , 7819.965 , 6522.751 , 6956.461 , 7250.5117, 7039.3994,
7685.6387, 7074.802 , 7481.3477, 7730.582 , 7074.802 , 6486.082 ,
6608.004 , 5812.949 , 5247.382 , 7015.75 , 6547.1533, 7685.6387,
7285.3906], dtype=float32)&lt;/pre>&lt;/div>&lt;/li>&lt;li class='xr-var-item'>&lt;div class='xr-var-name'>&lt;span>e2&lt;/span>&lt;/div>&lt;div class='xr-var-dims'>(id_dim)&lt;/div>&lt;div class='xr-var-dtype'>float32&lt;/div>&lt;div class='xr-var-preview xr-preview'>7.414e+03 7.414e+03 &amp;hellip; 7.414e+03&lt;/div>&lt;input id='attrs-1bef09b0-30ab-4b29-b5e5-fc2e9eee34be' class='xr-var-attrs-in' type='checkbox' disabled>&lt;label for='attrs-1bef09b0-30ab-4b29-b5e5-fc2e9eee34be' title='Show/Hide attributes'>&lt;svg class='icon xr-icon-file-text2'>&lt;use xlink:href='#icon-file-text2'>&lt;/use>&lt;/svg>&lt;/label>&lt;input id='data-31228d46-83c5-4bde-b6fe-2b758ab3f47f' class='xr-var-data-in' type='checkbox'>&lt;label for='data-31228d46-83c5-4bde-b6fe-2b758ab3f47f' title='Show/Hide data repr'>&lt;svg class='icon xr-icon-database'>&lt;use xlink:href='#icon-database'>&lt;/use>&lt;/svg>&lt;/label>&lt;div class='xr-var-attrs'>&lt;dl class='xr-attrs'>&lt;/dl>&lt;/div>&lt;div class='xr-var-data'>&lt;pre>array([7413.633, 7413.633, 7413.633, 7413.633, 7413.633, 7413.633,
7413.633, 7413.633, 7413.633, 7413.633, 7413.633, 7413.633,
7413.633, 7413.633, 7413.633, 7413.633, 7413.633, 7413.633,
7413.633, 7413.633, 7413.633, 7413.633, 7413.633, 7413.633,
7413.633, 7413.633, 7413.633, 7413.633, 7413.633, 7413.633,
7413.633, 7413.633, 7413.633, 7413.633, 7413.633, 7413.633,
7413.633, 7413.633, 7413.633, 7413.633, 7413.633, 7413.633,
7413.633, 7413.633, 7413.633, 7413.633, 7413.633, 7413.633,
7413.633, 7413.633, 7413.633, 7413.633, 7413.633, 7413.633,
7413.633, 7413.633, 7413.633, 7413.633, 7413.633, 7413.633,
7413.633], dtype=float32)&lt;/pre>&lt;/div>&lt;/li>&lt;li class='xr-var-item'>&lt;div class='xr-var-name'>&lt;span>e3_0&lt;/span>&lt;/div>&lt;div class='xr-var-dims'>(z_dim, id_dim)&lt;/div>&lt;div class='xr-var-dtype'>float32&lt;/div>&lt;div class='xr-var-preview xr-preview'>0.2002 0.4365 &amp;hellip; 0.541 0.2002&lt;/div>&lt;input id='attrs-746d118f-4e8f-47be-824b-982053d3624a' class='xr-var-attrs-in' type='checkbox' disabled>&lt;label for='attrs-746d118f-4e8f-47be-824b-982053d3624a' title='Show/Hide attributes'>&lt;svg class='icon xr-icon-file-text2'>&lt;use xlink:href='#icon-file-text2'>&lt;/use>&lt;/svg>&lt;/label>&lt;input id='data-06009bc6-0338-461d-b438-ecca02c52b27' class='xr-var-data-in' type='checkbox'>&lt;label for='data-06009bc6-0338-461d-b438-ecca02c52b27' title='Show/Hide data repr'>&lt;svg class='icon xr-icon-database'>&lt;use xlink:href='#icon-database'>&lt;/use>&lt;/svg>&lt;/label>&lt;div class='xr-var-attrs'>&lt;dl class='xr-attrs'>&lt;/dl>&lt;/div>&lt;div class='xr-var-data'>&lt;pre>array([[0.20019531, 0.43652344, 0.5058594 , &amp;hellip;, 1. , 0.5410156 ,
0.20019531],
[0.20019531, 0.43652344, 0.5058594 , &amp;hellip;, 0.9824219 , 0.5410156 ,
0.20019531],
[0.20019531, 0.43652344, 0.5058594 , &amp;hellip;, 0.96777344, 0.5410156 ,
0.20019531],
&amp;hellip;,
[0.20019531, 0.43652344, 0.5058594 , &amp;hellip;, 5.0214844 , 0.5410156 ,
0.20019531],
[0.20019531, 0.43652344, 0.5058594 , &amp;hellip;, 4.057617 , 0.5410156 ,
0.20019531],
[0.20019531, 0.43652344, 0.5058594 , &amp;hellip;, 3.203125 , 0.5410156 ,
0.20019531]], dtype=float32)&lt;/pre>&lt;/div>&lt;/li>&lt;li class='xr-var-item'>&lt;div class='xr-var-name'>&lt;span>bottom_level&lt;/span>&lt;/div>&lt;div class='xr-var-dims'>(id_dim)&lt;/div>&lt;div class='xr-var-dtype'>float32&lt;/div>&lt;div class='xr-var-preview xr-preview'>50.0 50.0 12.0 &amp;hellip; 17.0 26.0 50.0&lt;/div>&lt;input id='attrs-32212a92-138a-4b79-aebf-10dd45f58c97' class='xr-var-attrs-in' type='checkbox' disabled>&lt;label for='attrs-32212a92-138a-4b79-aebf-10dd45f58c97' title='Show/Hide attributes'>&lt;svg class='icon xr-icon-file-text2'>&lt;use xlink:href='#icon-file-text2'>&lt;/use>&lt;/svg>&lt;/label>&lt;input id='data-5dfe20c7-835a-4c48-90bd-fb7265178570' class='xr-var-data-in' type='checkbox'>&lt;label for='data-5dfe20c7-835a-4c48-90bd-fb7265178570' title='Show/Hide data repr'>&lt;svg class='icon xr-icon-database'>&lt;use xlink:href='#icon-database'>&lt;/use>&lt;/svg>&lt;/label>&lt;div class='xr-var-attrs'>&lt;dl class='xr-attrs'>&lt;/dl>&lt;/div>&lt;div class='xr-var-data'>&lt;pre>array([50., 50., 12., 32., 50., 50., 50., 50., 21., 50., 29., 42., 32.,
42., 40., 33., 50., 25., 37., 32., 21., 50., 20., 50., 44., 24.,
50., 24., 50., 43., 50., 50., 50., 34., 21., 50., 21., 50., 50.,
33., 50., 11., 50., 50., 33., 45., 29., 39., 50., 21., 50., 50.,
21., 19., 25., 25., 50., 44., 17., 26., 50.], dtype=float32)&lt;/pre>&lt;/div>&lt;/li>&lt;li class='xr-var-item'>&lt;div class='xr-var-name'>&lt;span>landmask&lt;/span>&lt;/div>&lt;div class='xr-var-dims'>(id_dim)&lt;/div>&lt;div class='xr-var-dtype'>bool&lt;/div>&lt;div class='xr-var-preview xr-preview'>False False False &amp;hellip; False False&lt;/div>&lt;input id='attrs-040f97f5-12d0-45e6-98f3-d91d001dd7b6' class='xr-var-attrs-in' type='checkbox' disabled>&lt;label for='attrs-040f97f5-12d0-45e6-98f3-d91d001dd7b6' title='Show/Hide attributes'>&lt;svg class='icon xr-icon-file-text2'>&lt;use xlink:href='#icon-file-text2'>&lt;/use>&lt;/svg>&lt;/label>&lt;input id='data-117e59c6-c1a9-44c4-9c90-1354f5dd9ea6' class='xr-var-data-in' type='checkbox'>&lt;label for='data-117e59c6-c1a9-44c4-9c90-1354f5dd9ea6' title='Show/Hide data repr'>&lt;svg class='icon xr-icon-database'>&lt;use xlink:href='#icon-database'>&lt;/use>&lt;/svg>&lt;/label>&lt;div class='xr-var-attrs'>&lt;dl class='xr-attrs'>&lt;/dl>&lt;/div>&lt;div class='xr-var-data'>&lt;pre>array([False, False, False, False, False, False, False, False, False,
False, False, False, False, False, False, False, False, False,
False, False, False, False, False, False, False, False, False,
False, False, False, False, False, False, False, False, False,
False, False, False, False, False, False, False, False, False,
False, False, False, False, False, False, False, False, False,
False, False, False, False, False, False, False])&lt;/pre>&lt;/div>&lt;/li>&lt;/ul>&lt;/div>&lt;/li>&lt;li class='xr-section-item'>&lt;input id='section-1e4888b4-8c67-4351-b170-f574373188ee' class='xr-section-summary-in' type='checkbox' checked>&lt;label for='section-1e4888b4-8c67-4351-b170-f574373188ee' class='xr-section-summary' >Attributes: &lt;span>(8)&lt;/span>&lt;/label>&lt;div class='xr-section-inline-details'>&lt;/div>&lt;div class='xr-section-details'>&lt;dl class='xr-attrs'>&lt;dt>&lt;span>name :&lt;/span>&lt;/dt>&lt;dd>AMM7_1d_20070101_20070131_25hourm_grid_T&lt;/dd>&lt;dt>&lt;span>description :&lt;/span>&lt;/dt>&lt;dd>ocean T grid variables, 25h meaned&lt;/dd>&lt;dt>&lt;span>title :&lt;/span>&lt;/dt>&lt;dd>ocean T grid variables, 25h meaned&lt;/dd>&lt;dt>&lt;span>Conventions :&lt;/span>&lt;/dt>&lt;dd>CF-1.6&lt;/dd>&lt;dt>&lt;span>timeStamp :&lt;/span>&lt;/dt>&lt;dd>2019-Dec-26 04:35:28 GMT&lt;/dd>&lt;dt>&lt;span>uuid :&lt;/span>&lt;/dt>&lt;dd>96cae459-d3a1-4f4f-b82b-9259179f95f7&lt;/dd>&lt;dt>&lt;span>history :&lt;/span>&lt;/dt>&lt;dd>Tue May 19 12:07:51 2020: ncks -v votemper,sossheig -d time_counter,0,30,5 AMM7_1d_20070101_20070131_25hourm_grid_T.nc example_data.nc&lt;/dd>&lt;dt>&lt;span>NCO :&lt;/span>&lt;/dt>&lt;dd>4.4.7&lt;/dd>&lt;/dl>&lt;/div>&lt;/li>&lt;/ul>&lt;/div>&lt;/div>&lt;/p>
&lt;/li>
&lt;/ul>
&lt;p>We can see that the structure for the new dataset &lt;code>model_timeseries&lt;/code>, generated from the gridded model simulation, is that of a &lt;code>tidegauge&lt;/code> object. NB in the example simulation data the ssh variable is output as 5-day means. So it is not particulatly useful for high frequency validation but serves as a demonstration of the workflow.&lt;/p>
&lt;h2 id="tidegauge-analysis-methods">Tidegauge analysis methods&lt;/h2>
&lt;p>For a good comparison, we would like to make sure that both the observed and
modelled &lt;code>Tidegauge&lt;/code> objects contain the same missing values. &lt;code>TidegaugeAnalysis&lt;/code>
contains a routine for ensuring this. First create our analysis object:&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">&lt;span style="color:#000">tganalysis&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000">coast&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">TidegaugeAnalysis&lt;/span>&lt;span style="color:#000;font-weight:bold">()&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">&lt;span style="color:#8f5902;font-style:italic"># In this case, transpose the interpolated dataset&lt;/span>
&lt;span style="color:#000">model_timeseries&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">dataset&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000">model_timeseries&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">dataset&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">transpose&lt;/span>&lt;span style="color:#000;font-weight:bold">()&lt;/span>
&lt;span style="color:#8f5902;font-style:italic"># This routine searches for missing values in each dataset and applies them&lt;/span>
&lt;span style="color:#8f5902;font-style:italic"># equally to each corresponding dataset&lt;/span>
&lt;span style="color:#000">obs_new&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">model_new&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000">tganalysis&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">match_missing_values&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">obs&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">dataset&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">ssh&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">model_timeseries&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">dataset&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">ssh&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;pre>&lt;code>Tidegauge object at 0x55b017f74fc0 initialised
Tidegauge object at 0x55b017f74fc0 initialised
&lt;/code>&lt;/pre>
&lt;p>Although we input data arrays to the above routine, it returns two new Tidegauge objects. Now you have equivalent and comparable sets of time series that can be easily compared.&lt;/p>
&lt;h3 id="harmonic-analysis--non-tidal-residuals">Harmonic Analysis &amp;amp; Non tidal-Residuals&lt;/h3>
&lt;p>The &lt;code>Tidegauge&lt;/code> object contains some routines which make harmonic analysis and
the calculation/comparison of non-tidal residuals easier. Harmonic analysis is
done using the &lt;code>utide&lt;/code> package. Please see &lt;a href="https://pypi.org/project/UTide/">here&lt;/a> for more info.&lt;/p>
&lt;p>First we can use the &lt;code>TidegaugeAnalysis&lt;/code> class to do a harmonic analysis. Suppose
we have two &lt;code>Tidegauge&lt;/code> objects called &lt;code>obs&lt;/code> and &lt;code>model_timeseries&lt;/code> generated from tidegauge observations and model simulations respectively.&lt;/p>
&lt;p>Then subtract means from all the time series&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">&lt;span style="color:#8f5902;font-style:italic"># Subtract means from all time series&lt;/span>
&lt;span style="color:#000">obs_new&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000">tganalysis&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">demean_timeseries&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">obs_new&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">dataset&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;span style="color:#000">model_new&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000">tganalysis&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">demean_timeseries&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">model_new&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">dataset&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;span style="color:#8f5902;font-style:italic"># Now you have equivalent and comparable sets of time series that can be&lt;/span>
&lt;span style="color:#8f5902;font-style:italic"># easily compared.&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;pre>&lt;code>Tidegauge object at 0x55b017f74fc0 initialised
Tidegauge object at 0x55b017f74fc0 initialised
&lt;/code>&lt;/pre>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">
&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">&lt;span style="color:#000">plt&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">figure&lt;/span>&lt;span style="color:#000;font-weight:bold">()&lt;/span>
&lt;span style="color:#000">plt&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">plot&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span> &lt;span style="color:#000">model_new&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">dataset&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">time&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">model_new&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">dataset&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">ssh&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">isel&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">id_dim&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#000">stn_id&lt;/span>&lt;span style="color:#000;font-weight:bold">),&lt;/span>
&lt;span style="color:#000">label&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#4e9a06">&amp;#39;model - demeaned&amp;#39;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">color&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#4e9a06">&amp;#39;orange&amp;#39;&lt;/span> &lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;span style="color:#000">plt&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">plot&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span> &lt;span style="color:#000">obs_new&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">dataset&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">time&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">obs_new&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">dataset&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">ssh&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">isel&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">id_dim&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#000">stn_id&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span> &lt;span style="color:#000;font-weight:bold">,&lt;/span>
&lt;span style="color:#000">label&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#4e9a06">&amp;#39;obs - demeaned&amp;#39;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">color&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#4e9a06">&amp;#39;blue&amp;#39;&lt;/span> &lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;span style="color:#000">plt&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">title&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">f&lt;/span>&lt;span style="color:#4e9a06">&amp;#39;model and observed timeseries : {obs_new.dataset.site_name.isel(id_dim=stn_id).coords}&amp;#39;&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;span style="color:#000">plt&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">legend&lt;/span>&lt;span style="color:#000;font-weight:bold">()&lt;/span>
&lt;span style="color:#000">plt&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">xticks&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">rotation&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">45&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;span style="color:#000">plt&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">show&lt;/span>&lt;span style="color:#000;font-weight:bold">()&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;img src="https://british-oceanographic-data-centre.github.io/COAsT/COAsT/tidegauge_validation_tutorial_files/tidegauge_validation_tutorial_43_0.png" alt="png">&lt;/p>
&lt;p>Then we can apply the harmonic analysis (though the example data is too short for this example to be that meaningful and the model data is only saved as 5-day means! Nevertheless we proceed):&lt;/p>
&lt;h3 id="calculate-non-tidal-residuals">Calculate non tidal residuals&lt;/h3>
&lt;p>First, do a harmonic analysis. This routine uses utide&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">&lt;span style="color:#000">ha_mod&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000">tganalysis&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">harmonic_analysis_utide&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">model_new&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">dataset&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">ssh&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">min_datapoints&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">1&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;span style="color:#000">ha_obs&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000">tganalysis&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">harmonic_analysis_utide&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">obs_new&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">dataset&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">ssh&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">min_datapoints&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">1&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;pre>&lt;code>solve: matrix prep ... solution ... done.
solve: matrix prep ... solution ... done.
solve: matrix prep ... solution ... done.
solve: matrix prep ... solution ... done.
solve: matrix prep ... solution ... done.
solve: matrix prep ... solution ... done.
solve: matrix prep ... solution ... done.
solve: matrix prep ... solution ... done.
solve: matrix prep ... solution ... done.
solve: matrix prep ... solution ... done.
solve: matrix prep ... solution ... done.
solve: matrix prep ... solution ... done.
solve: matrix prep ... solution ... done.
solve: matrix prep ... solution ... done.
solve: matrix prep ... solution ... done.
solve: matrix prep ... solution ... done.
solve: matrix prep ... solution ... done.
solve: matrix prep ... solution ... done.
solve: matrix prep ... solution ... done.
solve: matrix prep ... solution ... done.
solve: matrix prep ... solution ... done.
solve: matrix prep ... solution ... done.
solve: matrix prep ... solution ... done.
solve: matrix prep ... solution ... done.
solve: matrix prep ... solution ... done.
solve: matrix prep ... solution ... done.
solve: matrix prep ... solution ... done.
solve: matrix prep ... solution ... done.
solve: matrix prep ... solution ... done.
solve: matrix prep ... solution ... done.
solve: matrix prep ... solution ... done.
solve: matrix prep ... solution ... done.
solve: matrix prep ... solution ... done.
solve: matrix prep ... solution ... done.
solve: matrix prep ... solution ... done.
solve: matrix prep ... solution ... done.
solve: matrix prep ... solution ... done.
solve: matrix prep ... solution ... done.
solve: matrix prep ... solution ... done.
solve: matrix prep ... solution ... done.
solve: matrix prep ... solution ... done.
solve: matrix prep ... solution ... done.
solve: matrix prep ... solution ... done.
solve: matrix prep ... solution ... done.
solve: matrix prep ... solution ... done.
solve: matrix prep ... solution ... done.
solve: matrix prep ... solution ... done.
solve: matrix prep ... solution ... done.
solve: matrix prep ... solution ... done.
solve: matrix prep ... solution ... done.
solve: matrix prep ... solution ... done.
solve: matrix prep ... solution ... done.
solve: matrix prep ... solution ... done.
solve: matrix prep ... solution ... done.
solve: matrix prep ... solution ... done.
solve: matrix prep ... solution ... done.
solve: matrix prep ... solution ... done.
solve: matrix prep ... solution ... done.
solve: matrix prep ... solution ... done.
solve: matrix prep ... solution ... done.
solve: matrix prep ... solution ... done.
solve: matrix prep ... solution ... done.
solve: matrix prep ... solution ... done.
solve: matrix prep ... solution ... done.
solve: matrix prep ... solution ... done.
solve: matrix prep ... solution ... done.
solve: matrix prep ... solution ... done.
solve: matrix prep ... solution ... done.
solve: matrix prep ... solution ... done.
solve: matrix prep ... solution ... done.
solve: matrix prep ... solution ... done.
solve: matrix prep ... solution ... done.
solve: matrix prep ... solution ... done.
solve: matrix prep ... solution ... done.
solve: matrix prep ... solution ... done.
solve: matrix prep ... solution ... done.
solve: matrix prep ... solution ... done.
solve: matrix prep ... solution ... done.
solve: matrix prep ... solution ... done.
solve: matrix prep ... solution ... done.
solve: matrix prep ... solution ... done.
solve: matrix prep ... solution ... done.
solve: matrix prep ... solution ... done.
solve: matrix prep ... solution ... done.
solve: matrix prep ... solution ... done.
solve: matrix prep ... solution ... done.
solve: matrix prep ... solution ... done.
solve: matrix prep ... solution ... done.
solve: matrix prep ... solution ... done.
solve: matrix prep ... solution ... done.
solve: matrix prep ... solution ... done.
solve: matrix prep ... solution ... done.
solve: matrix prep ... solution ... done.
solve: matrix prep ... solution ... done.
solve: matrix prep ... solution ... done.
solve: matrix prep ... solution ... done.
solve: matrix prep ... solution ... done.
solve: matrix prep ... solution ... done.
&lt;/code>&lt;/pre>
&lt;p>The &lt;code>harmonic_analysis_utide&lt;/code> routine returns a list of &lt;code>utide&lt;/code> structure object,
one for each &lt;code>id_dim&lt;/code> in the &lt;code>Tidegauge&lt;/code> object. It can be passed any of the
arguments that go to &lt;code>utide&lt;/code>. It also has an additional argument &lt;code>min_datapoints&lt;/code>
which determines a minimum number of data points for the harmonics analysis.
If a tidegauge &lt;code>id_dim&lt;/code> has less than this number, it will not return an analysis.&lt;/p>
&lt;p>Now, create new &lt;code>TidegaugeMultiple&lt;/code> objects containing reconstructed tides:&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">&lt;span style="color:#000">tide_mod&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000">tganalysis&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">reconstruct_tide_utide&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">model_new&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">dataset&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">time&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">ha_mod&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;span style="color:#000">tide_obs&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000">tganalysis&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">reconstruct_tide_utide&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">obs_new&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">dataset&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">time&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">ha_obs&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;pre>&lt;code>prep/calcs ... done.
prep/calcs ... done.
prep/calcs ... done.
prep/calcs ... done.
prep/calcs ... done.
prep/calcs ... done.
prep/calcs ... done.
prep/calcs ... done.
prep/calcs ... done.
prep/calcs ... done.
prep/calcs ... done.
prep/calcs ... done.
prep/calcs ... done.
prep/calcs ... done.
prep/calcs ... done.
prep/calcs ... done.
prep/calcs ... done.
prep/calcs ... done.
prep/calcs ... done.
prep/calcs ... done.
prep/calcs ... done.
prep/calcs ... done.
prep/calcs ... done.
prep/calcs ... done.
prep/calcs ... done.
prep/calcs ... done.
prep/calcs ... done.
prep/calcs ... done.
prep/calcs ... done.
prep/calcs ... done.
prep/calcs ... done.
prep/calcs ... done.
prep/calcs ... done.
prep/calcs ... done.
prep/calcs ... done.
prep/calcs ... done.
prep/calcs ... done.
prep/calcs ... done.
prep/calcs ... done.
prep/calcs ... done.
prep/calcs ... done.
prep/calcs ... done.
prep/calcs ... done.
prep/calcs ... done.
prep/calcs ... done.
prep/calcs ... done.
prep/calcs ... done.
prep/calcs ... done.
prep/calcs ... done.
Tidegauge object at 0x55b017f74fc0 initialised
prep/calcs ... done.
prep/calcs ... done.
prep/calcs ... done.
prep/calcs ... done.
prep/calcs ... done.
prep/calcs ... done.
prep/calcs ... done.
prep/calcs ... done.
prep/calcs ... done.
prep/calcs ... done.
prep/calcs ... done.
prep/calcs ... done.
prep/calcs ... done.
prep/calcs ... done.
prep/calcs ... done.
prep/calcs ... done.
prep/calcs ... done.
prep/calcs ... done.
prep/calcs ... done.
prep/calcs ... done.
prep/calcs ... done.
prep/calcs ... done.
prep/calcs ... done.
prep/calcs ... done.
prep/calcs ... done.
prep/calcs ... done.
prep/calcs ... done.
prep/calcs ... done.
prep/calcs ... done.
prep/calcs ... done.
prep/calcs ... done.
prep/calcs ... done.
prep/calcs ... done.
prep/calcs ... done.
prep/calcs ... done.
prep/calcs ... done.
prep/calcs ... done.
prep/calcs ... done.
prep/calcs ... done.
prep/calcs ... done.
prep/calcs ... done.
prep/calcs ... done.
prep/calcs ... done.
prep/calcs ... done.
prep/calcs ... done.
prep/calcs ... done.
prep/calcs ... done.
prep/calcs ... done.
prep/calcs ... done.
Tidegauge object at 0x55b017f74fc0 initialised
&lt;/code>&lt;/pre>
&lt;p>Get new TidegaugeMultiple objects containing non tidal residuals:&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">&lt;span style="color:#000">ntr_mod&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000">tganalysis&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">calculate_non_tidal_residuals&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">model_new&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">dataset&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">ssh&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">tide_mod&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">dataset&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">reconstructed&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;span style="color:#000">ntr_obs&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000">tganalysis&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">calculate_non_tidal_residuals&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">obs_new&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">dataset&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">ssh&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">tide_obs&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">dataset&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">reconstructed&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;span style="color:#8f5902;font-style:italic"># Take a look&lt;/span>
&lt;span style="color:#000">ntr_mod&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">dataset&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;pre>&lt;code>Tidegauge object at 0x55b017f74fc0 initialised
Tidegauge object at 0x55b017f74fc0 initialised
&lt;/code>&lt;/pre>
&lt;div>&lt;svg style="position: absolute; width: 0; height: 0; overflow: hidden">
&lt;defs>
&lt;symbol id="icon-database" viewBox="0 0 32 32">
&lt;path d="M16 0c-8.837 0-16 2.239-16 5v4c0 2.761 7.163 5 16 5s16-2.239 16-5v-4c0-2.761-7.163-5-16-5z">&lt;/path>
&lt;path d="M16 17c-8.837 0-16-2.239-16-5v6c0 2.761 7.163 5 16 5s16-2.239 16-5v-6c0 2.761-7.163 5-16 5z">&lt;/path>
&lt;path d="M16 26c-8.837 0-16-2.239-16-5v6c0 2.761 7.163 5 16 5s16-2.239 16-5v-6c0 2.761-7.163 5-16 5z">&lt;/path>
&lt;/symbol>
&lt;symbol id="icon-file-text2" viewBox="0 0 32 32">
&lt;path d="M28.681 7.159c-0.694-0.947-1.662-2.053-2.724-3.116s-2.169-2.030-3.116-2.724c-1.612-1.182-2.393-1.319-2.841-1.319h-15.5c-1.378 0-2.5 1.121-2.5 2.5v27c0 1.378 1.122 2.5 2.5 2.5h23c1.378 0 2.5-1.122 2.5-2.5v-19.5c0-0.448-0.137-1.23-1.319-2.841zM24.543 5.457c0.959 0.959 1.712 1.825 2.268 2.543h-4.811v-4.811c0.718 0.556 1.584 1.309 2.543 2.268zM28 29.5c0 0.271-0.229 0.5-0.5 0.5h-23c-0.271 0-0.5-0.229-0.5-0.5v-27c0-0.271 0.229-0.5 0.5-0.5 0 0 15.499-0 15.5 0v7c0 0.552 0.448 1 1 1h7v19.5z">&lt;/path>
&lt;path d="M23 26h-14c-0.552 0-1-0.448-1-1s0.448-1 1-1h14c0.552 0 1 0.448 1 1s-0.448 1-1 1z">&lt;/path>
&lt;path d="M23 22h-14c-0.552 0-1-0.448-1-1s0.448-1 1-1h14c0.552 0 1 0.448 1 1s-0.448 1-1 1z">&lt;/path>
&lt;path d="M23 18h-14c-0.552 0-1-0.448-1-1s0.448-1 1-1h14c0.552 0 1 0.448 1 1s-0.448 1-1 1z">&lt;/path>
&lt;/symbol>
&lt;/defs>
&lt;/svg>
&lt;style>/* CSS stylesheet for displaying xarray objects in jupyterlab.
*
*/
&lt;p>:root {
&amp;ndash;xr-font-color0: var(&amp;ndash;jp-content-font-color0, rgba(0, 0, 0, 1));
&amp;ndash;xr-font-color2: var(&amp;ndash;jp-content-font-color2, rgba(0, 0, 0, 0.54));
&amp;ndash;xr-font-color3: var(&amp;ndash;jp-content-font-color3, rgba(0, 0, 0, 0.38));
&amp;ndash;xr-border-color: var(&amp;ndash;jp-border-color2, #e0e0e0);
&amp;ndash;xr-disabled-color: var(&amp;ndash;jp-layout-color3, #bdbdbd);
&amp;ndash;xr-background-color: var(&amp;ndash;jp-layout-color0, white);
&amp;ndash;xr-background-color-row-even: var(&amp;ndash;jp-layout-color1, white);
&amp;ndash;xr-background-color-row-odd: var(&amp;ndash;jp-layout-color2, #eeeeee);
}&lt;/p>
&lt;p>html[theme=dark],
body.vscode-dark {
&amp;ndash;xr-font-color0: rgba(255, 255, 255, 1);
&amp;ndash;xr-font-color2: rgba(255, 255, 255, 0.54);
&amp;ndash;xr-font-color3: rgba(255, 255, 255, 0.38);
&amp;ndash;xr-border-color: #1F1F1F;
&amp;ndash;xr-disabled-color: #515151;
&amp;ndash;xr-background-color: #111111;
&amp;ndash;xr-background-color-row-even: #111111;
&amp;ndash;xr-background-color-row-odd: #313131;
}&lt;/p>
&lt;p>.xr-wrap {
display: block !important;
min-width: 300px;
max-width: 700px;
}&lt;/p>
&lt;p>.xr-text-repr-fallback {
/* fallback to plain text repr when CSS is not injected (untrusted notebook) */
display: none;
}&lt;/p>
&lt;p>.xr-header {
padding-top: 6px;
padding-bottom: 6px;
margin-bottom: 4px;
border-bottom: solid 1px var(&amp;ndash;xr-border-color);
}&lt;/p>
&lt;p>.xr-header &amp;gt; div,
.xr-header &amp;gt; ul {
display: inline;
margin-top: 0;
margin-bottom: 0;
}&lt;/p>
&lt;p>.xr-obj-type,
.xr-array-name {
margin-left: 2px;
margin-right: 10px;
}&lt;/p>
&lt;p>.xr-obj-type {
color: var(&amp;ndash;xr-font-color2);
}&lt;/p>
&lt;p>.xr-sections {
padding-left: 0 !important;
display: grid;
grid-template-columns: 150px auto auto 1fr 20px 20px;
}&lt;/p>
&lt;p>.xr-section-item {
display: contents;
}&lt;/p>
&lt;p>.xr-section-item input {
display: none;
}&lt;/p>
&lt;p>.xr-section-item input + label {
color: var(&amp;ndash;xr-disabled-color);
}&lt;/p>
&lt;p>.xr-section-item input:enabled + label {
cursor: pointer;
color: var(&amp;ndash;xr-font-color2);
}&lt;/p>
&lt;p>.xr-section-item input:enabled + label:hover {
color: var(&amp;ndash;xr-font-color0);
}&lt;/p>
&lt;p>.xr-section-summary {
grid-column: 1;
color: var(&amp;ndash;xr-font-color2);
font-weight: 500;
}&lt;/p>
&lt;p>.xr-section-summary &amp;gt; span {
display: inline-block;
padding-left: 0.5em;
}&lt;/p>
&lt;p>.xr-section-summary-in:disabled + label {
color: var(&amp;ndash;xr-font-color2);
}&lt;/p>
&lt;p>.xr-section-summary-in + label:before {
display: inline-block;
content: &amp;lsquo;â–º&amp;rsquo;;
font-size: 11px;
width: 15px;
text-align: center;
}&lt;/p>
&lt;p>.xr-section-summary-in:disabled + label:before {
color: var(&amp;ndash;xr-disabled-color);
}&lt;/p>
&lt;p>.xr-section-summary-in:checked + label:before {
content: &amp;lsquo;â–¼&amp;rsquo;;
}&lt;/p>
&lt;p>.xr-section-summary-in:checked + label &amp;gt; span {
display: none;
}&lt;/p>
&lt;p>.xr-section-summary,
.xr-section-inline-details {
padding-top: 4px;
padding-bottom: 4px;
}&lt;/p>
&lt;p>.xr-section-inline-details {
grid-column: 2 / -1;
}&lt;/p>
&lt;p>.xr-section-details {
display: none;
grid-column: 1 / -1;
margin-bottom: 5px;
}&lt;/p>
&lt;p>.xr-section-summary-in:checked ~ .xr-section-details {
display: contents;
}&lt;/p>
&lt;p>.xr-array-wrap {
grid-column: 1 / -1;
display: grid;
grid-template-columns: 20px auto;
}&lt;/p>
&lt;p>.xr-array-wrap &amp;gt; label {
grid-column: 1;
vertical-align: top;
}&lt;/p>
&lt;p>.xr-preview {
color: var(&amp;ndash;xr-font-color3);
}&lt;/p>
&lt;p>.xr-array-preview,
.xr-array-data {
padding: 0 5px !important;
grid-column: 2;
}&lt;/p>
&lt;p>.xr-array-data,
.xr-array-in:checked ~ .xr-array-preview {
display: none;
}&lt;/p>
&lt;p>.xr-array-in:checked ~ .xr-array-data,
.xr-array-preview {
display: inline-block;
}&lt;/p>
&lt;p>.xr-dim-list {
display: inline-block !important;
list-style: none;
padding: 0 !important;
margin: 0;
}&lt;/p>
&lt;p>.xr-dim-list li {
display: inline-block;
padding: 0;
margin: 0;
}&lt;/p>
&lt;p>.xr-dim-list:before {
content: &amp;lsquo;(';
}&lt;/p>
&lt;p>.xr-dim-list:after {
content: &amp;lsquo;)';
}&lt;/p>
&lt;p>.xr-dim-list li:not(:last-child):after {
content: &amp;lsquo;,';
padding-right: 5px;
}&lt;/p>
&lt;p>.xr-has-index {
font-weight: bold;
}&lt;/p>
&lt;p>.xr-var-list,
.xr-var-item {
display: contents;
}&lt;/p>
&lt;p>.xr-var-item &amp;gt; div,
.xr-var-item label,
.xr-var-item &amp;gt; .xr-var-name span {
background-color: var(&amp;ndash;xr-background-color-row-even);
margin-bottom: 0;
}&lt;/p>
&lt;p>.xr-var-item &amp;gt; .xr-var-name:hover span {
padding-right: 5px;
}&lt;/p>
&lt;p>.xr-var-list &amp;gt; li:nth-child(odd) &amp;gt; div,
.xr-var-list &amp;gt; li:nth-child(odd) &amp;gt; label,
.xr-var-list &amp;gt; li:nth-child(odd) &amp;gt; .xr-var-name span {
background-color: var(&amp;ndash;xr-background-color-row-odd);
}&lt;/p>
&lt;p>.xr-var-name {
grid-column: 1;
}&lt;/p>
&lt;p>.xr-var-dims {
grid-column: 2;
}&lt;/p>
&lt;p>.xr-var-dtype {
grid-column: 3;
text-align: right;
color: var(&amp;ndash;xr-font-color2);
}&lt;/p>
&lt;p>.xr-var-preview {
grid-column: 4;
}&lt;/p>
&lt;p>.xr-var-name,
.xr-var-dims,
.xr-var-dtype,
.xr-preview,
.xr-attrs dt {
white-space: nowrap;
overflow: hidden;
text-overflow: ellipsis;
padding-right: 10px;
}&lt;/p>
&lt;p>.xr-var-name:hover,
.xr-var-dims:hover,
.xr-var-dtype:hover,
.xr-attrs dt:hover {
overflow: visible;
width: auto;
z-index: 1;
}&lt;/p>
&lt;p>.xr-var-attrs,
.xr-var-data {
display: none;
background-color: var(&amp;ndash;xr-background-color) !important;
padding-bottom: 5px !important;
}&lt;/p>
&lt;p>.xr-var-attrs-in:checked ~ .xr-var-attrs,
.xr-var-data-in:checked ~ .xr-var-data {
display: block;
}&lt;/p>
&lt;p>.xr-var-data &amp;gt; table {
float: right;
}&lt;/p>
&lt;p>.xr-var-name span,
.xr-var-data,
.xr-attrs {
padding-left: 25px !important;
}&lt;/p>
&lt;p>.xr-attrs,
.xr-var-attrs,
.xr-var-data {
grid-column: 1 / -1;
}&lt;/p>
&lt;p>dl.xr-attrs {
padding: 0;
margin: 0;
display: grid;
grid-template-columns: 125px auto;
}&lt;/p>
&lt;p>.xr-attrs dt,
.xr-attrs dd {
padding: 0;
margin: 0;
float: left;
padding-right: 10px;
width: auto;
}&lt;/p>
&lt;p>.xr-attrs dt {
font-weight: normal;
grid-column: 1;
}&lt;/p>
&lt;p>.xr-attrs dt:hover span {
display: inline-block;
background: var(&amp;ndash;xr-background-color);
padding-right: 10px;
}&lt;/p>
&lt;p>.xr-attrs dd {
grid-column: 2;
white-space: pre-wrap;
word-break: break-all;
}&lt;/p>
&lt;p>.xr-icon-database,
.xr-icon-file-text2 {
display: inline-block;
vertical-align: middle;
width: 1em;
height: 1.5em !important;
stroke-width: 0;
stroke: currentColor;
fill: currentColor;
}
&lt;/style>&lt;pre class='xr-text-repr-fallback'>&amp;lt;xarray.Dataset&amp;gt;
Dimensions: (id_dim: 61, t_dim: 720)
Coordinates:
longitude (id_dim) float32 1.444 -4.0 -5.333 -5.111 &amp;hellip; 7.666 -9.111 8.777
latitude (id_dim) float32 51.93 51.53 58.0 51.67 &amp;hellip; 55.4 58.0 51.53 53.87
time (t_dim) datetime64[ns] 2007-01-01 &amp;hellip; 2007-01-30T23:00:00
Dimensions without coordinates: id_dim, t_dim
Data variables:
ntr (id_dim, t_dim) float64 nan nan nan &amp;hellip; -0.1131 -0.0932 -0.06751&lt;/pre>&lt;div class='xr-wrap' style='display:none'>&lt;div class='xr-header'>&lt;div class='xr-obj-type'>xarray.Dataset&lt;/div>&lt;/div>&lt;ul class='xr-sections'>&lt;li class='xr-section-item'>&lt;input id='section-da94b4eb-c5b8-48e5-b7cf-493691f43b2c' class='xr-section-summary-in' type='checkbox' disabled >&lt;label for='section-da94b4eb-c5b8-48e5-b7cf-493691f43b2c' class='xr-section-summary' title='Expand/collapse section'>Dimensions:&lt;/label>&lt;div class='xr-section-inline-details'>&lt;ul class='xr-dim-list'>&lt;li>&lt;span>id_dim&lt;/span>: 61&lt;/li>&lt;li>&lt;span>t_dim&lt;/span>: 720&lt;/li>&lt;/ul>&lt;/div>&lt;div class='xr-section-details'>&lt;/div>&lt;/li>&lt;li class='xr-section-item'>&lt;input id='section-6abd4387-8af0-4fb0-b3a8-a0556b87d039' class='xr-section-summary-in' type='checkbox' checked>&lt;label for='section-6abd4387-8af0-4fb0-b3a8-a0556b87d039' class='xr-section-summary' >Coordinates: &lt;span>(3)&lt;/span>&lt;/label>&lt;div class='xr-section-inline-details'>&lt;/div>&lt;div class='xr-section-details'>&lt;ul class='xr-var-list'>&lt;li class='xr-var-item'>&lt;div class='xr-var-name'>&lt;span>longitude&lt;/span>&lt;/div>&lt;div class='xr-var-dims'>(id_dim)&lt;/div>&lt;div class='xr-var-dtype'>float32&lt;/div>&lt;div class='xr-var-preview xr-preview'>1.444 -4.0 -5.333 &amp;hellip; -9.111 8.777&lt;/div>&lt;input id='attrs-df15d070-bb6d-4a23-9fb6-6090e9d2acb5' class='xr-var-attrs-in' type='checkbox' disabled>&lt;label for='attrs-df15d070-bb6d-4a23-9fb6-6090e9d2acb5' title='Show/Hide attributes'>&lt;svg class='icon xr-icon-file-text2'>&lt;use xlink:href='#icon-file-text2'>&lt;/use>&lt;/svg>&lt;/label>&lt;input id='data-d6fd227c-221f-4375-9865-0e2d746bb7c3' class='xr-var-data-in' type='checkbox'>&lt;label for='data-d6fd227c-221f-4375-9865-0e2d746bb7c3' title='Show/Hide data repr'>&lt;svg class='icon xr-icon-database'>&lt;use xlink:href='#icon-database'>&lt;/use>&lt;/svg>&lt;/label>&lt;div class='xr-var-attrs'>&lt;dl class='xr-attrs'>&lt;/dl>&lt;/div>&lt;div class='xr-var-data'>&lt;pre>array([ 1.4443359 , -4. , -5.333008 , -5.111328 , -3. ,
-3.1113281 , -5.2226562 , -3. , -1.4443359 , 1.4443359 ,
-4.666992 , 1.3330078 , -6.2226562 , -2.555664 , -3.7783203 ,
-4.333008 , 1.1113281 , -0.55566406, -5.555664 , -5.111328 ,
-1.4443359 , -2. , -1.1113281 , -2.8886719 , -1.8886719 ,
-6.333008 , -3.1113281 , -6.2226562 , -0. , 0.11132812,
-4. , 1.3330078 , -2.7783203 , -2.1113281 , -1.4443359 ,
-3.555664 , -1.4443359 , -2.7783203 , -3.2226562 , 1.7773438 ,
-5. , -5.555664 , -3.1113281 , -1.1113281 , -6.333008 ,
-5. , -4.7783203 , -6.666992 , -2.7783203 , -1.4443359 ,
-4.111328 , -4.111328 , -1.4443359 , 11.22168 , 11.777344 ,
4.888672 , 11.22168 , -7.333008 , 7.6660156 , -9.111328 ,
8.777344 ], dtype=float32)&lt;/pre>&lt;/div>&lt;/li>&lt;li class='xr-var-item'>&lt;div class='xr-var-name'>&lt;span>latitude&lt;/span>&lt;/div>&lt;div class='xr-var-dims'>(id_dim)&lt;/div>&lt;div class='xr-var-dtype'>float32&lt;/div>&lt;div class='xr-var-preview xr-preview'>51.93 51.53 58.0 &amp;hellip; 51.53 53.87&lt;/div>&lt;input id='attrs-7b09d9e0-d903-4ecf-88b7-0a3cb5972fe3' class='xr-var-attrs-in' type='checkbox' disabled>&lt;label for='attrs-7b09d9e0-d903-4ecf-88b7-0a3cb5972fe3' title='Show/Hide attributes'>&lt;svg class='icon xr-icon-file-text2'>&lt;use xlink:href='#icon-file-text2'>&lt;/use>&lt;/svg>&lt;/label>&lt;input id='data-4a634c8b-7353-42cb-8305-beed15f335ed' class='xr-var-data-in' type='checkbox'>&lt;label for='data-4a634c8b-7353-42cb-8305-beed15f335ed' title='Show/Hide data repr'>&lt;svg class='icon xr-icon-database'>&lt;use xlink:href='#icon-database'>&lt;/use>&lt;/svg>&lt;/label>&lt;div class='xr-var-attrs'>&lt;dl class='xr-attrs'>&lt;/dl>&lt;/div>&lt;div class='xr-var-data'>&lt;pre>array([51.933594, 51.53418 , 58.000977, 51.666992, 54.000977, 51.26758 ,
58.467773, 58.467773, 55.067383, 51.933594, 53.333984, 52.933594,
56.66797 , 50.600586, 53.333984, 50.333984, 51.53418 , 54.467773,
50.067383, 54.80078 , 55.067383, 57.13379 , 60.20117 , 51.53418 ,
50.666992, 49.933594, 53.467773, 55.600586, 53.600586, 50.7334 ,
57.600586, 51.067383, 51.53418 , 49.13379 , 55.067383, 54.666992,
55.067383, 51.53418 , 56.000977, 52.467773, 52.067383, 54.666992,
51.26758 , 50.7334 , 58.13379 , 55.734375, 54.067383, 55.26758 ,
51.53418 , 55.067383, 52.734375, 51.26758 , 55.067383, 58.333984,
57.66797 , 61.93457 , 64.868164, 55.40039 , 58.000977, 51.53418 ,
53.867188], dtype=float32)&lt;/pre>&lt;/div>&lt;/li>&lt;li class='xr-var-item'>&lt;div class='xr-var-name'>&lt;span>time&lt;/span>&lt;/div>&lt;div class='xr-var-dims'>(t_dim)&lt;/div>&lt;div class='xr-var-dtype'>datetime64[ns]&lt;/div>&lt;div class='xr-var-preview xr-preview'>2007-01-01 &amp;hellip; 2007-01-30T23:00:00&lt;/div>&lt;input id='attrs-8257f181-ce0e-4725-83d9-3d88670f8a37' class='xr-var-attrs-in' type='checkbox' >&lt;label for='attrs-8257f181-ce0e-4725-83d9-3d88670f8a37' title='Show/Hide attributes'>&lt;svg class='icon xr-icon-file-text2'>&lt;use xlink:href='#icon-file-text2'>&lt;/use>&lt;/svg>&lt;/label>&lt;input id='data-8034e749-7c3b-4c2f-b873-4ef923eab38a' class='xr-var-data-in' type='checkbox'>&lt;label for='data-8034e749-7c3b-4c2f-b873-4ef923eab38a' title='Show/Hide data repr'>&lt;svg class='icon xr-icon-database'>&lt;use xlink:href='#icon-database'>&lt;/use>&lt;/svg>&lt;/label>&lt;div class='xr-var-attrs'>&lt;dl class='xr-attrs'>&lt;dt>&lt;span>axis :&lt;/span>&lt;/dt>&lt;dd>T&lt;/dd>&lt;dt>&lt;span>standard_name :&lt;/span>&lt;/dt>&lt;dd>time&lt;/dd>&lt;dt>&lt;span>long_name :&lt;/span>&lt;/dt>&lt;dd>Time axis&lt;/dd>&lt;dt>&lt;span>time_origin :&lt;/span>&lt;/dt>&lt;dd>1900-01-01 00:00:00&lt;/dd>&lt;dt>&lt;span>bounds :&lt;/span>&lt;/dt>&lt;dd>time_counter_bounds&lt;/dd>&lt;/dl>&lt;/div>&lt;div class='xr-var-data'>&lt;pre>array(['2007-01-01T00:00:00.000000000', '2007-01-01T01:00:00.000000000',
'2007-01-01T02:00:00.000000000', &amp;hellip;, '2007-01-30T21:00:00.000000000',
'2007-01-30T22:00:00.000000000', '2007-01-30T23:00:00.000000000'],
dtype='datetime64[ns]')&lt;/pre>&lt;/div>&lt;/li>&lt;/ul>&lt;/div>&lt;/li>&lt;li class='xr-section-item'>&lt;input id='section-206dc412-c036-4d3d-a214-940abf68bbf2' class='xr-section-summary-in' type='checkbox' checked>&lt;label for='section-206dc412-c036-4d3d-a214-940abf68bbf2' class='xr-section-summary' >Data variables: &lt;span>(1)&lt;/span>&lt;/label>&lt;div class='xr-section-inline-details'>&lt;/div>&lt;div class='xr-section-details'>&lt;ul class='xr-var-list'>&lt;li class='xr-var-item'>&lt;div class='xr-var-name'>&lt;span>ntr&lt;/span>&lt;/div>&lt;div class='xr-var-dims'>(id_dim, t_dim)&lt;/div>&lt;div class='xr-var-dtype'>float64&lt;/div>&lt;div class='xr-var-preview xr-preview'>nan nan nan &amp;hellip; -0.0932 -0.06751&lt;/div>&lt;input id='attrs-dde2e21d-2cdd-48f1-988b-c834f6dc08a6' class='xr-var-attrs-in' type='checkbox' disabled>&lt;label for='attrs-dde2e21d-2cdd-48f1-988b-c834f6dc08a6' title='Show/Hide attributes'>&lt;svg class='icon xr-icon-file-text2'>&lt;use xlink:href='#icon-file-text2'>&lt;/use>&lt;/svg>&lt;/label>&lt;input id='data-b151a7db-4657-4ca0-8e52-9cb509277dd9' class='xr-var-data-in' type='checkbox'>&lt;label for='data-b151a7db-4657-4ca0-8e52-9cb509277dd9' title='Show/Hide data repr'>&lt;svg class='icon xr-icon-database'>&lt;use xlink:href='#icon-database'>&lt;/use>&lt;/svg>&lt;/label>&lt;div class='xr-var-attrs'>&lt;dl class='xr-attrs'>&lt;/dl>&lt;/div>&lt;div class='xr-var-data'>&lt;pre>array([[ nan, nan, nan, &amp;hellip;, -0.01578879,
-0.01832536, -0.02103986],
[ nan, nan, nan, &amp;hellip;, nan,
nan, nan],
[ nan, nan, nan, &amp;hellip;, -0.092145 ,
-0.09043849, -0.08913844],
&amp;hellip;,
[ nan, nan, nan, &amp;hellip;, -0.00689739,
-0.00588311, -0.00477213],
[ nan, nan, nan, &amp;hellip;, -0.10071189,
-0.10431121, -0.10936602],
[ nan, nan, nan, &amp;hellip;, -0.11313507,
-0.0931955 , -0.06751227]])&lt;/pre>&lt;/div>&lt;/li>&lt;/ul>&lt;/div>&lt;/li>&lt;li class='xr-section-item'>&lt;input id='section-44b0c31d-046b-486e-9b07-8277184fdd8e' class='xr-section-summary-in' type='checkbox' disabled >&lt;label for='section-44b0c31d-046b-486e-9b07-8277184fdd8e' class='xr-section-summary' title='Expand/collapse section'>Attributes: &lt;span>(0)&lt;/span>&lt;/label>&lt;div class='xr-section-inline-details'>&lt;/div>&lt;div class='xr-section-details'>&lt;dl class='xr-attrs'>&lt;/dl>&lt;/div>&lt;/li>&lt;/ul>&lt;/div>&lt;/div>&lt;/p>
&lt;p>The dataset structure is preserved and has created a new variable called &lt;code>ntr&lt;/code> - non-tidal residual.&lt;/p>
&lt;p>By default, this routines will apply &lt;code>scipy.signal.savgol_filter&lt;/code> to the non-tidal residuals
to remove some noise. This can be switched off using &lt;code>apply_filter = False&lt;/code>.&lt;/p>
&lt;p>The Doodson X0 filter is an alternative way of estimating non-tidal residuals. This will return a new Tidegauge() object containing filtered ssh data:&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">&lt;span style="color:#000">dx0&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000">tganalysis&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">doodson_x0_filter&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">obs_new&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">dataset&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;ssh&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;span style="color:#8f5902;font-style:italic"># take a look&lt;/span>
&lt;span style="color:#000">dx0&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">dataset&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;pre>&lt;code>Tidegauge object at 0x55b017f74fc0 initialised
&lt;/code>&lt;/pre>
&lt;div>&lt;svg style="position: absolute; width: 0; height: 0; overflow: hidden">
&lt;defs>
&lt;symbol id="icon-database" viewBox="0 0 32 32">
&lt;path d="M16 0c-8.837 0-16 2.239-16 5v4c0 2.761 7.163 5 16 5s16-2.239 16-5v-4c0-2.761-7.163-5-16-5z">&lt;/path>
&lt;path d="M16 17c-8.837 0-16-2.239-16-5v6c0 2.761 7.163 5 16 5s16-2.239 16-5v-6c0 2.761-7.163 5-16 5z">&lt;/path>
&lt;path d="M16 26c-8.837 0-16-2.239-16-5v6c0 2.761 7.163 5 16 5s16-2.239 16-5v-6c0 2.761-7.163 5-16 5z">&lt;/path>
&lt;/symbol>
&lt;symbol id="icon-file-text2" viewBox="0 0 32 32">
&lt;path d="M28.681 7.159c-0.694-0.947-1.662-2.053-2.724-3.116s-2.169-2.030-3.116-2.724c-1.612-1.182-2.393-1.319-2.841-1.319h-15.5c-1.378 0-2.5 1.121-2.5 2.5v27c0 1.378 1.122 2.5 2.5 2.5h23c1.378 0 2.5-1.122 2.5-2.5v-19.5c0-0.448-0.137-1.23-1.319-2.841zM24.543 5.457c0.959 0.959 1.712 1.825 2.268 2.543h-4.811v-4.811c0.718 0.556 1.584 1.309 2.543 2.268zM28 29.5c0 0.271-0.229 0.5-0.5 0.5h-23c-0.271 0-0.5-0.229-0.5-0.5v-27c0-0.271 0.229-0.5 0.5-0.5 0 0 15.499-0 15.5 0v7c0 0.552 0.448 1 1 1h7v19.5z">&lt;/path>
&lt;path d="M23 26h-14c-0.552 0-1-0.448-1-1s0.448-1 1-1h14c0.552 0 1 0.448 1 1s-0.448 1-1 1z">&lt;/path>
&lt;path d="M23 22h-14c-0.552 0-1-0.448-1-1s0.448-1 1-1h14c0.552 0 1 0.448 1 1s-0.448 1-1 1z">&lt;/path>
&lt;path d="M23 18h-14c-0.552 0-1-0.448-1-1s0.448-1 1-1h14c0.552 0 1 0.448 1 1s-0.448 1-1 1z">&lt;/path>
&lt;/symbol>
&lt;/defs>
&lt;/svg>
&lt;style>/* CSS stylesheet for displaying xarray objects in jupyterlab.
*
*/
&lt;p>:root {
&amp;ndash;xr-font-color0: var(&amp;ndash;jp-content-font-color0, rgba(0, 0, 0, 1));
&amp;ndash;xr-font-color2: var(&amp;ndash;jp-content-font-color2, rgba(0, 0, 0, 0.54));
&amp;ndash;xr-font-color3: var(&amp;ndash;jp-content-font-color3, rgba(0, 0, 0, 0.38));
&amp;ndash;xr-border-color: var(&amp;ndash;jp-border-color2, #e0e0e0);
&amp;ndash;xr-disabled-color: var(&amp;ndash;jp-layout-color3, #bdbdbd);
&amp;ndash;xr-background-color: var(&amp;ndash;jp-layout-color0, white);
&amp;ndash;xr-background-color-row-even: var(&amp;ndash;jp-layout-color1, white);
&amp;ndash;xr-background-color-row-odd: var(&amp;ndash;jp-layout-color2, #eeeeee);
}&lt;/p>
&lt;p>html[theme=dark],
body.vscode-dark {
&amp;ndash;xr-font-color0: rgba(255, 255, 255, 1);
&amp;ndash;xr-font-color2: rgba(255, 255, 255, 0.54);
&amp;ndash;xr-font-color3: rgba(255, 255, 255, 0.38);
&amp;ndash;xr-border-color: #1F1F1F;
&amp;ndash;xr-disabled-color: #515151;
&amp;ndash;xr-background-color: #111111;
&amp;ndash;xr-background-color-row-even: #111111;
&amp;ndash;xr-background-color-row-odd: #313131;
}&lt;/p>
&lt;p>.xr-wrap {
display: block !important;
min-width: 300px;
max-width: 700px;
}&lt;/p>
&lt;p>.xr-text-repr-fallback {
/* fallback to plain text repr when CSS is not injected (untrusted notebook) */
display: none;
}&lt;/p>
&lt;p>.xr-header {
padding-top: 6px;
padding-bottom: 6px;
margin-bottom: 4px;
border-bottom: solid 1px var(&amp;ndash;xr-border-color);
}&lt;/p>
&lt;p>.xr-header &amp;gt; div,
.xr-header &amp;gt; ul {
display: inline;
margin-top: 0;
margin-bottom: 0;
}&lt;/p>
&lt;p>.xr-obj-type,
.xr-array-name {
margin-left: 2px;
margin-right: 10px;
}&lt;/p>
&lt;p>.xr-obj-type {
color: var(&amp;ndash;xr-font-color2);
}&lt;/p>
&lt;p>.xr-sections {
padding-left: 0 !important;
display: grid;
grid-template-columns: 150px auto auto 1fr 20px 20px;
}&lt;/p>
&lt;p>.xr-section-item {
display: contents;
}&lt;/p>
&lt;p>.xr-section-item input {
display: none;
}&lt;/p>
&lt;p>.xr-section-item input + label {
color: var(&amp;ndash;xr-disabled-color);
}&lt;/p>
&lt;p>.xr-section-item input:enabled + label {
cursor: pointer;
color: var(&amp;ndash;xr-font-color2);
}&lt;/p>
&lt;p>.xr-section-item input:enabled + label:hover {
color: var(&amp;ndash;xr-font-color0);
}&lt;/p>
&lt;p>.xr-section-summary {
grid-column: 1;
color: var(&amp;ndash;xr-font-color2);
font-weight: 500;
}&lt;/p>
&lt;p>.xr-section-summary &amp;gt; span {
display: inline-block;
padding-left: 0.5em;
}&lt;/p>
&lt;p>.xr-section-summary-in:disabled + label {
color: var(&amp;ndash;xr-font-color2);
}&lt;/p>
&lt;p>.xr-section-summary-in + label:before {
display: inline-block;
content: &amp;lsquo;â–º&amp;rsquo;;
font-size: 11px;
width: 15px;
text-align: center;
}&lt;/p>
&lt;p>.xr-section-summary-in:disabled + label:before {
color: var(&amp;ndash;xr-disabled-color);
}&lt;/p>
&lt;p>.xr-section-summary-in:checked + label:before {
content: &amp;lsquo;â–¼&amp;rsquo;;
}&lt;/p>
&lt;p>.xr-section-summary-in:checked + label &amp;gt; span {
display: none;
}&lt;/p>
&lt;p>.xr-section-summary,
.xr-section-inline-details {
padding-top: 4px;
padding-bottom: 4px;
}&lt;/p>
&lt;p>.xr-section-inline-details {
grid-column: 2 / -1;
}&lt;/p>
&lt;p>.xr-section-details {
display: none;
grid-column: 1 / -1;
margin-bottom: 5px;
}&lt;/p>
&lt;p>.xr-section-summary-in:checked ~ .xr-section-details {
display: contents;
}&lt;/p>
&lt;p>.xr-array-wrap {
grid-column: 1 / -1;
display: grid;
grid-template-columns: 20px auto;
}&lt;/p>
&lt;p>.xr-array-wrap &amp;gt; label {
grid-column: 1;
vertical-align: top;
}&lt;/p>
&lt;p>.xr-preview {
color: var(&amp;ndash;xr-font-color3);
}&lt;/p>
&lt;p>.xr-array-preview,
.xr-array-data {
padding: 0 5px !important;
grid-column: 2;
}&lt;/p>
&lt;p>.xr-array-data,
.xr-array-in:checked ~ .xr-array-preview {
display: none;
}&lt;/p>
&lt;p>.xr-array-in:checked ~ .xr-array-data,
.xr-array-preview {
display: inline-block;
}&lt;/p>
&lt;p>.xr-dim-list {
display: inline-block !important;
list-style: none;
padding: 0 !important;
margin: 0;
}&lt;/p>
&lt;p>.xr-dim-list li {
display: inline-block;
padding: 0;
margin: 0;
}&lt;/p>
&lt;p>.xr-dim-list:before {
content: &amp;lsquo;(';
}&lt;/p>
&lt;p>.xr-dim-list:after {
content: &amp;lsquo;)';
}&lt;/p>
&lt;p>.xr-dim-list li:not(:last-child):after {
content: &amp;lsquo;,';
padding-right: 5px;
}&lt;/p>
&lt;p>.xr-has-index {
font-weight: bold;
}&lt;/p>
&lt;p>.xr-var-list,
.xr-var-item {
display: contents;
}&lt;/p>
&lt;p>.xr-var-item &amp;gt; div,
.xr-var-item label,
.xr-var-item &amp;gt; .xr-var-name span {
background-color: var(&amp;ndash;xr-background-color-row-even);
margin-bottom: 0;
}&lt;/p>
&lt;p>.xr-var-item &amp;gt; .xr-var-name:hover span {
padding-right: 5px;
}&lt;/p>
&lt;p>.xr-var-list &amp;gt; li:nth-child(odd) &amp;gt; div,
.xr-var-list &amp;gt; li:nth-child(odd) &amp;gt; label,
.xr-var-list &amp;gt; li:nth-child(odd) &amp;gt; .xr-var-name span {
background-color: var(&amp;ndash;xr-background-color-row-odd);
}&lt;/p>
&lt;p>.xr-var-name {
grid-column: 1;
}&lt;/p>
&lt;p>.xr-var-dims {
grid-column: 2;
}&lt;/p>
&lt;p>.xr-var-dtype {
grid-column: 3;
text-align: right;
color: var(&amp;ndash;xr-font-color2);
}&lt;/p>
&lt;p>.xr-var-preview {
grid-column: 4;
}&lt;/p>
&lt;p>.xr-var-name,
.xr-var-dims,
.xr-var-dtype,
.xr-preview,
.xr-attrs dt {
white-space: nowrap;
overflow: hidden;
text-overflow: ellipsis;
padding-right: 10px;
}&lt;/p>
&lt;p>.xr-var-name:hover,
.xr-var-dims:hover,
.xr-var-dtype:hover,
.xr-attrs dt:hover {
overflow: visible;
width: auto;
z-index: 1;
}&lt;/p>
&lt;p>.xr-var-attrs,
.xr-var-data {
display: none;
background-color: var(&amp;ndash;xr-background-color) !important;
padding-bottom: 5px !important;
}&lt;/p>
&lt;p>.xr-var-attrs-in:checked ~ .xr-var-attrs,
.xr-var-data-in:checked ~ .xr-var-data {
display: block;
}&lt;/p>
&lt;p>.xr-var-data &amp;gt; table {
float: right;
}&lt;/p>
&lt;p>.xr-var-name span,
.xr-var-data,
.xr-attrs {
padding-left: 25px !important;
}&lt;/p>
&lt;p>.xr-attrs,
.xr-var-attrs,
.xr-var-data {
grid-column: 1 / -1;
}&lt;/p>
&lt;p>dl.xr-attrs {
padding: 0;
margin: 0;
display: grid;
grid-template-columns: 125px auto;
}&lt;/p>
&lt;p>.xr-attrs dt,
.xr-attrs dd {
padding: 0;
margin: 0;
float: left;
padding-right: 10px;
width: auto;
}&lt;/p>
&lt;p>.xr-attrs dt {
font-weight: normal;
grid-column: 1;
}&lt;/p>
&lt;p>.xr-attrs dt:hover span {
display: inline-block;
background: var(&amp;ndash;xr-background-color);
padding-right: 10px;
}&lt;/p>
&lt;p>.xr-attrs dd {
grid-column: 2;
white-space: pre-wrap;
word-break: break-all;
}&lt;/p>
&lt;p>.xr-icon-database,
.xr-icon-file-text2 {
display: inline-block;
vertical-align: middle;
width: 1em;
height: 1.5em !important;
stroke-width: 0;
stroke: currentColor;
fill: currentColor;
}
&lt;/style>&lt;pre class='xr-text-repr-fallback'>&amp;lt;xarray.Dataset&amp;gt;
Dimensions: (t_dim: 720, id_dim: 61)
Coordinates:
latitude (id_dim) float64 51.95 51.57 57.9 51.71 &amp;hellip; 58.0 51.53 53.87
site_name (id_dim) object 'Harwich' 'Mumbles' 'Ullapool' &amp;hellip; 'N/A' 'N/A'
longitude (id_dim) float64 1.292 -3.975 -5.158 -5.051 &amp;hellip; 7.567 350.8 8.717
Dimensions without coordinates: t_dim, id_dim
Data variables:
time (t_dim) datetime64[ns] 2007-01-01 &amp;hellip; 2007-01-30T23:00:00
ssh (id_dim, t_dim) float64 nan nan nan nan nan &amp;hellip; nan nan nan nan&lt;/pre>&lt;div class='xr-wrap' style='display:none'>&lt;div class='xr-header'>&lt;div class='xr-obj-type'>xarray.Dataset&lt;/div>&lt;/div>&lt;ul class='xr-sections'>&lt;li class='xr-section-item'>&lt;input id='section-18176486-467c-4eff-87a4-d00091b507ad' class='xr-section-summary-in' type='checkbox' disabled >&lt;label for='section-18176486-467c-4eff-87a4-d00091b507ad' class='xr-section-summary' title='Expand/collapse section'>Dimensions:&lt;/label>&lt;div class='xr-section-inline-details'>&lt;ul class='xr-dim-list'>&lt;li>&lt;span>t_dim&lt;/span>: 720&lt;/li>&lt;li>&lt;span>id_dim&lt;/span>: 61&lt;/li>&lt;/ul>&lt;/div>&lt;div class='xr-section-details'>&lt;/div>&lt;/li>&lt;li class='xr-section-item'>&lt;input id='section-1c70eb82-de4d-42e8-972a-1b902a7cbc11' class='xr-section-summary-in' type='checkbox' checked>&lt;label for='section-1c70eb82-de4d-42e8-972a-1b902a7cbc11' class='xr-section-summary' >Coordinates: &lt;span>(3)&lt;/span>&lt;/label>&lt;div class='xr-section-inline-details'>&lt;/div>&lt;div class='xr-section-details'>&lt;ul class='xr-var-list'>&lt;li class='xr-var-item'>&lt;div class='xr-var-name'>&lt;span>latitude&lt;/span>&lt;/div>&lt;div class='xr-var-dims'>(id_dim)&lt;/div>&lt;div class='xr-var-dtype'>float64&lt;/div>&lt;div class='xr-var-preview xr-preview'>51.95 51.57 57.9 &amp;hellip; 51.53 53.87&lt;/div>&lt;input id='attrs-4a087926-fddd-4f13-801f-c66ef69c7776' class='xr-var-attrs-in' type='checkbox' disabled>&lt;label for='attrs-4a087926-fddd-4f13-801f-c66ef69c7776' title='Show/Hide attributes'>&lt;svg class='icon xr-icon-file-text2'>&lt;use xlink:href='#icon-file-text2'>&lt;/use>&lt;/svg>&lt;/label>&lt;input id='data-a418920b-5c59-42ae-92ae-301fd9bc3d60' class='xr-var-data-in' type='checkbox'>&lt;label for='data-a418920b-5c59-42ae-92ae-301fd9bc3d60' title='Show/Hide data repr'>&lt;svg class='icon xr-icon-database'>&lt;use xlink:href='#icon-database'>&lt;/use>&lt;/svg>&lt;/label>&lt;div class='xr-var-attrs'>&lt;dl class='xr-attrs'>&lt;/dl>&lt;/div>&lt;div class='xr-var-data'>&lt;pre>array([51.94798 , 51.57 , 57.89525 , 51.7064 , 54.03167 ,
51.21525 , 58.45661 , 58.44097 , 55.00744 , 51.95675 ,
53.31394 , 52.93436 , 56.62311 , 50.6085 , 53.33167 ,
50.36839 , 51.44564 , 54.49008 , 50.103 , 54.84256 ,
55.00744 , 57.14406 , 60.15403 , 51.55 , 50.71433 ,
49.91847 , 53.44969 , 55.62742 , 53.63103 , 50.78178 ,
57.5987 , 51.11439 , 51.51089 , 49.18333 , 55.00744 ,
54.65081 , 55.00744 , 51.50002 , 55.98983 , 52.473 ,
52.01378 , 54.66475 , 51.21525 , 50.80256 , 58.20711 ,
55.74964 , 54.08539 , 55.20678 , 51.50002 , 55.00744 ,
52.71906 , 51.21097 , 55.00744 , 58.34999847, 57.68299866,
61.93299866, 64.86699677, 55.36700058, 58. , 51.53300095,
53.86700058])&lt;/pre>&lt;/div>&lt;/li>&lt;li class='xr-var-item'>&lt;div class='xr-var-name'>&lt;span>site_name&lt;/span>&lt;/div>&lt;div class='xr-var-dims'>(id_dim)&lt;/div>&lt;div class='xr-var-dtype'>object&lt;/div>&lt;div class='xr-var-preview xr-preview'>'Harwich' 'Mumbles' &amp;hellip; 'N/A' 'N/A'&lt;/div>&lt;input id='attrs-7b3b3d82-2ca6-4145-b3fd-bb192ff6c866' class='xr-var-attrs-in' type='checkbox' disabled>&lt;label for='attrs-7b3b3d82-2ca6-4145-b3fd-bb192ff6c866' title='Show/Hide attributes'>&lt;svg class='icon xr-icon-file-text2'>&lt;use xlink:href='#icon-file-text2'>&lt;/use>&lt;/svg>&lt;/label>&lt;input id='data-031e15d8-3ce9-4895-b210-3354be1acec2' class='xr-var-data-in' type='checkbox'>&lt;label for='data-031e15d8-3ce9-4895-b210-3354be1acec2' title='Show/Hide data repr'>&lt;svg class='icon xr-icon-database'>&lt;use xlink:href='#icon-database'>&lt;/use>&lt;/svg>&lt;/label>&lt;div class='xr-var-attrs'>&lt;dl class='xr-attrs'>&lt;/dl>&lt;/div>&lt;div class='xr-var-data'>&lt;pre>array(['Harwich', 'Mumbles', 'Ullapool', 'Milford Haven', 'Heysham',
'Hinkley Point', 'Kinlochbervie', 'Wick', 'North Shields',
'Felixstowe', 'Holyhead', 'Cromer', 'Tobermory', 'Weymouth',
'Llandudno', 'Devonport', 'Sheerness', 'Whitby', 'Newlyn',
'Portpatrick', 'North Shields', 'Aberdeen', 'Lerwick', 'Newport',
'Bournemouth', &amp;quot;St. Mary's&amp;quot;, 'Liverpool, Gladstone Dock',
'Port Ellen (Islay)', 'Immingham', 'Newhaven', 'Moray Firth',
'Dover', 'Avonmouth', 'St. Helier (Jersey)', 'North Shields',
'Workington', 'North Shields', 'Portbury', 'Leith', 'Lowestoft',
'Fishguard', 'Bangor', 'Hinkley Point', 'Portsmouth', 'Stornoway',
'Millport', 'Port Erin', 'Portrush', 'Portbury', 'North Shields',
'Barmouth', 'Ilfracombe', 'North Shields', 'N/A', 'N/A', 'N/A',
'N/A', 'N/A', 'N/A', 'N/A', 'N/A'], dtype=object)&lt;/pre>&lt;/div>&lt;/li>&lt;li class='xr-var-item'>&lt;div class='xr-var-name'>&lt;span>longitude&lt;/span>&lt;/div>&lt;div class='xr-var-dims'>(id_dim)&lt;/div>&lt;div class='xr-var-dtype'>float64&lt;/div>&lt;div class='xr-var-preview xr-preview'>1.292 -3.975 -5.158 &amp;hellip; 350.8 8.717&lt;/div>&lt;input id='attrs-9c54dc55-a1ec-4a4c-a7ef-13864cadf878' class='xr-var-attrs-in' type='checkbox' disabled>&lt;label for='attrs-9c54dc55-a1ec-4a4c-a7ef-13864cadf878' title='Show/Hide attributes'>&lt;svg class='icon xr-icon-file-text2'>&lt;use xlink:href='#icon-file-text2'>&lt;/use>&lt;/svg>&lt;/label>&lt;input id='data-3d0d6a1a-d4b8-4a08-a70f-f5a2375ed332' class='xr-var-data-in' type='checkbox'>&lt;label for='data-3d0d6a1a-d4b8-4a08-a70f-f5a2375ed332' title='Show/Hide data repr'>&lt;svg class='icon xr-icon-database'>&lt;use xlink:href='#icon-database'>&lt;/use>&lt;/svg>&lt;/label>&lt;div class='xr-var-attrs'>&lt;dl class='xr-attrs'>&lt;/dl>&lt;/div>&lt;div class='xr-var-data'>&lt;pre>array([ 1.29210000e+00, -3.97544000e+00, -5.15789000e+00, -5.05148000e+00,
-2.92042000e+00, -3.13433000e+00, -5.05036000e+00, -3.08631000e+00,
-1.43978000e+00, 1.34839000e+00, -4.62044000e+00, 1.30164000e+00,
-6.06422000e+00, -2.44794000e+00, -3.82522000e+00, -4.18525000e+00,
7.43440000e-01, -6.14170000e-01, -5.54283000e+00, -5.12003000e+00,
-1.43978000e+00, -2.08013000e+00, -1.14031000e+00, -2.98744000e+00,
-1.87486000e+00, -6.31642000e+00, -3.01800000e+00, -6.19006000e+00,
-1.86030000e-01, 5.70300000e-02, -4.00220000e+00, 1.32267000e+00,
-2.71497000e+00, -2.11667000e+00, -1.43978000e+00, -3.56764000e+00,
-1.43978000e+00, -2.72848000e+00, -3.18169000e+00, 1.75083000e+00,
-4.98333000e+00, -5.66947000e+00, -3.13433000e+00, -1.11175000e+00,
-6.38889000e+00, -4.90583000e+00, -4.76806000e+00, -6.65683000e+00,
-2.72848000e+00, -1.43978000e+00, -4.04517000e+00, -4.11094000e+00,
-1.43978000e+00, 1.12150002e+01, 1.18000002e+01, 5.11700010e+00,
1.12500000e+01, 3.52666992e+02, 7.56699991e+00, 3.50816986e+02,
8.71700001e+00])&lt;/pre>&lt;/div>&lt;/li>&lt;/ul>&lt;/div>&lt;/li>&lt;li class='xr-section-item'>&lt;input id='section-a14e6992-c681-44cc-992e-0c3a06bcc43a' class='xr-section-summary-in' type='checkbox' checked>&lt;label for='section-a14e6992-c681-44cc-992e-0c3a06bcc43a' class='xr-section-summary' >Data variables: &lt;span>(2)&lt;/span>&lt;/label>&lt;div class='xr-section-inline-details'>&lt;/div>&lt;div class='xr-section-details'>&lt;ul class='xr-var-list'>&lt;li class='xr-var-item'>&lt;div class='xr-var-name'>&lt;span>time&lt;/span>&lt;/div>&lt;div class='xr-var-dims'>(t_dim)&lt;/div>&lt;div class='xr-var-dtype'>datetime64[ns]&lt;/div>&lt;div class='xr-var-preview xr-preview'>2007-01-01 &amp;hellip; 2007-01-30T23:00:00&lt;/div>&lt;input id='attrs-c2a4b2e9-333a-4d06-b1aa-58581cd1e038' class='xr-var-attrs-in' type='checkbox' disabled>&lt;label for='attrs-c2a4b2e9-333a-4d06-b1aa-58581cd1e038' title='Show/Hide attributes'>&lt;svg class='icon xr-icon-file-text2'>&lt;use xlink:href='#icon-file-text2'>&lt;/use>&lt;/svg>&lt;/label>&lt;input id='data-8ee1ac7a-f703-4a80-b6ad-fc92150ba4bc' class='xr-var-data-in' type='checkbox'>&lt;label for='data-8ee1ac7a-f703-4a80-b6ad-fc92150ba4bc' title='Show/Hide data repr'>&lt;svg class='icon xr-icon-database'>&lt;use xlink:href='#icon-database'>&lt;/use>&lt;/svg>&lt;/label>&lt;div class='xr-var-attrs'>&lt;dl class='xr-attrs'>&lt;/dl>&lt;/div>&lt;div class='xr-var-data'>&lt;pre>array(['2007-01-01T00:00:00.000000000', '2007-01-01T01:00:00.000000000',
'2007-01-01T02:00:00.000000000', '2007-01-01T03:00:00.000000000',
'2007-01-01T04:00:00.000000000', '2007-01-01T05:00:00.000000000',
'2007-01-01T06:00:00.000000000', '2007-01-01T07:00:00.000000000',
'2007-01-01T08:00:00.000000000', '2007-01-01T09:00:00.000000000',
'2007-01-01T10:00:00.000000000', '2007-01-01T11:00:00.000000000',
'2007-01-01T12:00:00.000000000', '2007-01-01T13:00:00.000000000',
'2007-01-01T14:00:00.000000000', '2007-01-01T15:00:00.000000000',
'2007-01-01T16:00:00.000000000', '2007-01-01T17:00:00.000000000',
'2007-01-01T18:00:00.000000000', '2007-01-01T19:00:00.000000000',
'2007-01-01T20:00:00.000000000', '2007-01-01T21:00:00.000000000',
'2007-01-01T22:00:00.000000000', '2007-01-01T23:00:00.000000000',
'2007-01-02T00:00:00.000000000', '2007-01-02T01:00:00.000000000',
'2007-01-02T02:00:00.000000000', '2007-01-02T03:00:00.000000000',
'2007-01-02T04:00:00.000000000', '2007-01-02T05:00:00.000000000',
'2007-01-02T06:00:00.000000000', '2007-01-02T07:00:00.000000000',
'2007-01-02T08:00:00.000000000', '2007-01-02T09:00:00.000000000',
'2007-01-02T10:00:00.000000000', '2007-01-02T11:00:00.000000000',
'2007-01-02T12:00:00.000000000', '2007-01-02T13:00:00.000000000',
'2007-01-02T14:00:00.000000000', '2007-01-02T15:00:00.000000000',
&amp;hellip;
'2007-01-29T10:00:00.000000000', '2007-01-29T11:00:00.000000000',
'2007-01-29T12:00:00.000000000', '2007-01-29T13:00:00.000000000',
'2007-01-29T14:00:00.000000000', '2007-01-29T15:00:00.000000000',
'2007-01-29T16:00:00.000000000', '2007-01-29T17:00:00.000000000',
'2007-01-29T18:00:00.000000000', '2007-01-29T19:00:00.000000000',
'2007-01-29T20:00:00.000000000', '2007-01-29T21:00:00.000000000',
'2007-01-29T22:00:00.000000000', '2007-01-29T23:00:00.000000000',
'2007-01-30T00:00:00.000000000', '2007-01-30T01:00:00.000000000',
'2007-01-30T02:00:00.000000000', '2007-01-30T03:00:00.000000000',
'2007-01-30T04:00:00.000000000', '2007-01-30T05:00:00.000000000',
'2007-01-30T06:00:00.000000000', '2007-01-30T07:00:00.000000000',
'2007-01-30T08:00:00.000000000', '2007-01-30T09:00:00.000000000',
'2007-01-30T10:00:00.000000000', '2007-01-30T11:00:00.000000000',
'2007-01-30T12:00:00.000000000', '2007-01-30T13:00:00.000000000',
'2007-01-30T14:00:00.000000000', '2007-01-30T15:00:00.000000000',
'2007-01-30T16:00:00.000000000', '2007-01-30T17:00:00.000000000',
'2007-01-30T18:00:00.000000000', '2007-01-30T19:00:00.000000000',
'2007-01-30T20:00:00.000000000', '2007-01-30T21:00:00.000000000',
'2007-01-30T22:00:00.000000000', '2007-01-30T23:00:00.000000000'],
dtype='datetime64[ns]')&lt;/pre>&lt;/div>&lt;/li>&lt;li class='xr-var-item'>&lt;div class='xr-var-name'>&lt;span>ssh&lt;/span>&lt;/div>&lt;div class='xr-var-dims'>(id_dim, t_dim)&lt;/div>&lt;div class='xr-var-dtype'>float64&lt;/div>&lt;div class='xr-var-preview xr-preview'>nan nan nan nan &amp;hellip; nan nan nan nan&lt;/div>&lt;input id='attrs-1661a4ca-644a-4cd1-bd3a-8b8e6a69360d' class='xr-var-attrs-in' type='checkbox' disabled>&lt;label for='attrs-1661a4ca-644a-4cd1-bd3a-8b8e6a69360d' title='Show/Hide attributes'>&lt;svg class='icon xr-icon-file-text2'>&lt;use xlink:href='#icon-file-text2'>&lt;/use>&lt;/svg>&lt;/label>&lt;input id='data-0554ef79-ef91-4dfb-9749-4d93d49e0329' class='xr-var-data-in' type='checkbox'>&lt;label for='data-0554ef79-ef91-4dfb-9749-4d93d49e0329' title='Show/Hide data repr'>&lt;svg class='icon xr-icon-database'>&lt;use xlink:href='#icon-database'>&lt;/use>&lt;/svg>&lt;/label>&lt;div class='xr-var-attrs'>&lt;dl class='xr-attrs'>&lt;/dl>&lt;/div>&lt;div class='xr-var-data'>&lt;pre>array([[nan, nan, nan, &amp;hellip;, nan, nan, nan],
[nan, nan, nan, &amp;hellip;, nan, nan, nan],
[nan, nan, nan, &amp;hellip;, nan, nan, nan],
&amp;hellip;,
[nan, nan, nan, &amp;hellip;, nan, nan, nan],
[nan, nan, nan, &amp;hellip;, nan, nan, nan],
[nan, nan, nan, &amp;hellip;, nan, nan, nan]])&lt;/pre>&lt;/div>&lt;/li>&lt;/ul>&lt;/div>&lt;/li>&lt;li class='xr-section-item'>&lt;input id='section-44ecce65-5250-4c8a-a455-6cb1b1bb1b23' class='xr-section-summary-in' type='checkbox' disabled >&lt;label for='section-44ecce65-5250-4c8a-a455-6cb1b1bb1b23' class='xr-section-summary' title='Expand/collapse section'>Attributes: &lt;span>(0)&lt;/span>&lt;/label>&lt;div class='xr-section-inline-details'>&lt;/div>&lt;div class='xr-section-details'>&lt;dl class='xr-attrs'>&lt;/dl>&lt;/div>&lt;/li>&lt;/ul>&lt;/div>&lt;/div>&lt;/p>
&lt;p>We can compare these analyses e.g. the observed timeseries against the harmonic reconstruction. Noting we can in principle extend the harmoninc reconstruction beyond the observation time window.&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">&lt;span style="color:#000">plt&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">figure&lt;/span>&lt;span style="color:#000;font-weight:bold">()&lt;/span>
&lt;span style="color:#000">plt&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">plot&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span> &lt;span style="color:#000">tide_obs&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">dataset&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">time&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">tide_obs&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">dataset&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">reconstructed&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">isel&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">id_dim&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#000">stn_id&lt;/span>&lt;span style="color:#000;font-weight:bold">),&lt;/span> &lt;span style="color:#000">label&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#4e9a06">&amp;#39;reconstructed from harmonics&amp;#39;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">color&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#4e9a06">&amp;#39;orange&amp;#39;&lt;/span> &lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;span style="color:#000">plt&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">plot&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span> &lt;span style="color:#000">obs_new&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">dataset&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">time&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">obs_new&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">dataset&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">ssh&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">isel&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">id_dim&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#000">stn_id&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span> &lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">label&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#4e9a06">&amp;#39;observed&amp;#39;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">color&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#4e9a06">&amp;#39;blue&amp;#39;&lt;/span> &lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;span style="color:#000">plt&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">legend&lt;/span>&lt;span style="color:#000;font-weight:bold">()&lt;/span>
&lt;span style="color:#000">plt&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">xticks&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">rotation&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">45&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;span style="color:#000">plt&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">show&lt;/span>&lt;span style="color:#000;font-weight:bold">()&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;img src="https://british-oceanographic-data-centre.github.io/COAsT/COAsT/tidegauge_validation_tutorial_files/tidegauge_validation_tutorial_55_0.png" alt="png">&lt;/p>
&lt;p>We can also look closer at the difference between the observed timeseries and the harmonic reconstruction, that is the non-tidal residual. And we can compare the observed and modelled non-harmonic residual and contrast the different methods of removing the tides. Here we contrast using a harmonic analysis (and creating a &amp;ldquo;non-tidal residual&amp;rdquo;) with the DoodsonX0 filter. Note that the timeseries is far too short for a sensible analysis and that this is really a demonstration of concept.&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">&lt;span style="color:#000">plt&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">figure&lt;/span>&lt;span style="color:#000;font-weight:bold">()&lt;/span>
&lt;span style="color:#000">plt&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">subplot&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">2&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">1&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">1&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;span style="color:#000">plt&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">plot&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span> &lt;span style="color:#000">dx0&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">dataset&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">time&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">dx0&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">isel&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">id_dim&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#000">stn_id&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">dataset&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">ssh&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">label&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#4e9a06">&amp;#39;obs: doodsonX0 filtered&amp;#39;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">color&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#4e9a06">&amp;#39;orange&amp;#39;&lt;/span> &lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;span style="color:#000">plt&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">plot&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span> &lt;span style="color:#000">ntr_obs&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">dataset&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">time&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">ntr_obs&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">isel&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">id_dim&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#000">stn_id&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">dataset&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">ntr&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">label&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#4e9a06">&amp;#39;obs: non-tidal residual&amp;#39;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">color&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#4e9a06">&amp;#39;blue&amp;#39;&lt;/span> &lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;span style="color:#000">plt&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">title&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#4e9a06">&amp;#39;analysis comparison: non-tidal residual vs doodsonX0&amp;#39;&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;span style="color:#000">plt&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">legend&lt;/span>&lt;span style="color:#000;font-weight:bold">()&lt;/span>
&lt;span style="color:#000">plt&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">xticks&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">rotation&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">45&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;span style="color:#000">plt&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">subplot&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">2&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">1&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">2&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;span style="color:#000">plt&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">plot&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span> &lt;span style="color:#000">ntr_mod&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">dataset&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">time&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">ntr_mod&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">isel&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">id_dim&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#000">stn_id&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">dataset&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">ntr&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">label&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#4e9a06">&amp;#39;model: non-tidal residual&amp;#39;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">color&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#4e9a06">&amp;#39;g&amp;#39;&lt;/span> &lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;span style="color:#000">plt&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">plot&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span> &lt;span style="color:#000">ntr_obs&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">dataset&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">time&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">ntr_obs&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">isel&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">id_dim&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#000">stn_id&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">dataset&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">ntr&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">label&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#4e9a06">&amp;#39;obs: non-tidal residual&amp;#39;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">color&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#4e9a06">&amp;#39;blue&amp;#39;&lt;/span> &lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;span style="color:#000">plt&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">title&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#4e9a06">&amp;#39;model vs observation: non-tidal residual&amp;#39;&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;span style="color:#000">plt&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">legend&lt;/span>&lt;span style="color:#000;font-weight:bold">()&lt;/span>
&lt;span style="color:#000">plt&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">xticks&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">rotation&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">45&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;span style="color:#000">plt&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">tight_layout&lt;/span>&lt;span style="color:#000;font-weight:bold">()&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;img src="https://british-oceanographic-data-centre.github.io/COAsT/COAsT/tidegauge_validation_tutorial_files/tidegauge_validation_tutorial_57_0.png" alt="png">&lt;/p>
&lt;h3 id="threshold-statistics-for-non-tidal-residuals">Threshold Statistics for non-tidal residuals&lt;/h3>
&lt;p>This is a simple extreme value analysis of whatever data you use. It will count the number of peaks and the total time spent over each threshold provided. It will also count the numbers of daily and monthly maxima over each threshold. To this, a Tidegauge object and an array of thresholds (in metres) should be passed. The method return &lt;code>peak_count_*&lt;/code>, &lt;code>time_over_threshold_*&lt;/code>, &lt;code>dailymax_count_*&lt;/code>, &lt;code>monthlymax_count_*&lt;/code>:&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">&lt;span style="color:#000">thresh_mod&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000">tganalysis&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">threshold_statistics&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">ntr_mod&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">dataset&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">thresholds&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#000">np&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">arange&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">-&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">2&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">2&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">0.1&lt;/span>&lt;span style="color:#000;font-weight:bold">))&lt;/span>
&lt;span style="color:#000">thresh_obs&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000">tganalysis&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">threshold_statistics&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">ntr_obs&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">dataset&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">thresholds&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#000">np&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">arange&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">-&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">2&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">2&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">0.1&lt;/span>&lt;span style="color:#000;font-weight:bold">))&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">&lt;span style="color:#8f5902;font-style:italic"># Have a look&lt;/span>
&lt;span style="color:#000">thresh_obs&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;div>&lt;svg style="position: absolute; width: 0; height: 0; overflow: hidden">
&lt;defs>
&lt;symbol id="icon-database" viewBox="0 0 32 32">
&lt;path d="M16 0c-8.837 0-16 2.239-16 5v4c0 2.761 7.163 5 16 5s16-2.239 16-5v-4c0-2.761-7.163-5-16-5z">&lt;/path>
&lt;path d="M16 17c-8.837 0-16-2.239-16-5v6c0 2.761 7.163 5 16 5s16-2.239 16-5v-6c0 2.761-7.163 5-16 5z">&lt;/path>
&lt;path d="M16 26c-8.837 0-16-2.239-16-5v6c0 2.761 7.163 5 16 5s16-2.239 16-5v-6c0 2.761-7.163 5-16 5z">&lt;/path>
&lt;/symbol>
&lt;symbol id="icon-file-text2" viewBox="0 0 32 32">
&lt;path d="M28.681 7.159c-0.694-0.947-1.662-2.053-2.724-3.116s-2.169-2.030-3.116-2.724c-1.612-1.182-2.393-1.319-2.841-1.319h-15.5c-1.378 0-2.5 1.121-2.5 2.5v27c0 1.378 1.122 2.5 2.5 2.5h23c1.378 0 2.5-1.122 2.5-2.5v-19.5c0-0.448-0.137-1.23-1.319-2.841zM24.543 5.457c0.959 0.959 1.712 1.825 2.268 2.543h-4.811v-4.811c0.718 0.556 1.584 1.309 2.543 2.268zM28 29.5c0 0.271-0.229 0.5-0.5 0.5h-23c-0.271 0-0.5-0.229-0.5-0.5v-27c0-0.271 0.229-0.5 0.5-0.5 0 0 15.499-0 15.5 0v7c0 0.552 0.448 1 1 1h7v19.5z">&lt;/path>
&lt;path d="M23 26h-14c-0.552 0-1-0.448-1-1s0.448-1 1-1h14c0.552 0 1 0.448 1 1s-0.448 1-1 1z">&lt;/path>
&lt;path d="M23 22h-14c-0.552 0-1-0.448-1-1s0.448-1 1-1h14c0.552 0 1 0.448 1 1s-0.448 1-1 1z">&lt;/path>
&lt;path d="M23 18h-14c-0.552 0-1-0.448-1-1s0.448-1 1-1h14c0.552 0 1 0.448 1 1s-0.448 1-1 1z">&lt;/path>
&lt;/symbol>
&lt;/defs>
&lt;/svg>
&lt;style>/* CSS stylesheet for displaying xarray objects in jupyterlab.
*
*/
&lt;p>:root {
&amp;ndash;xr-font-color0: var(&amp;ndash;jp-content-font-color0, rgba(0, 0, 0, 1));
&amp;ndash;xr-font-color2: var(&amp;ndash;jp-content-font-color2, rgba(0, 0, 0, 0.54));
&amp;ndash;xr-font-color3: var(&amp;ndash;jp-content-font-color3, rgba(0, 0, 0, 0.38));
&amp;ndash;xr-border-color: var(&amp;ndash;jp-border-color2, #e0e0e0);
&amp;ndash;xr-disabled-color: var(&amp;ndash;jp-layout-color3, #bdbdbd);
&amp;ndash;xr-background-color: var(&amp;ndash;jp-layout-color0, white);
&amp;ndash;xr-background-color-row-even: var(&amp;ndash;jp-layout-color1, white);
&amp;ndash;xr-background-color-row-odd: var(&amp;ndash;jp-layout-color2, #eeeeee);
}&lt;/p>
&lt;p>html[theme=dark],
body.vscode-dark {
&amp;ndash;xr-font-color0: rgba(255, 255, 255, 1);
&amp;ndash;xr-font-color2: rgba(255, 255, 255, 0.54);
&amp;ndash;xr-font-color3: rgba(255, 255, 255, 0.38);
&amp;ndash;xr-border-color: #1F1F1F;
&amp;ndash;xr-disabled-color: #515151;
&amp;ndash;xr-background-color: #111111;
&amp;ndash;xr-background-color-row-even: #111111;
&amp;ndash;xr-background-color-row-odd: #313131;
}&lt;/p>
&lt;p>.xr-wrap {
display: block !important;
min-width: 300px;
max-width: 700px;
}&lt;/p>
&lt;p>.xr-text-repr-fallback {
/* fallback to plain text repr when CSS is not injected (untrusted notebook) */
display: none;
}&lt;/p>
&lt;p>.xr-header {
padding-top: 6px;
padding-bottom: 6px;
margin-bottom: 4px;
border-bottom: solid 1px var(&amp;ndash;xr-border-color);
}&lt;/p>
&lt;p>.xr-header &amp;gt; div,
.xr-header &amp;gt; ul {
display: inline;
margin-top: 0;
margin-bottom: 0;
}&lt;/p>
&lt;p>.xr-obj-type,
.xr-array-name {
margin-left: 2px;
margin-right: 10px;
}&lt;/p>
&lt;p>.xr-obj-type {
color: var(&amp;ndash;xr-font-color2);
}&lt;/p>
&lt;p>.xr-sections {
padding-left: 0 !important;
display: grid;
grid-template-columns: 150px auto auto 1fr 20px 20px;
}&lt;/p>
&lt;p>.xr-section-item {
display: contents;
}&lt;/p>
&lt;p>.xr-section-item input {
display: none;
}&lt;/p>
&lt;p>.xr-section-item input + label {
color: var(&amp;ndash;xr-disabled-color);
}&lt;/p>
&lt;p>.xr-section-item input:enabled + label {
cursor: pointer;
color: var(&amp;ndash;xr-font-color2);
}&lt;/p>
&lt;p>.xr-section-item input:enabled + label:hover {
color: var(&amp;ndash;xr-font-color0);
}&lt;/p>
&lt;p>.xr-section-summary {
grid-column: 1;
color: var(&amp;ndash;xr-font-color2);
font-weight: 500;
}&lt;/p>
&lt;p>.xr-section-summary &amp;gt; span {
display: inline-block;
padding-left: 0.5em;
}&lt;/p>
&lt;p>.xr-section-summary-in:disabled + label {
color: var(&amp;ndash;xr-font-color2);
}&lt;/p>
&lt;p>.xr-section-summary-in + label:before {
display: inline-block;
content: &amp;lsquo;â–º&amp;rsquo;;
font-size: 11px;
width: 15px;
text-align: center;
}&lt;/p>
&lt;p>.xr-section-summary-in:disabled + label:before {
color: var(&amp;ndash;xr-disabled-color);
}&lt;/p>
&lt;p>.xr-section-summary-in:checked + label:before {
content: &amp;lsquo;â–¼&amp;rsquo;;
}&lt;/p>
&lt;p>.xr-section-summary-in:checked + label &amp;gt; span {
display: none;
}&lt;/p>
&lt;p>.xr-section-summary,
.xr-section-inline-details {
padding-top: 4px;
padding-bottom: 4px;
}&lt;/p>
&lt;p>.xr-section-inline-details {
grid-column: 2 / -1;
}&lt;/p>
&lt;p>.xr-section-details {
display: none;
grid-column: 1 / -1;
margin-bottom: 5px;
}&lt;/p>
&lt;p>.xr-section-summary-in:checked ~ .xr-section-details {
display: contents;
}&lt;/p>
&lt;p>.xr-array-wrap {
grid-column: 1 / -1;
display: grid;
grid-template-columns: 20px auto;
}&lt;/p>
&lt;p>.xr-array-wrap &amp;gt; label {
grid-column: 1;
vertical-align: top;
}&lt;/p>
&lt;p>.xr-preview {
color: var(&amp;ndash;xr-font-color3);
}&lt;/p>
&lt;p>.xr-array-preview,
.xr-array-data {
padding: 0 5px !important;
grid-column: 2;
}&lt;/p>
&lt;p>.xr-array-data,
.xr-array-in:checked ~ .xr-array-preview {
display: none;
}&lt;/p>
&lt;p>.xr-array-in:checked ~ .xr-array-data,
.xr-array-preview {
display: inline-block;
}&lt;/p>
&lt;p>.xr-dim-list {
display: inline-block !important;
list-style: none;
padding: 0 !important;
margin: 0;
}&lt;/p>
&lt;p>.xr-dim-list li {
display: inline-block;
padding: 0;
margin: 0;
}&lt;/p>
&lt;p>.xr-dim-list:before {
content: &amp;lsquo;(';
}&lt;/p>
&lt;p>.xr-dim-list:after {
content: &amp;lsquo;)';
}&lt;/p>
&lt;p>.xr-dim-list li:not(:last-child):after {
content: &amp;lsquo;,';
padding-right: 5px;
}&lt;/p>
&lt;p>.xr-has-index {
font-weight: bold;
}&lt;/p>
&lt;p>.xr-var-list,
.xr-var-item {
display: contents;
}&lt;/p>
&lt;p>.xr-var-item &amp;gt; div,
.xr-var-item label,
.xr-var-item &amp;gt; .xr-var-name span {
background-color: var(&amp;ndash;xr-background-color-row-even);
margin-bottom: 0;
}&lt;/p>
&lt;p>.xr-var-item &amp;gt; .xr-var-name:hover span {
padding-right: 5px;
}&lt;/p>
&lt;p>.xr-var-list &amp;gt; li:nth-child(odd) &amp;gt; div,
.xr-var-list &amp;gt; li:nth-child(odd) &amp;gt; label,
.xr-var-list &amp;gt; li:nth-child(odd) &amp;gt; .xr-var-name span {
background-color: var(&amp;ndash;xr-background-color-row-odd);
}&lt;/p>
&lt;p>.xr-var-name {
grid-column: 1;
}&lt;/p>
&lt;p>.xr-var-dims {
grid-column: 2;
}&lt;/p>
&lt;p>.xr-var-dtype {
grid-column: 3;
text-align: right;
color: var(&amp;ndash;xr-font-color2);
}&lt;/p>
&lt;p>.xr-var-preview {
grid-column: 4;
}&lt;/p>
&lt;p>.xr-var-name,
.xr-var-dims,
.xr-var-dtype,
.xr-preview,
.xr-attrs dt {
white-space: nowrap;
overflow: hidden;
text-overflow: ellipsis;
padding-right: 10px;
}&lt;/p>
&lt;p>.xr-var-name:hover,
.xr-var-dims:hover,
.xr-var-dtype:hover,
.xr-attrs dt:hover {
overflow: visible;
width: auto;
z-index: 1;
}&lt;/p>
&lt;p>.xr-var-attrs,
.xr-var-data {
display: none;
background-color: var(&amp;ndash;xr-background-color) !important;
padding-bottom: 5px !important;
}&lt;/p>
&lt;p>.xr-var-attrs-in:checked ~ .xr-var-attrs,
.xr-var-data-in:checked ~ .xr-var-data {
display: block;
}&lt;/p>
&lt;p>.xr-var-data &amp;gt; table {
float: right;
}&lt;/p>
&lt;p>.xr-var-name span,
.xr-var-data,
.xr-attrs {
padding-left: 25px !important;
}&lt;/p>
&lt;p>.xr-attrs,
.xr-var-attrs,
.xr-var-data {
grid-column: 1 / -1;
}&lt;/p>
&lt;p>dl.xr-attrs {
padding: 0;
margin: 0;
display: grid;
grid-template-columns: 125px auto;
}&lt;/p>
&lt;p>.xr-attrs dt,
.xr-attrs dd {
padding: 0;
margin: 0;
float: left;
padding-right: 10px;
width: auto;
}&lt;/p>
&lt;p>.xr-attrs dt {
font-weight: normal;
grid-column: 1;
}&lt;/p>
&lt;p>.xr-attrs dt:hover span {
display: inline-block;
background: var(&amp;ndash;xr-background-color);
padding-right: 10px;
}&lt;/p>
&lt;p>.xr-attrs dd {
grid-column: 2;
white-space: pre-wrap;
word-break: break-all;
}&lt;/p>
&lt;p>.xr-icon-database,
.xr-icon-file-text2 {
display: inline-block;
vertical-align: middle;
width: 1em;
height: 1.5em !important;
stroke-width: 0;
stroke: currentColor;
fill: currentColor;
}
&lt;/style>&lt;pre class='xr-text-repr-fallback'>&amp;lt;xarray.Dataset&amp;gt;
Dimensions: (t_dim: 720, id_dim: 61, threshold: 40)
Coordinates:
latitude (id_dim) float64 51.95 51.57 57.9 &amp;hellip; 51.53 53.87
site_name (id_dim) object 'Harwich' 'Mumbles' &amp;hellip; 'N/A' 'N/A'
longitude (id_dim) float64 1.292 -3.975 &amp;hellip; 350.8 8.717&lt;/p>
&lt;ul>
&lt;li>threshold (threshold) float64 -2.0 -1.9 -1.8 &amp;hellip; 1.7 1.8 1.9
Dimensions without coordinates: t_dim, id_dim
Data variables:
time (t_dim) datetime64[ns] 2007-01-01 &amp;hellip; 2007-01-30&amp;hellip;
peak_count_ntr (id_dim, threshold) float64 24.0 24.0 &amp;hellip; 0.0 0.0
time_over_threshold_ntr (id_dim, threshold) float64 671.0 671.0 &amp;hellip; 0.0 0.0
dailymax_count_ntr (id_dim, threshold) float64 29.0 29.0 &amp;hellip; 0.0 0.0
monthlymax_count_ntr (id_dim, threshold) float64 1.0 1.0 1.0 &amp;hellip; 0.0 0.0&lt;/pre>&lt;div class='xr-wrap' style='display:none'>&lt;div class='xr-header'>&lt;div class='xr-obj-type'>xarray.Dataset&lt;/div>&lt;/div>&lt;ul class='xr-sections'>&lt;li class='xr-section-item'>&lt;input id='section-dfa0d6be-e49b-45af-860f-68cdd51166ca' class='xr-section-summary-in' type='checkbox' disabled >&lt;label for='section-dfa0d6be-e49b-45af-860f-68cdd51166ca' class='xr-section-summary' title='Expand/collapse section'>Dimensions:&lt;/label>&lt;div class='xr-section-inline-details'>&lt;ul class='xr-dim-list'>&lt;li>&lt;span>t_dim&lt;/span>: 720&lt;/li>&lt;li>&lt;span>id_dim&lt;/span>: 61&lt;/li>&lt;li>&lt;span class='xr-has-index'>threshold&lt;/span>: 40&lt;/li>&lt;/ul>&lt;/div>&lt;div class='xr-section-details'>&lt;/div>&lt;/li>&lt;li class='xr-section-item'>&lt;input id='section-c8668914-8a81-436a-9e39-d588631b26ee' class='xr-section-summary-in' type='checkbox' checked>&lt;label for='section-c8668914-8a81-436a-9e39-d588631b26ee' class='xr-section-summary' >Coordinates: &lt;span>(4)&lt;/span>&lt;/label>&lt;div class='xr-section-inline-details'>&lt;/div>&lt;div class='xr-section-details'>&lt;ul class='xr-var-list'>&lt;li class='xr-var-item'>&lt;div class='xr-var-name'>&lt;span>latitude&lt;/span>&lt;/div>&lt;div class='xr-var-dims'>(id_dim)&lt;/div>&lt;div class='xr-var-dtype'>float64&lt;/div>&lt;div class='xr-var-preview xr-preview'>51.95 51.57 57.9 &amp;hellip; 51.53 53.87&lt;/div>&lt;input id='attrs-abc4f9d6-51c9-4c85-b386-f65bd3101bd7' class='xr-var-attrs-in' type='checkbox' disabled>&lt;label for='attrs-abc4f9d6-51c9-4c85-b386-f65bd3101bd7' title='Show/Hide attributes'>&lt;svg class='icon xr-icon-file-text2'>&lt;use xlink:href='#icon-file-text2'>&lt;/use>&lt;/svg>&lt;/label>&lt;input id='data-37492dfb-be2f-4692-a73f-2cd0f96f71a3' class='xr-var-data-in' type='checkbox'>&lt;label for='data-37492dfb-be2f-4692-a73f-2cd0f96f71a3' title='Show/Hide data repr'>&lt;svg class='icon xr-icon-database'>&lt;use xlink:href='#icon-database'>&lt;/use>&lt;/svg>&lt;/label>&lt;div class='xr-var-attrs'>&lt;dl class='xr-attrs'>&lt;/dl>&lt;/div>&lt;div class='xr-var-data'>&lt;pre>array([51.94798 , 51.57 , 57.89525 , 51.7064 , 54.03167 ,
51.21525 , 58.45661 , 58.44097 , 55.00744 , 51.95675 ,
53.31394 , 52.93436 , 56.62311 , 50.6085 , 53.33167 ,
50.36839 , 51.44564 , 54.49008 , 50.103 , 54.84256 ,
55.00744 , 57.14406 , 60.15403 , 51.55 , 50.71433 ,
49.91847 , 53.44969 , 55.62742 , 53.63103 , 50.78178 ,
57.5987 , 51.11439 , 51.51089 , 49.18333 , 55.00744 ,
54.65081 , 55.00744 , 51.50002 , 55.98983 , 52.473 ,
52.01378 , 54.66475 , 51.21525 , 50.80256 , 58.20711 ,
55.74964 , 54.08539 , 55.20678 , 51.50002 , 55.00744 ,
52.71906 , 51.21097 , 55.00744 , 58.34999847, 57.68299866,
61.93299866, 64.86699677, 55.36700058, 58. , 51.53300095,
53.86700058])&lt;/pre>&lt;/div>&lt;/li>&lt;li class='xr-var-item'>&lt;div class='xr-var-name'>&lt;span>site_name&lt;/span>&lt;/div>&lt;div class='xr-var-dims'>(id_dim)&lt;/div>&lt;div class='xr-var-dtype'>object&lt;/div>&lt;div class='xr-var-preview xr-preview'>'Harwich' 'Mumbles' &amp;hellip; 'N/A' 'N/A'&lt;/div>&lt;input id='attrs-af34b280-a096-4232-b4ec-9295391caacc' class='xr-var-attrs-in' type='checkbox' disabled>&lt;label for='attrs-af34b280-a096-4232-b4ec-9295391caacc' title='Show/Hide attributes'>&lt;svg class='icon xr-icon-file-text2'>&lt;use xlink:href='#icon-file-text2'>&lt;/use>&lt;/svg>&lt;/label>&lt;input id='data-c7be59b1-f7eb-4a20-9eb4-7087c1e61c68' class='xr-var-data-in' type='checkbox'>&lt;label for='data-c7be59b1-f7eb-4a20-9eb4-7087c1e61c68' title='Show/Hide data repr'>&lt;svg class='icon xr-icon-database'>&lt;use xlink:href='#icon-database'>&lt;/use>&lt;/svg>&lt;/label>&lt;div class='xr-var-attrs'>&lt;dl class='xr-attrs'>&lt;/dl>&lt;/div>&lt;div class='xr-var-data'>&lt;pre>array(['Harwich', 'Mumbles', 'Ullapool', 'Milford Haven', 'Heysham',
'Hinkley Point', 'Kinlochbervie', 'Wick', 'North Shields',
'Felixstowe', 'Holyhead', 'Cromer', 'Tobermory', 'Weymouth',
'Llandudno', 'Devonport', 'Sheerness', 'Whitby', 'Newlyn',
'Portpatrick', 'North Shields', 'Aberdeen', 'Lerwick', 'Newport',
'Bournemouth', &amp;quot;St. Mary's&amp;quot;, 'Liverpool, Gladstone Dock',
'Port Ellen (Islay)', 'Immingham', 'Newhaven', 'Moray Firth',
'Dover', 'Avonmouth', 'St. Helier (Jersey)', 'North Shields',
'Workington', 'North Shields', 'Portbury', 'Leith', 'Lowestoft',
'Fishguard', 'Bangor', 'Hinkley Point', 'Portsmouth', 'Stornoway',
'Millport', 'Port Erin', 'Portrush', 'Portbury', 'North Shields',
'Barmouth', 'Ilfracombe', 'North Shields', 'N/A', 'N/A', 'N/A',
'N/A', 'N/A', 'N/A', 'N/A', 'N/A'], dtype=object)&lt;/pre>&lt;/div>&lt;/li>&lt;li class='xr-var-item'>&lt;div class='xr-var-name'>&lt;span>longitude&lt;/span>&lt;/div>&lt;div class='xr-var-dims'>(id_dim)&lt;/div>&lt;div class='xr-var-dtype'>float64&lt;/div>&lt;div class='xr-var-preview xr-preview'>1.292 -3.975 -5.158 &amp;hellip; 350.8 8.717&lt;/div>&lt;input id='attrs-4463471d-e5e0-48c6-9870-8776aca3dbe1' class='xr-var-attrs-in' type='checkbox' disabled>&lt;label for='attrs-4463471d-e5e0-48c6-9870-8776aca3dbe1' title='Show/Hide attributes'>&lt;svg class='icon xr-icon-file-text2'>&lt;use xlink:href='#icon-file-text2'>&lt;/use>&lt;/svg>&lt;/label>&lt;input id='data-5831b90c-493b-4ac5-bcc4-93ce5e258ecb' class='xr-var-data-in' type='checkbox'>&lt;label for='data-5831b90c-493b-4ac5-bcc4-93ce5e258ecb' title='Show/Hide data repr'>&lt;svg class='icon xr-icon-database'>&lt;use xlink:href='#icon-database'>&lt;/use>&lt;/svg>&lt;/label>&lt;div class='xr-var-attrs'>&lt;dl class='xr-attrs'>&lt;/dl>&lt;/div>&lt;div class='xr-var-data'>&lt;pre>array([ 1.29210000e+00, -3.97544000e+00, -5.15789000e+00, -5.05148000e+00,
-2.92042000e+00, -3.13433000e+00, -5.05036000e+00, -3.08631000e+00,
-1.43978000e+00, 1.34839000e+00, -4.62044000e+00, 1.30164000e+00,
-6.06422000e+00, -2.44794000e+00, -3.82522000e+00, -4.18525000e+00,
7.43440000e-01, -6.14170000e-01, -5.54283000e+00, -5.12003000e+00,
-1.43978000e+00, -2.08013000e+00, -1.14031000e+00, -2.98744000e+00,
-1.87486000e+00, -6.31642000e+00, -3.01800000e+00, -6.19006000e+00,
-1.86030000e-01, 5.70300000e-02, -4.00220000e+00, 1.32267000e+00,
-2.71497000e+00, -2.11667000e+00, -1.43978000e+00, -3.56764000e+00,
-1.43978000e+00, -2.72848000e+00, -3.18169000e+00, 1.75083000e+00,
-4.98333000e+00, -5.66947000e+00, -3.13433000e+00, -1.11175000e+00,
-6.38889000e+00, -4.90583000e+00, -4.76806000e+00, -6.65683000e+00,
-2.72848000e+00, -1.43978000e+00, -4.04517000e+00, -4.11094000e+00,
-1.43978000e+00, 1.12150002e+01, 1.18000002e+01, 5.11700010e+00,
1.12500000e+01, 3.52666992e+02, 7.56699991e+00, 3.50816986e+02,
8.71700001e+00])&lt;/pre>&lt;/div>&lt;/li>&lt;li class='xr-var-item'>&lt;div class='xr-var-name'>&lt;span class='xr-has-index'>threshold&lt;/span>&lt;/div>&lt;div class='xr-var-dims'>(threshold)&lt;/div>&lt;div class='xr-var-dtype'>float64&lt;/div>&lt;div class='xr-var-preview xr-preview'>-2.0 -1.9 -1.8 -1.7 &amp;hellip; 1.7 1.8 1.9&lt;/div>&lt;input id='attrs-4b4dd4f6-5424-48b2-a934-8b5977a80af4' class='xr-var-attrs-in' type='checkbox' disabled>&lt;label for='attrs-4b4dd4f6-5424-48b2-a934-8b5977a80af4' title='Show/Hide attributes'>&lt;svg class='icon xr-icon-file-text2'>&lt;use xlink:href='#icon-file-text2'>&lt;/use>&lt;/svg>&lt;/label>&lt;input id='data-9589750a-b1cf-4636-af71-da65a5c5e413' class='xr-var-data-in' type='checkbox'>&lt;label for='data-9589750a-b1cf-4636-af71-da65a5c5e413' title='Show/Hide data repr'>&lt;svg class='icon xr-icon-database'>&lt;use xlink:href='#icon-database'>&lt;/use>&lt;/svg>&lt;/label>&lt;div class='xr-var-attrs'>&lt;dl class='xr-attrs'>&lt;/dl>&lt;/div>&lt;div class='xr-var-data'>&lt;pre>array([-2.000000e+00, -1.900000e+00, -1.800000e+00, -1.700000e+00,
-1.600000e+00, -1.500000e+00, -1.400000e+00, -1.300000e+00,
-1.200000e+00, -1.100000e+00, -1.000000e+00, -9.000000e-01,
-8.000000e-01, -7.000000e-01, -6.000000e-01, -5.000000e-01,
-4.000000e-01, -3.000000e-01, -2.000000e-01, -1.000000e-01,
1.776357e-15, 1.000000e-01, 2.000000e-01, 3.000000e-01,
4.000000e-01, 5.000000e-01, 6.000000e-01, 7.000000e-01,
8.000000e-01, 9.000000e-01, 1.000000e+00, 1.100000e+00,
1.200000e+00, 1.300000e+00, 1.400000e+00, 1.500000e+00,
1.600000e+00, 1.700000e+00, 1.800000e+00, 1.900000e+00])&lt;/pre>&lt;/div>&lt;/li>&lt;/ul>&lt;/div>&lt;/li>&lt;li class='xr-section-item'>&lt;input id='section-3b9ee740-61af-48cb-9b97-d160cfaec8bb' class='xr-section-summary-in' type='checkbox' checked>&lt;label for='section-3b9ee740-61af-48cb-9b97-d160cfaec8bb' class='xr-section-summary' >Data variables: &lt;span>(5)&lt;/span>&lt;/label>&lt;div class='xr-section-inline-details'>&lt;/div>&lt;div class='xr-section-details'>&lt;ul class='xr-var-list'>&lt;li class='xr-var-item'>&lt;div class='xr-var-name'>&lt;span>time&lt;/span>&lt;/div>&lt;div class='xr-var-dims'>(t_dim)&lt;/div>&lt;div class='xr-var-dtype'>datetime64[ns]&lt;/div>&lt;div class='xr-var-preview xr-preview'>2007-01-01 &amp;hellip; 2007-01-30T23:00:00&lt;/div>&lt;input id='attrs-6c1607dc-1565-4843-b5ef-af0ce7ec0115' class='xr-var-attrs-in' type='checkbox' disabled>&lt;label for='attrs-6c1607dc-1565-4843-b5ef-af0ce7ec0115' title='Show/Hide attributes'>&lt;svg class='icon xr-icon-file-text2'>&lt;use xlink:href='#icon-file-text2'>&lt;/use>&lt;/svg>&lt;/label>&lt;input id='data-81fc6d90-ce8e-4cd3-bd5d-26017c1dcc41' class='xr-var-data-in' type='checkbox'>&lt;label for='data-81fc6d90-ce8e-4cd3-bd5d-26017c1dcc41' title='Show/Hide data repr'>&lt;svg class='icon xr-icon-database'>&lt;use xlink:href='#icon-database'>&lt;/use>&lt;/svg>&lt;/label>&lt;div class='xr-var-attrs'>&lt;dl class='xr-attrs'>&lt;/dl>&lt;/div>&lt;div class='xr-var-data'>&lt;pre>array(['2007-01-01T00:00:00.000000000', '2007-01-01T01:00:00.000000000',
'2007-01-01T02:00:00.000000000', '2007-01-01T03:00:00.000000000',
'2007-01-01T04:00:00.000000000', '2007-01-01T05:00:00.000000000',
'2007-01-01T06:00:00.000000000', '2007-01-01T07:00:00.000000000',
'2007-01-01T08:00:00.000000000', '2007-01-01T09:00:00.000000000',
'2007-01-01T10:00:00.000000000', '2007-01-01T11:00:00.000000000',
'2007-01-01T12:00:00.000000000', '2007-01-01T13:00:00.000000000',
'2007-01-01T14:00:00.000000000', '2007-01-01T15:00:00.000000000',
'2007-01-01T16:00:00.000000000', '2007-01-01T17:00:00.000000000',
'2007-01-01T18:00:00.000000000', '2007-01-01T19:00:00.000000000',
'2007-01-01T20:00:00.000000000', '2007-01-01T21:00:00.000000000',
'2007-01-01T22:00:00.000000000', '2007-01-01T23:00:00.000000000',
'2007-01-02T00:00:00.000000000', '2007-01-02T01:00:00.000000000',
'2007-01-02T02:00:00.000000000', '2007-01-02T03:00:00.000000000',
'2007-01-02T04:00:00.000000000', '2007-01-02T05:00:00.000000000',
'2007-01-02T06:00:00.000000000', '2007-01-02T07:00:00.000000000',
'2007-01-02T08:00:00.000000000', '2007-01-02T09:00:00.000000000',
'2007-01-02T10:00:00.000000000', '2007-01-02T11:00:00.000000000',
'2007-01-02T12:00:00.000000000', '2007-01-02T13:00:00.000000000',
'2007-01-02T14:00:00.000000000', '2007-01-02T15:00:00.000000000',
&amp;hellip;
'2007-01-29T10:00:00.000000000', '2007-01-29T11:00:00.000000000',
'2007-01-29T12:00:00.000000000', '2007-01-29T13:00:00.000000000',
'2007-01-29T14:00:00.000000000', '2007-01-29T15:00:00.000000000',
'2007-01-29T16:00:00.000000000', '2007-01-29T17:00:00.000000000',
'2007-01-29T18:00:00.000000000', '2007-01-29T19:00:00.000000000',
'2007-01-29T20:00:00.000000000', '2007-01-29T21:00:00.000000000',
'2007-01-29T22:00:00.000000000', '2007-01-29T23:00:00.000000000',
'2007-01-30T00:00:00.000000000', '2007-01-30T01:00:00.000000000',
'2007-01-30T02:00:00.000000000', '2007-01-30T03:00:00.000000000',
'2007-01-30T04:00:00.000000000', '2007-01-30T05:00:00.000000000',
'2007-01-30T06:00:00.000000000', '2007-01-30T07:00:00.000000000',
'2007-01-30T08:00:00.000000000', '2007-01-30T09:00:00.000000000',
'2007-01-30T10:00:00.000000000', '2007-01-30T11:00:00.000000000',
'2007-01-30T12:00:00.000000000', '2007-01-30T13:00:00.000000000',
'2007-01-30T14:00:00.000000000', '2007-01-30T15:00:00.000000000',
'2007-01-30T16:00:00.000000000', '2007-01-30T17:00:00.000000000',
'2007-01-30T18:00:00.000000000', '2007-01-30T19:00:00.000000000',
'2007-01-30T20:00:00.000000000', '2007-01-30T21:00:00.000000000',
'2007-01-30T22:00:00.000000000', '2007-01-30T23:00:00.000000000'],
dtype='datetime64[ns]')&lt;/pre>&lt;/div>&lt;/li>&lt;li class='xr-var-item'>&lt;div class='xr-var-name'>&lt;span>peak_count_ntr&lt;/span>&lt;/div>&lt;div class='xr-var-dims'>(id_dim, threshold)&lt;/div>&lt;div class='xr-var-dtype'>float64&lt;/div>&lt;div class='xr-var-preview xr-preview'>24.0 24.0 24.0 24.0 &amp;hellip; 0.0 0.0 0.0&lt;/div>&lt;input id='attrs-d2d84dbe-a6d7-4e1c-9ccb-6eaa6f700f4d' class='xr-var-attrs-in' type='checkbox' disabled>&lt;label for='attrs-d2d84dbe-a6d7-4e1c-9ccb-6eaa6f700f4d' title='Show/Hide attributes'>&lt;svg class='icon xr-icon-file-text2'>&lt;use xlink:href='#icon-file-text2'>&lt;/use>&lt;/svg>&lt;/label>&lt;input id='data-51a6e0f6-57d4-4f3c-ac4a-2f6ac6f32a69' class='xr-var-data-in' type='checkbox'>&lt;label for='data-51a6e0f6-57d4-4f3c-ac4a-2f6ac6f32a69' title='Show/Hide data repr'>&lt;svg class='icon xr-icon-database'>&lt;use xlink:href='#icon-database'>&lt;/use>&lt;/svg>&lt;/label>&lt;div class='xr-var-attrs'>&lt;dl class='xr-attrs'>&lt;/dl>&lt;/div>&lt;div class='xr-var-data'>&lt;pre>array([[24., 24., 24., &amp;hellip;, 0., 0., 0.],
[14., 14., 14., &amp;hellip;, 0., 0., 0.],
[21., 21., 21., &amp;hellip;, 0., 0., 0.],
&amp;hellip;,
[23., 23., 23., &amp;hellip;, 0., 0., 0.],
[30., 30., 30., &amp;hellip;, 0., 0., 0.],
[24., 24., 24., &amp;hellip;, 0., 0., 0.]])&lt;/pre>&lt;/div>&lt;/li>&lt;li class='xr-var-item'>&lt;div class='xr-var-name'>&lt;span>time_over_threshold_ntr&lt;/span>&lt;/div>&lt;div class='xr-var-dims'>(id_dim, threshold)&lt;/div>&lt;div class='xr-var-dtype'>float64&lt;/div>&lt;div class='xr-var-preview xr-preview'>671.0 671.0 671.0 &amp;hellip; 0.0 0.0 0.0&lt;/div>&lt;input id='attrs-4ce83047-b6e8-4f0e-af84-64aee4e12efa' class='xr-var-attrs-in' type='checkbox' disabled>&lt;label for='attrs-4ce83047-b6e8-4f0e-af84-64aee4e12efa' title='Show/Hide attributes'>&lt;svg class='icon xr-icon-file-text2'>&lt;use xlink:href='#icon-file-text2'>&lt;/use>&lt;/svg>&lt;/label>&lt;input id='data-5ca2b5d9-b567-4944-a777-81cf2caf4435' class='xr-var-data-in' type='checkbox'>&lt;label for='data-5ca2b5d9-b567-4944-a777-81cf2caf4435' title='Show/Hide data repr'>&lt;svg class='icon xr-icon-database'>&lt;use xlink:href='#icon-database'>&lt;/use>&lt;/svg>&lt;/label>&lt;div class='xr-var-attrs'>&lt;dl class='xr-attrs'>&lt;/dl>&lt;/div>&lt;div class='xr-var-data'>&lt;pre>array([[671., 671., 671., &amp;hellip;, 0., 0., 0.],
[341., 341., 341., &amp;hellip;, 0., 0., 0.],
[671., 671., 671., &amp;hellip;, 0., 0., 0.],
&amp;hellip;,
[696., 696., 696., &amp;hellip;, 0., 0., 0.],
[696., 696., 696., &amp;hellip;, 0., 0., 0.],
[696., 696., 696., &amp;hellip;, 0., 0., 0.]])&lt;/pre>&lt;/div>&lt;/li>&lt;li class='xr-var-item'>&lt;div class='xr-var-name'>&lt;span>dailymax_count_ntr&lt;/span>&lt;/div>&lt;div class='xr-var-dims'>(id_dim, threshold)&lt;/div>&lt;div class='xr-var-dtype'>float64&lt;/div>&lt;div class='xr-var-preview xr-preview'>29.0 29.0 29.0 29.0 &amp;hellip; 0.0 0.0 0.0&lt;/div>&lt;input id='attrs-41f692f2-7a4d-4c33-9c7f-36b3fddec3b4' class='xr-var-attrs-in' type='checkbox' disabled>&lt;label for='attrs-41f692f2-7a4d-4c33-9c7f-36b3fddec3b4' title='Show/Hide attributes'>&lt;svg class='icon xr-icon-file-text2'>&lt;use xlink:href='#icon-file-text2'>&lt;/use>&lt;/svg>&lt;/label>&lt;input id='data-e62c1c3f-45fc-4ac3-b21f-f5cd471f649d' class='xr-var-data-in' type='checkbox'>&lt;label for='data-e62c1c3f-45fc-4ac3-b21f-f5cd471f649d' title='Show/Hide data repr'>&lt;svg class='icon xr-icon-database'>&lt;use xlink:href='#icon-database'>&lt;/use>&lt;/svg>&lt;/label>&lt;div class='xr-var-attrs'>&lt;dl class='xr-attrs'>&lt;/dl>&lt;/div>&lt;div class='xr-var-data'>&lt;pre>array([[29., 29., 29., &amp;hellip;, 0., 0., 0.],
[15., 15., 15., &amp;hellip;, 0., 0., 0.],
[29., 29., 29., &amp;hellip;, 0., 0., 0.],
&amp;hellip;,
[29., 29., 29., &amp;hellip;, 0., 0., 0.],
[29., 29., 29., &amp;hellip;, 0., 0., 0.],
[29., 29., 29., &amp;hellip;, 0., 0., 0.]])&lt;/pre>&lt;/div>&lt;/li>&lt;li class='xr-var-item'>&lt;div class='xr-var-name'>&lt;span>monthlymax_count_ntr&lt;/span>&lt;/div>&lt;div class='xr-var-dims'>(id_dim, threshold)&lt;/div>&lt;div class='xr-var-dtype'>float64&lt;/div>&lt;div class='xr-var-preview xr-preview'>1.0 1.0 1.0 1.0 &amp;hellip; 0.0 0.0 0.0 0.0&lt;/div>&lt;input id='attrs-df778a08-2447-4bfc-8204-29e65dec0545' class='xr-var-attrs-in' type='checkbox' disabled>&lt;label for='attrs-df778a08-2447-4bfc-8204-29e65dec0545' title='Show/Hide attributes'>&lt;svg class='icon xr-icon-file-text2'>&lt;use xlink:href='#icon-file-text2'>&lt;/use>&lt;/svg>&lt;/label>&lt;input id='data-4e167f8f-3d57-4f62-bc92-0e4e29c790df' class='xr-var-data-in' type='checkbox'>&lt;label for='data-4e167f8f-3d57-4f62-bc92-0e4e29c790df' title='Show/Hide data repr'>&lt;svg class='icon xr-icon-database'>&lt;use xlink:href='#icon-database'>&lt;/use>&lt;/svg>&lt;/label>&lt;div class='xr-var-attrs'>&lt;dl class='xr-attrs'>&lt;/dl>&lt;/div>&lt;div class='xr-var-data'>&lt;pre>array([[1., 1., 1., &amp;hellip;, 0., 0., 0.],
[1., 1., 1., &amp;hellip;, 0., 0., 0.],
[1., 1., 1., &amp;hellip;, 0., 0., 0.],
&amp;hellip;,
[1., 1., 1., &amp;hellip;, 0., 0., 0.],
[1., 1., 1., &amp;hellip;, 0., 0., 0.],
[1., 1., 1., &amp;hellip;, 0., 0., 0.]])&lt;/pre>&lt;/div>&lt;/li>&lt;/ul>&lt;/div>&lt;/li>&lt;li class='xr-section-item'>&lt;input id='section-eec88999-e951-4c90-a796-660a378b0ccd' class='xr-section-summary-in' type='checkbox' disabled >&lt;label for='section-eec88999-e951-4c90-a796-660a378b0ccd' class='xr-section-summary' title='Expand/collapse section'>Attributes: &lt;span>(0)&lt;/span>&lt;/label>&lt;div class='xr-section-inline-details'>&lt;/div>&lt;div class='xr-section-details'>&lt;dl class='xr-attrs'>&lt;/dl>&lt;/div>&lt;/li>&lt;/ul>&lt;/div>&lt;/div>&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">&lt;span style="color:#000">plt&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">plot&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span> &lt;span style="color:#000">thresh_obs&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">threshold&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">thresh_obs&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">peak_count_ntr&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">mean&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">dim&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#4e9a06">&amp;#39;id_dim&amp;#39;&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span> &lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;span style="color:#8f5902;font-style:italic">#plt.ylim([0,15])&lt;/span>
&lt;span style="color:#000">plt&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">title&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">f&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;Observed peaks over threshold&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;span style="color:#000">plt&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">xlabel&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#4e9a06">&amp;#39;Analysis threshold (m)&amp;#39;&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;span style="color:#000">plt&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">ylabel&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#4e9a06">&amp;#39;event count&amp;#39;&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;pre>&lt;code>Text(0, 0.5, 'event count')
&lt;/code>&lt;/pre>
&lt;p>&lt;img src="https://british-oceanographic-data-centre.github.io/COAsT/COAsT/tidegauge_validation_tutorial_files/tidegauge_validation_tutorial_61_1.png" alt="png">&lt;/p>
&lt;p>Note that the non-tidal residual is a noisy timeseries (computed as a difference between two timeseries) so peaks do not necessarily correspond to peaks in total water level. For this reason &lt;code>time_over_threshold_*&lt;/code> can be useful. Below we see that about 6% (y-axis) of the observations of non-tidal residual exceed 20cm (x-axis). Again, threshold statistics are more useful with a longer record.&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">&lt;span style="color:#000">normalised_event_count&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">100&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">*&lt;/span> &lt;span style="color:#000">thresh_obs&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">time_over_threshold_ntr&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">isel&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">id_dim&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#000">stn_id&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">/&lt;/span> &lt;span style="color:#000">thresh_obs&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">time_over_threshold_ntr&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">isel&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">id_dim&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#000">stn_id&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">max&lt;/span>&lt;span style="color:#000;font-weight:bold">()&lt;/span>
&lt;span style="color:#000">plt&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">plot&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span> &lt;span style="color:#000">thresh_obs&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">threshold&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">normalised_event_count&lt;/span> &lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;span style="color:#000">plt&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">ylim&lt;/span>&lt;span style="color:#000;font-weight:bold">([&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">0&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">20&lt;/span>&lt;span style="color:#000;font-weight:bold">])&lt;/span>
&lt;span style="color:#000">plt&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">xlim&lt;/span>&lt;span style="color:#000;font-weight:bold">([&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">0.1&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">0.4&lt;/span>&lt;span style="color:#000;font-weight:bold">])&lt;/span>
&lt;span style="color:#000">plt&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">title&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">f&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;time over threshold&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;span style="color:#000">plt&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">xlabel&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#4e9a06">&amp;#39;Analysis threshold (m)&amp;#39;&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;span style="color:#000">plt&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">ylabel&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#4e9a06">&amp;#39;normalised event count (%)&amp;#39;&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;span style="color:#000">plt&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">plot&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">thresh_obs&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">threshold&lt;/span>&lt;span style="color:#000;font-weight:bold">[&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">22&lt;/span>&lt;span style="color:#000;font-weight:bold">],&lt;/span> &lt;span style="color:#000">normalised_event_count&lt;/span>&lt;span style="color:#000;font-weight:bold">[&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">22&lt;/span>&lt;span style="color:#000;font-weight:bold">],&lt;/span> &lt;span style="color:#4e9a06">&amp;#39;r+&amp;#39;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">markersize&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">20&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;pre>&lt;code>[&amp;lt;matplotlib.lines.Line2D at 0x7f7f56a97c40&amp;gt;]
&lt;/code>&lt;/pre>
&lt;p>&lt;img src="https://british-oceanographic-data-centre.github.io/COAsT/COAsT/tidegauge_validation_tutorial_files/tidegauge_validation_tutorial_63_1.png" alt="png">&lt;/p>
&lt;h2 id="other-tidegaugeanalysis-methods">Other TidegaugeAnalysis methods&lt;/h2>
&lt;h3 id="calculate-errors">Calculate errors&lt;/h3>
&lt;p>The difference() routine will calculate differences, absolute_differences and squared differenced for all variables. Corresponding new variables are created with names &lt;code>diff_*&lt;/code>, &lt;code>abs_diff_*&lt;/code> and &lt;code>square_diff_*&lt;/code>&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">&lt;span style="color:#000">ntr_diff&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000">tganalysis&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">difference&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">ntr_obs&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">dataset&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">ntr_mod&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">dataset&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;span style="color:#000">ssh_diff&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000">tganalysis&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">difference&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">obs_new&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">dataset&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">model_new&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">dataset&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;span style="color:#8f5902;font-style:italic"># Take a look&lt;/span>
&lt;span style="color:#000">ntr_diff&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">dataset&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;pre>&lt;code>Tidegauge object at 0x55b017f74fc0 initialised
Tidegauge object at 0x55b017f74fc0 initialised
&lt;/code>&lt;/pre>
&lt;div>&lt;svg style="position: absolute; width: 0; height: 0; overflow: hidden">
&lt;defs>
&lt;symbol id="icon-database" viewBox="0 0 32 32">
&lt;path d="M16 0c-8.837 0-16 2.239-16 5v4c0 2.761 7.163 5 16 5s16-2.239 16-5v-4c0-2.761-7.163-5-16-5z">&lt;/path>
&lt;path d="M16 17c-8.837 0-16-2.239-16-5v6c0 2.761 7.163 5 16 5s16-2.239 16-5v-6c0 2.761-7.163 5-16 5z">&lt;/path>
&lt;path d="M16 26c-8.837 0-16-2.239-16-5v6c0 2.761 7.163 5 16 5s16-2.239 16-5v-6c0 2.761-7.163 5-16 5z">&lt;/path>
&lt;/symbol>
&lt;symbol id="icon-file-text2" viewBox="0 0 32 32">
&lt;path d="M28.681 7.159c-0.694-0.947-1.662-2.053-2.724-3.116s-2.169-2.030-3.116-2.724c-1.612-1.182-2.393-1.319-2.841-1.319h-15.5c-1.378 0-2.5 1.121-2.5 2.5v27c0 1.378 1.122 2.5 2.5 2.5h23c1.378 0 2.5-1.122 2.5-2.5v-19.5c0-0.448-0.137-1.23-1.319-2.841zM24.543 5.457c0.959 0.959 1.712 1.825 2.268 2.543h-4.811v-4.811c0.718 0.556 1.584 1.309 2.543 2.268zM28 29.5c0 0.271-0.229 0.5-0.5 0.5h-23c-0.271 0-0.5-0.229-0.5-0.5v-27c0-0.271 0.229-0.5 0.5-0.5 0 0 15.499-0 15.5 0v7c0 0.552 0.448 1 1 1h7v19.5z">&lt;/path>
&lt;path d="M23 26h-14c-0.552 0-1-0.448-1-1s0.448-1 1-1h14c0.552 0 1 0.448 1 1s-0.448 1-1 1z">&lt;/path>
&lt;path d="M23 22h-14c-0.552 0-1-0.448-1-1s0.448-1 1-1h14c0.552 0 1 0.448 1 1s-0.448 1-1 1z">&lt;/path>
&lt;path d="M23 18h-14c-0.552 0-1-0.448-1-1s0.448-1 1-1h14c0.552 0 1 0.448 1 1s-0.448 1-1 1z">&lt;/path>
&lt;/symbol>
&lt;/defs>
&lt;/svg>
&lt;style>/* CSS stylesheet for displaying xarray objects in jupyterlab.
*
*/
&lt;p>:root {
&amp;ndash;xr-font-color0: var(&amp;ndash;jp-content-font-color0, rgba(0, 0, 0, 1));
&amp;ndash;xr-font-color2: var(&amp;ndash;jp-content-font-color2, rgba(0, 0, 0, 0.54));
&amp;ndash;xr-font-color3: var(&amp;ndash;jp-content-font-color3, rgba(0, 0, 0, 0.38));
&amp;ndash;xr-border-color: var(&amp;ndash;jp-border-color2, #e0e0e0);
&amp;ndash;xr-disabled-color: var(&amp;ndash;jp-layout-color3, #bdbdbd);
&amp;ndash;xr-background-color: var(&amp;ndash;jp-layout-color0, white);
&amp;ndash;xr-background-color-row-even: var(&amp;ndash;jp-layout-color1, white);
&amp;ndash;xr-background-color-row-odd: var(&amp;ndash;jp-layout-color2, #eeeeee);
}&lt;/p>
&lt;p>html[theme=dark],
body.vscode-dark {
&amp;ndash;xr-font-color0: rgba(255, 255, 255, 1);
&amp;ndash;xr-font-color2: rgba(255, 255, 255, 0.54);
&amp;ndash;xr-font-color3: rgba(255, 255, 255, 0.38);
&amp;ndash;xr-border-color: #1F1F1F;
&amp;ndash;xr-disabled-color: #515151;
&amp;ndash;xr-background-color: #111111;
&amp;ndash;xr-background-color-row-even: #111111;
&amp;ndash;xr-background-color-row-odd: #313131;
}&lt;/p>
&lt;p>.xr-wrap {
display: block !important;
min-width: 300px;
max-width: 700px;
}&lt;/p>
&lt;p>.xr-text-repr-fallback {
/* fallback to plain text repr when CSS is not injected (untrusted notebook) */
display: none;
}&lt;/p>
&lt;p>.xr-header {
padding-top: 6px;
padding-bottom: 6px;
margin-bottom: 4px;
border-bottom: solid 1px var(&amp;ndash;xr-border-color);
}&lt;/p>
&lt;p>.xr-header &amp;gt; div,
.xr-header &amp;gt; ul {
display: inline;
margin-top: 0;
margin-bottom: 0;
}&lt;/p>
&lt;p>.xr-obj-type,
.xr-array-name {
margin-left: 2px;
margin-right: 10px;
}&lt;/p>
&lt;p>.xr-obj-type {
color: var(&amp;ndash;xr-font-color2);
}&lt;/p>
&lt;p>.xr-sections {
padding-left: 0 !important;
display: grid;
grid-template-columns: 150px auto auto 1fr 20px 20px;
}&lt;/p>
&lt;p>.xr-section-item {
display: contents;
}&lt;/p>
&lt;p>.xr-section-item input {
display: none;
}&lt;/p>
&lt;p>.xr-section-item input + label {
color: var(&amp;ndash;xr-disabled-color);
}&lt;/p>
&lt;p>.xr-section-item input:enabled + label {
cursor: pointer;
color: var(&amp;ndash;xr-font-color2);
}&lt;/p>
&lt;p>.xr-section-item input:enabled + label:hover {
color: var(&amp;ndash;xr-font-color0);
}&lt;/p>
&lt;p>.xr-section-summary {
grid-column: 1;
color: var(&amp;ndash;xr-font-color2);
font-weight: 500;
}&lt;/p>
&lt;p>.xr-section-summary &amp;gt; span {
display: inline-block;
padding-left: 0.5em;
}&lt;/p>
&lt;p>.xr-section-summary-in:disabled + label {
color: var(&amp;ndash;xr-font-color2);
}&lt;/p>
&lt;p>.xr-section-summary-in + label:before {
display: inline-block;
content: &amp;lsquo;â–º&amp;rsquo;;
font-size: 11px;
width: 15px;
text-align: center;
}&lt;/p>
&lt;p>.xr-section-summary-in:disabled + label:before {
color: var(&amp;ndash;xr-disabled-color);
}&lt;/p>
&lt;p>.xr-section-summary-in:checked + label:before {
content: &amp;lsquo;â–¼&amp;rsquo;;
}&lt;/p>
&lt;p>.xr-section-summary-in:checked + label &amp;gt; span {
display: none;
}&lt;/p>
&lt;p>.xr-section-summary,
.xr-section-inline-details {
padding-top: 4px;
padding-bottom: 4px;
}&lt;/p>
&lt;p>.xr-section-inline-details {
grid-column: 2 / -1;
}&lt;/p>
&lt;p>.xr-section-details {
display: none;
grid-column: 1 / -1;
margin-bottom: 5px;
}&lt;/p>
&lt;p>.xr-section-summary-in:checked ~ .xr-section-details {
display: contents;
}&lt;/p>
&lt;p>.xr-array-wrap {
grid-column: 1 / -1;
display: grid;
grid-template-columns: 20px auto;
}&lt;/p>
&lt;p>.xr-array-wrap &amp;gt; label {
grid-column: 1;
vertical-align: top;
}&lt;/p>
&lt;p>.xr-preview {
color: var(&amp;ndash;xr-font-color3);
}&lt;/p>
&lt;p>.xr-array-preview,
.xr-array-data {
padding: 0 5px !important;
grid-column: 2;
}&lt;/p>
&lt;p>.xr-array-data,
.xr-array-in:checked ~ .xr-array-preview {
display: none;
}&lt;/p>
&lt;p>.xr-array-in:checked ~ .xr-array-data,
.xr-array-preview {
display: inline-block;
}&lt;/p>
&lt;p>.xr-dim-list {
display: inline-block !important;
list-style: none;
padding: 0 !important;
margin: 0;
}&lt;/p>
&lt;p>.xr-dim-list li {
display: inline-block;
padding: 0;
margin: 0;
}&lt;/p>
&lt;p>.xr-dim-list:before {
content: &amp;lsquo;(';
}&lt;/p>
&lt;p>.xr-dim-list:after {
content: &amp;lsquo;)';
}&lt;/p>
&lt;p>.xr-dim-list li:not(:last-child):after {
content: &amp;lsquo;,';
padding-right: 5px;
}&lt;/p>
&lt;p>.xr-has-index {
font-weight: bold;
}&lt;/p>
&lt;p>.xr-var-list,
.xr-var-item {
display: contents;
}&lt;/p>
&lt;p>.xr-var-item &amp;gt; div,
.xr-var-item label,
.xr-var-item &amp;gt; .xr-var-name span {
background-color: var(&amp;ndash;xr-background-color-row-even);
margin-bottom: 0;
}&lt;/p>
&lt;p>.xr-var-item &amp;gt; .xr-var-name:hover span {
padding-right: 5px;
}&lt;/p>
&lt;p>.xr-var-list &amp;gt; li:nth-child(odd) &amp;gt; div,
.xr-var-list &amp;gt; li:nth-child(odd) &amp;gt; label,
.xr-var-list &amp;gt; li:nth-child(odd) &amp;gt; .xr-var-name span {
background-color: var(&amp;ndash;xr-background-color-row-odd);
}&lt;/p>
&lt;p>.xr-var-name {
grid-column: 1;
}&lt;/p>
&lt;p>.xr-var-dims {
grid-column: 2;
}&lt;/p>
&lt;p>.xr-var-dtype {
grid-column: 3;
text-align: right;
color: var(&amp;ndash;xr-font-color2);
}&lt;/p>
&lt;p>.xr-var-preview {
grid-column: 4;
}&lt;/p>
&lt;p>.xr-var-name,
.xr-var-dims,
.xr-var-dtype,
.xr-preview,
.xr-attrs dt {
white-space: nowrap;
overflow: hidden;
text-overflow: ellipsis;
padding-right: 10px;
}&lt;/p>
&lt;p>.xr-var-name:hover,
.xr-var-dims:hover,
.xr-var-dtype:hover,
.xr-attrs dt:hover {
overflow: visible;
width: auto;
z-index: 1;
}&lt;/p>
&lt;p>.xr-var-attrs,
.xr-var-data {
display: none;
background-color: var(&amp;ndash;xr-background-color) !important;
padding-bottom: 5px !important;
}&lt;/p>
&lt;p>.xr-var-attrs-in:checked ~ .xr-var-attrs,
.xr-var-data-in:checked ~ .xr-var-data {
display: block;
}&lt;/p>
&lt;p>.xr-var-data &amp;gt; table {
float: right;
}&lt;/p>
&lt;p>.xr-var-name span,
.xr-var-data,
.xr-attrs {
padding-left: 25px !important;
}&lt;/p>
&lt;p>.xr-attrs,
.xr-var-attrs,
.xr-var-data {
grid-column: 1 / -1;
}&lt;/p>
&lt;p>dl.xr-attrs {
padding: 0;
margin: 0;
display: grid;
grid-template-columns: 125px auto;
}&lt;/p>
&lt;p>.xr-attrs dt,
.xr-attrs dd {
padding: 0;
margin: 0;
float: left;
padding-right: 10px;
width: auto;
}&lt;/p>
&lt;p>.xr-attrs dt {
font-weight: normal;
grid-column: 1;
}&lt;/p>
&lt;p>.xr-attrs dt:hover span {
display: inline-block;
background: var(&amp;ndash;xr-background-color);
padding-right: 10px;
}&lt;/p>
&lt;p>.xr-attrs dd {
grid-column: 2;
white-space: pre-wrap;
word-break: break-all;
}&lt;/p>
&lt;p>.xr-icon-database,
.xr-icon-file-text2 {
display: inline-block;
vertical-align: middle;
width: 1em;
height: 1.5em !important;
stroke-width: 0;
stroke: currentColor;
fill: currentColor;
}
&lt;/style>&lt;pre class='xr-text-repr-fallback'>&amp;lt;xarray.Dataset&amp;gt;
Dimensions: (t_dim: 720, id_dim: 61)
Coordinates:
time (t_dim) datetime64[ns] 2007-01-01 &amp;hellip; 2007-01-30T23:00:00
site_name (id_dim) object 'Harwich' 'Mumbles' &amp;hellip; 'N/A' 'N/A'
longitude (id_dim) float64 1.292 -3.975 -5.158 &amp;hellip; 7.567 350.8 8.717
latitude (id_dim) float64 51.95 51.57 57.9 &amp;hellip; 58.0 51.53 53.87
Dimensions without coordinates: t_dim, id_dim
Data variables:
diff_ntr (id_dim, t_dim) float64 nan nan nan &amp;hellip; -0.07105 0.03123
abs_diff_ntr (id_dim, t_dim) float64 nan nan nan &amp;hellip; 0.07105 0.03123
square_diff_ntr (id_dim, t_dim) float64 nan nan nan &amp;hellip; 0.005049 0.0009752&lt;/pre>&lt;div class='xr-wrap' style='display:none'>&lt;div class='xr-header'>&lt;div class='xr-obj-type'>xarray.Dataset&lt;/div>&lt;/div>&lt;ul class='xr-sections'>&lt;li class='xr-section-item'>&lt;input id='section-6c449353-357b-48a6-94af-02b2461b758a' class='xr-section-summary-in' type='checkbox' disabled >&lt;label for='section-6c449353-357b-48a6-94af-02b2461b758a' class='xr-section-summary' title='Expand/collapse section'>Dimensions:&lt;/label>&lt;div class='xr-section-inline-details'>&lt;ul class='xr-dim-list'>&lt;li>&lt;span>t_dim&lt;/span>: 720&lt;/li>&lt;li>&lt;span>id_dim&lt;/span>: 61&lt;/li>&lt;/ul>&lt;/div>&lt;div class='xr-section-details'>&lt;/div>&lt;/li>&lt;li class='xr-section-item'>&lt;input id='section-d2ca5e25-32f8-4650-b84b-f1955415a076' class='xr-section-summary-in' type='checkbox' checked>&lt;label for='section-d2ca5e25-32f8-4650-b84b-f1955415a076' class='xr-section-summary' >Coordinates: &lt;span>(4)&lt;/span>&lt;/label>&lt;div class='xr-section-inline-details'>&lt;/div>&lt;div class='xr-section-details'>&lt;ul class='xr-var-list'>&lt;li class='xr-var-item'>&lt;div class='xr-var-name'>&lt;span>time&lt;/span>&lt;/div>&lt;div class='xr-var-dims'>(t_dim)&lt;/div>&lt;div class='xr-var-dtype'>datetime64[ns]&lt;/div>&lt;div class='xr-var-preview xr-preview'>2007-01-01 &amp;hellip; 2007-01-30T23:00:00&lt;/div>&lt;input id='attrs-a0092f46-f5e0-42f7-8248-52c805d27053' class='xr-var-attrs-in' type='checkbox' disabled>&lt;label for='attrs-a0092f46-f5e0-42f7-8248-52c805d27053' title='Show/Hide attributes'>&lt;svg class='icon xr-icon-file-text2'>&lt;use xlink:href='#icon-file-text2'>&lt;/use>&lt;/svg>&lt;/label>&lt;input id='data-9e5ecfb8-82b5-41b6-ad5a-b87b93e39e5c' class='xr-var-data-in' type='checkbox'>&lt;label for='data-9e5ecfb8-82b5-41b6-ad5a-b87b93e39e5c' title='Show/Hide data repr'>&lt;svg class='icon xr-icon-database'>&lt;use xlink:href='#icon-database'>&lt;/use>&lt;/svg>&lt;/label>&lt;div class='xr-var-attrs'>&lt;dl class='xr-attrs'>&lt;/dl>&lt;/div>&lt;div class='xr-var-data'>&lt;pre>array(['2007-01-01T00:00:00.000000000', '2007-01-01T01:00:00.000000000',
'2007-01-01T02:00:00.000000000', '2007-01-01T03:00:00.000000000',
'2007-01-01T04:00:00.000000000', '2007-01-01T05:00:00.000000000',
'2007-01-01T06:00:00.000000000', '2007-01-01T07:00:00.000000000',
'2007-01-01T08:00:00.000000000', '2007-01-01T09:00:00.000000000',
'2007-01-01T10:00:00.000000000', '2007-01-01T11:00:00.000000000',
'2007-01-01T12:00:00.000000000', '2007-01-01T13:00:00.000000000',
'2007-01-01T14:00:00.000000000', '2007-01-01T15:00:00.000000000',
'2007-01-01T16:00:00.000000000', '2007-01-01T17:00:00.000000000',
'2007-01-01T18:00:00.000000000', '2007-01-01T19:00:00.000000000',
'2007-01-01T20:00:00.000000000', '2007-01-01T21:00:00.000000000',
'2007-01-01T22:00:00.000000000', '2007-01-01T23:00:00.000000000',
'2007-01-02T00:00:00.000000000', '2007-01-02T01:00:00.000000000',
'2007-01-02T02:00:00.000000000', '2007-01-02T03:00:00.000000000',
'2007-01-02T04:00:00.000000000', '2007-01-02T05:00:00.000000000',
'2007-01-02T06:00:00.000000000', '2007-01-02T07:00:00.000000000',
'2007-01-02T08:00:00.000000000', '2007-01-02T09:00:00.000000000',
'2007-01-02T10:00:00.000000000', '2007-01-02T11:00:00.000000000',
'2007-01-02T12:00:00.000000000', '2007-01-02T13:00:00.000000000',
'2007-01-02T14:00:00.000000000', '2007-01-02T15:00:00.000000000',
&amp;hellip;
'2007-01-29T10:00:00.000000000', '2007-01-29T11:00:00.000000000',
'2007-01-29T12:00:00.000000000', '2007-01-29T13:00:00.000000000',
'2007-01-29T14:00:00.000000000', '2007-01-29T15:00:00.000000000',
'2007-01-29T16:00:00.000000000', '2007-01-29T17:00:00.000000000',
'2007-01-29T18:00:00.000000000', '2007-01-29T19:00:00.000000000',
'2007-01-29T20:00:00.000000000', '2007-01-29T21:00:00.000000000',
'2007-01-29T22:00:00.000000000', '2007-01-29T23:00:00.000000000',
'2007-01-30T00:00:00.000000000', '2007-01-30T01:00:00.000000000',
'2007-01-30T02:00:00.000000000', '2007-01-30T03:00:00.000000000',
'2007-01-30T04:00:00.000000000', '2007-01-30T05:00:00.000000000',
'2007-01-30T06:00:00.000000000', '2007-01-30T07:00:00.000000000',
'2007-01-30T08:00:00.000000000', '2007-01-30T09:00:00.000000000',
'2007-01-30T10:00:00.000000000', '2007-01-30T11:00:00.000000000',
'2007-01-30T12:00:00.000000000', '2007-01-30T13:00:00.000000000',
'2007-01-30T14:00:00.000000000', '2007-01-30T15:00:00.000000000',
'2007-01-30T16:00:00.000000000', '2007-01-30T17:00:00.000000000',
'2007-01-30T18:00:00.000000000', '2007-01-30T19:00:00.000000000',
'2007-01-30T20:00:00.000000000', '2007-01-30T21:00:00.000000000',
'2007-01-30T22:00:00.000000000', '2007-01-30T23:00:00.000000000'],
dtype='datetime64[ns]')&lt;/pre>&lt;/div>&lt;/li>&lt;li class='xr-var-item'>&lt;div class='xr-var-name'>&lt;span>site_name&lt;/span>&lt;/div>&lt;div class='xr-var-dims'>(id_dim)&lt;/div>&lt;div class='xr-var-dtype'>object&lt;/div>&lt;div class='xr-var-preview xr-preview'>'Harwich' 'Mumbles' &amp;hellip; 'N/A' 'N/A'&lt;/div>&lt;input id='attrs-11ddd461-94b7-4470-86bf-547d5bca7947' class='xr-var-attrs-in' type='checkbox' disabled>&lt;label for='attrs-11ddd461-94b7-4470-86bf-547d5bca7947' title='Show/Hide attributes'>&lt;svg class='icon xr-icon-file-text2'>&lt;use xlink:href='#icon-file-text2'>&lt;/use>&lt;/svg>&lt;/label>&lt;input id='data-8833ce95-b586-4f74-9e7b-01944f60a954' class='xr-var-data-in' type='checkbox'>&lt;label for='data-8833ce95-b586-4f74-9e7b-01944f60a954' title='Show/Hide data repr'>&lt;svg class='icon xr-icon-database'>&lt;use xlink:href='#icon-database'>&lt;/use>&lt;/svg>&lt;/label>&lt;div class='xr-var-attrs'>&lt;dl class='xr-attrs'>&lt;/dl>&lt;/div>&lt;div class='xr-var-data'>&lt;pre>array(['Harwich', 'Mumbles', 'Ullapool', 'Milford Haven', 'Heysham',
'Hinkley Point', 'Kinlochbervie', 'Wick', 'North Shields',
'Felixstowe', 'Holyhead', 'Cromer', 'Tobermory', 'Weymouth',
'Llandudno', 'Devonport', 'Sheerness', 'Whitby', 'Newlyn',
'Portpatrick', 'North Shields', 'Aberdeen', 'Lerwick', 'Newport',
'Bournemouth', &amp;quot;St. Mary's&amp;quot;, 'Liverpool, Gladstone Dock',
'Port Ellen (Islay)', 'Immingham', 'Newhaven', 'Moray Firth',
'Dover', 'Avonmouth', 'St. Helier (Jersey)', 'North Shields',
'Workington', 'North Shields', 'Portbury', 'Leith', 'Lowestoft',
'Fishguard', 'Bangor', 'Hinkley Point', 'Portsmouth', 'Stornoway',
'Millport', 'Port Erin', 'Portrush', 'Portbury', 'North Shields',
'Barmouth', 'Ilfracombe', 'North Shields', 'N/A', 'N/A', 'N/A',
'N/A', 'N/A', 'N/A', 'N/A', 'N/A'], dtype=object)&lt;/pre>&lt;/div>&lt;/li>&lt;li class='xr-var-item'>&lt;div class='xr-var-name'>&lt;span>longitude&lt;/span>&lt;/div>&lt;div class='xr-var-dims'>(id_dim)&lt;/div>&lt;div class='xr-var-dtype'>float64&lt;/div>&lt;div class='xr-var-preview xr-preview'>1.292 -3.975 -5.158 &amp;hellip; 350.8 8.717&lt;/div>&lt;input id='attrs-926dbbd1-f9e6-43d0-b63d-232bff841fc9' class='xr-var-attrs-in' type='checkbox' disabled>&lt;label for='attrs-926dbbd1-f9e6-43d0-b63d-232bff841fc9' title='Show/Hide attributes'>&lt;svg class='icon xr-icon-file-text2'>&lt;use xlink:href='#icon-file-text2'>&lt;/use>&lt;/svg>&lt;/label>&lt;input id='data-70e355cd-9c7e-4f65-9399-afe44a216d7d' class='xr-var-data-in' type='checkbox'>&lt;label for='data-70e355cd-9c7e-4f65-9399-afe44a216d7d' title='Show/Hide data repr'>&lt;svg class='icon xr-icon-database'>&lt;use xlink:href='#icon-database'>&lt;/use>&lt;/svg>&lt;/label>&lt;div class='xr-var-attrs'>&lt;dl class='xr-attrs'>&lt;/dl>&lt;/div>&lt;div class='xr-var-data'>&lt;pre>array([ 1.29210000e+00, -3.97544000e+00, -5.15789000e+00, -5.05148000e+00,
-2.92042000e+00, -3.13433000e+00, -5.05036000e+00, -3.08631000e+00,
-1.43978000e+00, 1.34839000e+00, -4.62044000e+00, 1.30164000e+00,
-6.06422000e+00, -2.44794000e+00, -3.82522000e+00, -4.18525000e+00,
7.43440000e-01, -6.14170000e-01, -5.54283000e+00, -5.12003000e+00,
-1.43978000e+00, -2.08013000e+00, -1.14031000e+00, -2.98744000e+00,
-1.87486000e+00, -6.31642000e+00, -3.01800000e+00, -6.19006000e+00,
-1.86030000e-01, 5.70300000e-02, -4.00220000e+00, 1.32267000e+00,
-2.71497000e+00, -2.11667000e+00, -1.43978000e+00, -3.56764000e+00,
-1.43978000e+00, -2.72848000e+00, -3.18169000e+00, 1.75083000e+00,
-4.98333000e+00, -5.66947000e+00, -3.13433000e+00, -1.11175000e+00,
-6.38889000e+00, -4.90583000e+00, -4.76806000e+00, -6.65683000e+00,
-2.72848000e+00, -1.43978000e+00, -4.04517000e+00, -4.11094000e+00,
-1.43978000e+00, 1.12150002e+01, 1.18000002e+01, 5.11700010e+00,
1.12500000e+01, 3.52666992e+02, 7.56699991e+00, 3.50816986e+02,
8.71700001e+00])&lt;/pre>&lt;/div>&lt;/li>&lt;li class='xr-var-item'>&lt;div class='xr-var-name'>&lt;span>latitude&lt;/span>&lt;/div>&lt;div class='xr-var-dims'>(id_dim)&lt;/div>&lt;div class='xr-var-dtype'>float64&lt;/div>&lt;div class='xr-var-preview xr-preview'>51.95 51.57 57.9 &amp;hellip; 51.53 53.87&lt;/div>&lt;input id='attrs-d04f01cb-14ea-48d1-8664-63fde41b8c6a' class='xr-var-attrs-in' type='checkbox' disabled>&lt;label for='attrs-d04f01cb-14ea-48d1-8664-63fde41b8c6a' title='Show/Hide attributes'>&lt;svg class='icon xr-icon-file-text2'>&lt;use xlink:href='#icon-file-text2'>&lt;/use>&lt;/svg>&lt;/label>&lt;input id='data-ef81cae3-512a-4740-8baa-9b965ee22885' class='xr-var-data-in' type='checkbox'>&lt;label for='data-ef81cae3-512a-4740-8baa-9b965ee22885' title='Show/Hide data repr'>&lt;svg class='icon xr-icon-database'>&lt;use xlink:href='#icon-database'>&lt;/use>&lt;/svg>&lt;/label>&lt;div class='xr-var-attrs'>&lt;dl class='xr-attrs'>&lt;/dl>&lt;/div>&lt;div class='xr-var-data'>&lt;pre>array([51.94798 , 51.57 , 57.89525 , 51.7064 , 54.03167 ,
51.21525 , 58.45661 , 58.44097 , 55.00744 , 51.95675 ,
53.31394 , 52.93436 , 56.62311 , 50.6085 , 53.33167 ,
50.36839 , 51.44564 , 54.49008 , 50.103 , 54.84256 ,
55.00744 , 57.14406 , 60.15403 , 51.55 , 50.71433 ,
49.91847 , 53.44969 , 55.62742 , 53.63103 , 50.78178 ,
57.5987 , 51.11439 , 51.51089 , 49.18333 , 55.00744 ,
54.65081 , 55.00744 , 51.50002 , 55.98983 , 52.473 ,
52.01378 , 54.66475 , 51.21525 , 50.80256 , 58.20711 ,
55.74964 , 54.08539 , 55.20678 , 51.50002 , 55.00744 ,
52.71906 , 51.21097 , 55.00744 , 58.34999847, 57.68299866,
61.93299866, 64.86699677, 55.36700058, 58. , 51.53300095,
53.86700058])&lt;/pre>&lt;/div>&lt;/li>&lt;/ul>&lt;/div>&lt;/li>&lt;li class='xr-section-item'>&lt;input id='section-50d2ce45-a14e-435f-b66c-ff3200167a65' class='xr-section-summary-in' type='checkbox' checked>&lt;label for='section-50d2ce45-a14e-435f-b66c-ff3200167a65' class='xr-section-summary' >Data variables: &lt;span>(3)&lt;/span>&lt;/label>&lt;div class='xr-section-inline-details'>&lt;/div>&lt;div class='xr-section-details'>&lt;ul class='xr-var-list'>&lt;li class='xr-var-item'>&lt;div class='xr-var-name'>&lt;span>diff_ntr&lt;/span>&lt;/div>&lt;div class='xr-var-dims'>(id_dim, t_dim)&lt;/div>&lt;div class='xr-var-dtype'>float64&lt;/div>&lt;div class='xr-var-preview xr-preview'>nan nan nan &amp;hellip; -0.07105 0.03123&lt;/div>&lt;input id='attrs-2f196afa-96b7-48ba-bd3a-82d05aaa58fd' class='xr-var-attrs-in' type='checkbox' disabled>&lt;label for='attrs-2f196afa-96b7-48ba-bd3a-82d05aaa58fd' title='Show/Hide attributes'>&lt;svg class='icon xr-icon-file-text2'>&lt;use xlink:href='#icon-file-text2'>&lt;/use>&lt;/svg>&lt;/label>&lt;input id='data-b18e9ca9-a1ab-419d-a5ba-74ff69ec252f' class='xr-var-data-in' type='checkbox'>&lt;label for='data-b18e9ca9-a1ab-419d-a5ba-74ff69ec252f' title='Show/Hide data repr'>&lt;svg class='icon xr-icon-database'>&lt;use xlink:href='#icon-database'>&lt;/use>&lt;/svg>&lt;/label>&lt;div class='xr-var-attrs'>&lt;dl class='xr-attrs'>&lt;/dl>&lt;/div>&lt;div class='xr-var-data'>&lt;pre>array([[ nan, nan, nan, &amp;hellip;, -0.27055282,
-0.24161073, -0.19948584],
[ nan, nan, nan, &amp;hellip;, nan,
nan, nan],
[ nan, nan, nan, &amp;hellip;, 0.26775999,
0.29183498, 0.31725988],
&amp;hellip;,
[ nan, nan, nan, &amp;hellip;, -0.13722572,
-0.15640233, -0.18539439],
[ nan, nan, nan, &amp;hellip;, 0.05165766,
0.07687488, 0.10824192],
[ nan, nan, nan, &amp;hellip;, -0.15185874,
-0.07105414, 0.03122864]])&lt;/pre>&lt;/div>&lt;/li>&lt;li class='xr-var-item'>&lt;div class='xr-var-name'>&lt;span>abs_diff_ntr&lt;/span>&lt;/div>&lt;div class='xr-var-dims'>(id_dim, t_dim)&lt;/div>&lt;div class='xr-var-dtype'>float64&lt;/div>&lt;div class='xr-var-preview xr-preview'>nan nan nan &amp;hellip; 0.07105 0.03123&lt;/div>&lt;input id='attrs-1faf83b7-a4df-4b05-ba94-f734fdab38f1' class='xr-var-attrs-in' type='checkbox' disabled>&lt;label for='attrs-1faf83b7-a4df-4b05-ba94-f734fdab38f1' title='Show/Hide attributes'>&lt;svg class='icon xr-icon-file-text2'>&lt;use xlink:href='#icon-file-text2'>&lt;/use>&lt;/svg>&lt;/label>&lt;input id='data-34e46e85-d788-4417-97d2-e74cd6724a7e' class='xr-var-data-in' type='checkbox'>&lt;label for='data-34e46e85-d788-4417-97d2-e74cd6724a7e' title='Show/Hide data repr'>&lt;svg class='icon xr-icon-database'>&lt;use xlink:href='#icon-database'>&lt;/use>&lt;/svg>&lt;/label>&lt;div class='xr-var-attrs'>&lt;dl class='xr-attrs'>&lt;/dl>&lt;/div>&lt;div class='xr-var-data'>&lt;pre>array([[ nan, nan, nan, &amp;hellip;, 0.27055282, 0.24161073,
0.19948584],
[ nan, nan, nan, &amp;hellip;, nan, nan,
nan],
[ nan, nan, nan, &amp;hellip;, 0.26775999, 0.29183498,
0.31725988],
&amp;hellip;,
[ nan, nan, nan, &amp;hellip;, 0.13722572, 0.15640233,
0.18539439],
[ nan, nan, nan, &amp;hellip;, 0.05165766, 0.07687488,
0.10824192],
[ nan, nan, nan, &amp;hellip;, 0.15185874, 0.07105414,
0.03122864]])&lt;/pre>&lt;/div>&lt;/li>&lt;li class='xr-var-item'>&lt;div class='xr-var-name'>&lt;span>square_diff_ntr&lt;/span>&lt;/div>&lt;div class='xr-var-dims'>(id_dim, t_dim)&lt;/div>&lt;div class='xr-var-dtype'>float64&lt;/div>&lt;div class='xr-var-preview xr-preview'>nan nan nan &amp;hellip; 0.005049 0.0009752&lt;/div>&lt;input id='attrs-91120bcc-f4c7-4582-b9b1-c32a3520cae7' class='xr-var-attrs-in' type='checkbox' disabled>&lt;label for='attrs-91120bcc-f4c7-4582-b9b1-c32a3520cae7' title='Show/Hide attributes'>&lt;svg class='icon xr-icon-file-text2'>&lt;use xlink:href='#icon-file-text2'>&lt;/use>&lt;/svg>&lt;/label>&lt;input id='data-65a8b825-c111-4642-90ef-180d23b18f6c' class='xr-var-data-in' type='checkbox'>&lt;label for='data-65a8b825-c111-4642-90ef-180d23b18f6c' title='Show/Hide data repr'>&lt;svg class='icon xr-icon-database'>&lt;use xlink:href='#icon-database'>&lt;/use>&lt;/svg>&lt;/label>&lt;div class='xr-var-attrs'>&lt;dl class='xr-attrs'>&lt;/dl>&lt;/div>&lt;div class='xr-var-data'>&lt;pre>array([[ nan, nan, nan, &amp;hellip;, 0.07319883, 0.05837574,
0.0397946 ],
[ nan, nan, nan, &amp;hellip;, nan, nan,
nan],
[ nan, nan, nan, &amp;hellip;, 0.07169541, 0.08516766,
0.10065383],
&amp;hellip;,
[ nan, nan, nan, &amp;hellip;, 0.0188309 , 0.02446169,
0.03437108],
[ nan, nan, nan, &amp;hellip;, 0.00266851, 0.00590975,
0.01171631],
[ nan, nan, nan, &amp;hellip;, 0.02306108, 0.00504869,
0.00097523]])&lt;/pre>&lt;/div>&lt;/li>&lt;/ul>&lt;/div>&lt;/li>&lt;li class='xr-section-item'>&lt;input id='section-640679e3-653d-472a-9a32-f5466d002c65' class='xr-section-summary-in' type='checkbox' disabled >&lt;label for='section-640679e3-653d-472a-9a32-f5466d002c65' class='xr-section-summary' title='Expand/collapse section'>Attributes: &lt;span>(0)&lt;/span>&lt;/label>&lt;div class='xr-section-inline-details'>&lt;/div>&lt;div class='xr-section-details'>&lt;dl class='xr-attrs'>&lt;/dl>&lt;/div>&lt;/li>&lt;/ul>&lt;/div>&lt;/div>&lt;/p>
&lt;p>We can then easily get mean errors, MAE and MSE&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">&lt;span style="color:#000">mean_stats&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000">ntr_diff&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">dataset&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">mean&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">dim&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;t_dim&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">skipna&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#3465a4">True&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">
&lt;/code>&lt;/pre>&lt;/div></description></item><item><title>Docs: Tidetable tutorial</title><link>https://british-oceanographic-data-centre.github.io/COAsT/docs/examples/notebooks/tidegauge/tidetable_tutorial/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://british-oceanographic-data-centre.github.io/COAsT/docs/examples/notebooks/tidegauge/tidetable_tutorial/</guid><description>
&lt;h3 id="tutorial-for-processing-tabulated-tide-gauge-data">Tutorial for processing tabulated tide gauge data.&lt;/h3>
&lt;p>Tidal highs and lows can be scraped from a website such as:&lt;br>
&lt;a href="https://www.ntslf.org/tides/tidepred?port=Liverpool">https://www.ntslf.org/tides/tidepred?port=Liverpool&lt;/a>&lt;br>
&lt;img src="https://www.ntslf.org/files/ntslf_php/plottide.php?port=Liverpool" alt="NTSLF tidal predictions">&lt;/p>
&lt;p>and format them into a csv file:&lt;br>&lt;/p>
&lt;p>LIVERPOOL (GLADSTONE DOCK) TZ: UT(GMT)/BST Units: METRES Datum: Chart Datum&lt;br>
01/10/2020 06:29 1.65&lt;br>
01/10/2020 11:54 9.01&lt;br>
01/10/2020 18:36 1.87&lt;br>&lt;/p>
&lt;p>The data can be used in the following demonstration.&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">&lt;span style="color:#204a87;font-weight:bold">import&lt;/span> &lt;span style="color:#000">coast&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">import&lt;/span> &lt;span style="color:#000">numpy&lt;/span> &lt;span style="color:#204a87;font-weight:bold">as&lt;/span> &lt;span style="color:#000">np&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Load and plot High and Low Water data.&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">&lt;span style="color:#204a87;font-weight:bold">print&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;load and plot HLW data&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;span style="color:#000">filnam&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;./example_files/Gladstone_2020-10_HLW.txt&amp;#34;&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;pre>&lt;code>load and plot HLW data
&lt;/code>&lt;/pre>
&lt;p>Set the start and end dates.&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">&lt;span style="color:#000">date_start&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000">np&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">datetime64&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;2020-10-12 23:59&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;span style="color:#000">date_end&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000">np&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">datetime64&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;2020-10-14 00:01&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Initiate a TideGauge object, if a filename is passed it assumes it is a GESLA type object.&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">&lt;span style="color:#000">tg&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000">coast&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">Tidegauge&lt;/span>&lt;span style="color:#000;font-weight:bold">()&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;pre>&lt;code>Tidegauge object at 0x562ea4546fc0 initialised
&lt;/code>&lt;/pre>
&lt;p>Specify the data read as a High Low Water dataset.&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">&lt;span style="color:#000">tg&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">read_hlw&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">filnam&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">date_start&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">date_end&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Show dataset. If timezone is specified then it is presented as requested, otherwise uses UTC.&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">&lt;span style="color:#204a87;font-weight:bold">print&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;Try the TideGauge.show() method:&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;span style="color:#000">tg&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">show&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">timezone&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;Europe/London&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;pre>&lt;code>Try the TideGauge.show() method:
&lt;/code>&lt;/pre>
&lt;p>Do a basic plot of these points.&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">&lt;span style="color:#000">tg&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">dataset&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">plot&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">scatter&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">x&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;time&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">y&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;ssh&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;pre>&lt;code>&amp;lt;matplotlib.collections.PathCollection at 0x7f13b809efa0&amp;gt;
&lt;/code>&lt;/pre>
&lt;p>&lt;img src="https://british-oceanographic-data-centre.github.io/COAsT/COAsT/tidetable_tutorial_files/tidetable_tutorial_14_1.png" alt="png">&lt;/p>
&lt;p>There is a method to locate HLW events around an approximate date and time.
First state the time of interest.&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">&lt;span style="color:#000">time_guess&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000">np&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">datetime64&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;2020-10-13 12:48&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Then recover all the HLW events in a +/- window, of specified size (iteger hrs).
The default winsize = 2 (hrs).&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">&lt;span style="color:#000">HLW&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000">tg&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">get_tide_table_times&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">np&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">datetime64&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;2020-10-13 12:48&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">),&lt;/span> &lt;span style="color:#000">method&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;window&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">winsize&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">24&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Alternatively recover the closest HLW event to the input timestamp.&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">&lt;span style="color:#000">HLW&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000">tg&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">get_tide_table_times&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">np&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">datetime64&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;2020-10-13 12:48&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">),&lt;/span> &lt;span style="color:#000">method&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;nearest_1&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Or the nearest two events to the input timestamp.&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">&lt;span style="color:#000">HLW&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000">tg&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">get_tide_table_times&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">np&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">datetime64&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;2020-10-13 12:48&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">),&lt;/span> &lt;span style="color:#000">method&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;nearest_2&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Extract the Low Tide value.&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">&lt;span style="color:#204a87;font-weight:bold">print&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;Try the TideGauge.get_tidetabletimes() methods:&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">print&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;LT:&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">HLW&lt;/span>&lt;span style="color:#000;font-weight:bold">[&lt;/span>&lt;span style="color:#000">np&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">argmin&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">HLW&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">data&lt;/span>&lt;span style="color:#000;font-weight:bold">)]&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">values&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;m at&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">HLW&lt;/span>&lt;span style="color:#000;font-weight:bold">[&lt;/span>&lt;span style="color:#000">np&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">argmin&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">HLW&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">data&lt;/span>&lt;span style="color:#000;font-weight:bold">)]&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">time&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">values&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;pre>&lt;code>Try the TideGauge.get_tidetabletimes() methods:
LT: 2.83 m at 2020-10-13T14:36:00.000000000
&lt;/code>&lt;/pre>
&lt;p>Extract the High Tide value.&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">&lt;span style="color:#204a87;font-weight:bold">print&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;HT:&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">HLW&lt;/span>&lt;span style="color:#000;font-weight:bold">[&lt;/span>&lt;span style="color:#000">np&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">argmax&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">HLW&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">data&lt;/span>&lt;span style="color:#000;font-weight:bold">)]&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">values&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;m at&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">HLW&lt;/span>&lt;span style="color:#000;font-weight:bold">[&lt;/span>&lt;span style="color:#000">np&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">argmax&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">HLW&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">data&lt;/span>&lt;span style="color:#000;font-weight:bold">)]&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">time&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">values&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;pre>&lt;code>HT: 8.01 m at 2020-10-13T07:59:00.000000000
&lt;/code>&lt;/pre>
&lt;p>Or use the the nearest High Tide method to get High Tide.&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">&lt;span style="color:#000">HT&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000">tg&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">get_tide_table_times&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">np&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">datetime64&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;2020-10-13 12:48&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">),&lt;/span> &lt;span style="color:#000">method&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;nearest_HW&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">print&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;HT:&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">HT&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">values&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;m at&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">HT&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">time&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">values&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;pre>&lt;code>HT: [8.01] m at 2020-10-13T07:59:00.000000000
&lt;/code>&lt;/pre>
&lt;p>The get_tidetabletimes() method can take extra paremeters such as a window size, an integer number of hours to seek either side of the guess.&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">&lt;span style="color:#000">HLW&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000">tg&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">get_tide_table_times&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">np&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">datetime64&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;2020-10-13 12:48&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">),&lt;/span> &lt;span style="color:#000">winsize&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">2&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">method&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;nearest_1&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;span style="color:#000">HLW&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000">tg&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">get_tide_table_times&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">np&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">datetime64&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;2020-10-13 12:48&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">),&lt;/span> &lt;span style="color:#000">winsize&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">1&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">method&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;nearest_1&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">
&lt;/code>&lt;/pre>&lt;/div></description></item><item><title>Docs: Transect tutorial</title><link>https://british-oceanographic-data-centre.github.io/COAsT/docs/examples/notebooks/gridded/transect_tutorial/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://british-oceanographic-data-centre.github.io/COAsT/docs/examples/notebooks/gridded/transect_tutorial/</guid><description>
&lt;p>This is a demonstration script for using the Transect class in the COAsT
package. This object has strict data formatting requirements, which are
outlined in tranect.py.&lt;br>
&lt;em>&lt;strong>Transect subsetting&lt;/strong> (a vertical slice of data between two coordinates): Creating them and performing some custom diagnostics with them.&lt;/em>&lt;/p>
&lt;p>In this tutorial we take a look at subsetting the model data along a transect (a custom straight line) and creating some bespoke diagnostics along it. We look at:&lt;/p>
&lt;pre>&lt;code>1. Creating a TRANSECT object, defined between two points.
2. Plotting data along a transect.
3. Calculating flow normal to the transect
&lt;/code>&lt;/pre>
&lt;h3 id="import-relevant-packages">Import relevant packages&lt;/h3>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">&lt;span style="color:#204a87;font-weight:bold">import&lt;/span> &lt;span style="color:#000">coast&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">import&lt;/span> &lt;span style="color:#000">matplotlib.pyplot&lt;/span> &lt;span style="color:#204a87;font-weight:bold">as&lt;/span> &lt;span style="color:#000">plt&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="define-filepaths-for-data-and-configuration">Define filepaths for data and configuration&lt;/h3>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">&lt;span style="color:#000">root&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;./&amp;#34;&lt;/span>
&lt;span style="color:#8f5902;font-style:italic"># And by defining some file paths&lt;/span>
&lt;span style="color:#000">dn_files&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000">root&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">+&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;./example_files/&amp;#34;&lt;/span>
&lt;span style="color:#000">fn_nemo_dat_t&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000">dn_files&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">+&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;nemo_data_T_grid.nc&amp;#34;&lt;/span>
&lt;span style="color:#000">fn_nemo_dat_u&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000">dn_files&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">+&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;nemo_data_U_grid.nc&amp;#34;&lt;/span>
&lt;span style="color:#000">fn_nemo_dat_v&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000">dn_files&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">+&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;nemo_data_V_grid.nc&amp;#34;&lt;/span>
&lt;span style="color:#000">fn_nemo_dom&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000">dn_files&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">+&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;coast_example_nemo_domain.nc&amp;#34;&lt;/span>
&lt;span style="color:#8f5902;font-style:italic"># Configuration files describing the data files&lt;/span>
&lt;span style="color:#000">fn_config_t_grid&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000">root&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">+&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;./config/example_nemo_grid_t.json&amp;#34;&lt;/span>
&lt;span style="color:#000">fn_config_f_grid&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000">root&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">+&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;./config/example_nemo_grid_f.json&amp;#34;&lt;/span>
&lt;span style="color:#000">fn_config_u_grid&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000">root&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">+&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;./config/example_nemo_grid_u.json&amp;#34;&lt;/span>
&lt;span style="color:#000">fn_config_v_grid&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000">root&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">+&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;./config/example_nemo_grid_v.json&amp;#34;&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="load-data-variables-that-are-on-the-nemo-t-grid">Load data variables that are on the NEMO t-grid&lt;/h3>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">&lt;span style="color:#000">nemo_t&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000">coast&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">Gridded&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">fn_data&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#000">fn_nemo_dat_t&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">fn_domain&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#000">fn_nemo_dom&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">config&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#000">fn_config_t_grid&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="now-create-a-transect-using-the-coasttransectt-object">Now create a transect using the &lt;code>coast.TransectT&lt;/code> object.&lt;/h3>
&lt;p>The transect is between the points (54 N 15 W) and (56 N, 12 W). This needs to be passed the corresponding NEMO object and transect end points. The model points closest to these coordinates will be selected as the transect end points.&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">&lt;span style="color:#000">tran_t&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000">coast&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">TransectT&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">nemo_t&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">54&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">-&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">15&lt;/span>&lt;span style="color:#000;font-weight:bold">),&lt;/span> &lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">56&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">-&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">12&lt;/span>&lt;span style="color:#000;font-weight:bold">))&lt;/span>
&lt;span style="color:#8f5902;font-style:italic"># Inspect the data&lt;/span>
&lt;span style="color:#8f5902;font-style:italic">#tran_t.data # uncomment to print data object summary&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="plot-the-data">Plot the data&lt;/h3>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">&lt;span style="color:#8f5902;font-style:italic"># It is simple to plot a scalar such as temperature along the transect:&lt;/span>
&lt;span style="color:#000">temp_mean&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000">tran_t&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">data&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">temperature&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">mean&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">dim&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;t_dim&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;span style="color:#000">plt&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">figure&lt;/span>&lt;span style="color:#000;font-weight:bold">()&lt;/span>
&lt;span style="color:#000">temp_mean&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">plot&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">pcolormesh&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">y&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;depth_0&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">yincrease&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#3465a4">False&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;span style="color:#000">plt&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">show&lt;/span>&lt;span style="color:#000;font-weight:bold">()&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;img src="https://british-oceanographic-data-centre.github.io/COAsT/COAsT/transect_tutorial_files/transect_tutorial_10_0.png" alt="png">&lt;/p>
&lt;h3 id="create-a-nemo-f-grid-object">Create a nemo f-grid object&lt;/h3>
&lt;p>With NEMOâ€™s staggered grid, the first step is to define the transect on the f-grid so that the velocity components are between f-points. We do not need any model data on the f-grid, just the grid information, so create a nemo f-grid object&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">&lt;span style="color:#000">nemo_f&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000">coast&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">Gridded&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">fn_domain&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#000">fn_nemo_dom&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">config&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#000">fn_config_f_grid&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="transect-on-the-f-grid">Transect on the f-grid&lt;/h3>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">&lt;span style="color:#000">tran_f&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000">coast&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">TransectF&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">nemo_f&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">54&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">-&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">15&lt;/span>&lt;span style="color:#000;font-weight:bold">),&lt;/span> &lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">56&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">-&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">12&lt;/span>&lt;span style="color:#000;font-weight:bold">))&lt;/span>
&lt;span style="color:#8f5902;font-style:italic"># Inspect the data&lt;/span>
&lt;span style="color:#8f5902;font-style:italic">#tran_f.data # uncomment to print data object summary&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="load-model-data-on-the-u--and-v--grids">Load model data on the u- and v- grids&lt;/h3>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">&lt;span style="color:#000">nemo_u&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000">coast&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">Gridded&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">fn_data&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#000">fn_nemo_dat_u&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">fn_domain&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#000">fn_nemo_dom&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">config&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#000">fn_config_u_grid&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;span style="color:#000">nemo_v&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000">coast&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">Gridded&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">fn_data&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#000">fn_nemo_dat_v&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">fn_domain&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#000">fn_nemo_dom&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">config&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#000">fn_config_v_grid&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="calculate-the-flow-across-the-transect">Calculate the flow across the transect&lt;/h3>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">&lt;span style="color:#000">tran_f&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">calc_flow_across_transect&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">nemo_u&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">nemo_v&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;span style="color:#8f5902;font-style:italic"># The flow across the transect is stored in a new dataset where the variables are all defined at the points between f-points.&lt;/span>
&lt;span style="color:#8f5902;font-style:italic">#tran_f.data_cross_tran_flow # uncomment to print data object summary&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="plot-the-time-averaged-velocity-across-the-transect">Plot the time averaged velocity across the transect&lt;/h3>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">&lt;span style="color:#8f5902;font-style:italic"># To do this we can plot the â€˜normal_velocitiesâ€™ variable.&lt;/span>
&lt;span style="color:#000">cross_velocity_mean&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000">tran_f&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">data_cross_tran_flow&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">normal_velocities&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">mean&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">dim&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;t_dim&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;span style="color:#000">plt&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">figure&lt;/span>&lt;span style="color:#000;font-weight:bold">()&lt;/span>
&lt;span style="color:#000">cross_velocity_mean&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">rolling&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">r_dim&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">2&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">mean&lt;/span>&lt;span style="color:#000;font-weight:bold">()&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">plot&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">pcolormesh&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">yincrease&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#3465a4">False&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">y&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;depth_0&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">cbar_kwargs&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#000;font-weight:bold">{&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;label&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;m/s&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">})&lt;/span>
&lt;span style="color:#000">plt&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">show&lt;/span>&lt;span style="color:#000;font-weight:bold">()&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;img src="https://british-oceanographic-data-centre.github.io/COAsT/COAsT/transect_tutorial_files/transect_tutorial_20_0.png" alt="png">&lt;/p>
&lt;h3 id="plot-volume-transport-across-the-transect">Plot volume transport across the transect&lt;/h3>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">&lt;span style="color:#8f5902;font-style:italic"># To do this we can plot the â€˜normal_transportsâ€™ variable.&lt;/span>
&lt;span style="color:#000">plt&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">figure&lt;/span>&lt;span style="color:#000;font-weight:bold">()&lt;/span>
&lt;span style="color:#000">cross_transport_mean&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000">tran_f&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">data_cross_tran_flow&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">normal_transports&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">mean&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">dim&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;t_dim&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;span style="color:#000">cross_transport_mean&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">rolling&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">r_dim&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">2&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">mean&lt;/span>&lt;span style="color:#000;font-weight:bold">()&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">plot&lt;/span>&lt;span style="color:#000;font-weight:bold">()&lt;/span>
&lt;span style="color:#000">plt&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">ylabel&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;Sv&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;span style="color:#000">plt&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">show&lt;/span>&lt;span style="color:#000;font-weight:bold">()&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;img src="https://british-oceanographic-data-centre.github.io/COAsT/COAsT/transect_tutorial_files/transect_tutorial_22_0.png" alt="png">&lt;/p></description></item><item><title>Docs: Wod bgc ragged example</title><link>https://british-oceanographic-data-centre.github.io/COAsT/docs/examples/notebooks/profile/wod_bgc_ragged_example/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://british-oceanographic-data-centre.github.io/COAsT/docs/examples/notebooks/profile/wod_bgc_ragged_example/</guid><description>
&lt;p>An example of using COAsT to analysis observational profile data alongside gridded NEMO data.&lt;/p>
&lt;h3 id="load-modules">Load modules&lt;/h3>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">&lt;span style="color:#204a87;font-weight:bold">import&lt;/span> &lt;span style="color:#000">coast&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">import&lt;/span> &lt;span style="color:#000">glob&lt;/span> &lt;span style="color:#8f5902;font-style:italic"># For getting file paths&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">import&lt;/span> &lt;span style="color:#000">gsw&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">import&lt;/span> &lt;span style="color:#000">matplotlib.pyplot&lt;/span> &lt;span style="color:#204a87;font-weight:bold">as&lt;/span> &lt;span style="color:#000">plt&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">import&lt;/span> &lt;span style="color:#000">datetime&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">import&lt;/span> &lt;span style="color:#000">numpy&lt;/span> &lt;span style="color:#204a87;font-weight:bold">as&lt;/span> &lt;span style="color:#000">np&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">import&lt;/span> &lt;span style="color:#000">xarray&lt;/span> &lt;span style="color:#204a87;font-weight:bold">as&lt;/span> &lt;span style="color:#000">xr&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">import&lt;/span> &lt;span style="color:#000">coast._utils.general_utils&lt;/span> &lt;span style="color:#204a87;font-weight:bold">as&lt;/span> &lt;span style="color:#000">general_utils&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">import&lt;/span> &lt;span style="color:#000">scipy&lt;/span> &lt;span style="color:#204a87;font-weight:bold">as&lt;/span> &lt;span style="color:#000">sp&lt;/span>
&lt;span style="color:#8f5902;font-style:italic"># ====================== UNIV PARAMS ===========================&lt;/span>
&lt;span style="color:#000">path_examples&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;./example_files/&amp;#34;&lt;/span>
&lt;span style="color:#000">path_config&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;./config/&amp;#34;&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="load-and-preprocess-profile-and-model-data">load and preprocess profile and model data&lt;/h3>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">&lt;span style="color:#000">fn_wod_var&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000">path_examples&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">+&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;WOD_example_ragged_standard_level.nc&amp;#34;&lt;/span>
&lt;span style="color:#000">fn_wod_config&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000">path_config&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">+&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;example_wod_profiles.json&amp;#34;&lt;/span>
&lt;span style="color:#000">wod_profile_1d&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000">coast&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">Profile&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">config&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#000">fn_wod_config&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;span style="color:#000">wod_profile_1d&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">read_wod&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">fn_wod_var&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;pre>&lt;code>./config/example_wod_profiles.json
&lt;/code>&lt;/pre>
&lt;p>Reshape into 2D.
Choose which observed variables you want.&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">&lt;span style="color:#000">var_user_want&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000;font-weight:bold">[&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;salinity&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;temperature&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;nitrate&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;oxygen&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;dic&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;phosphate&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;alkalinity&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">]&lt;/span>
&lt;span style="color:#000">wod_profile&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000">coast&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">Profile&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">reshape_2d&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">wod_profile_1d&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">var_user_want&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;pre>&lt;code>Depth OK reshape successful
salinity
observed variable exist
OK reshape successful
temperature
observed variable exist
OK reshape successful
nitrate
variable not in observations
oxygen
observed variable exist
OK reshape successful
dic
observed variable exist
OK reshape successful
phosphate
observed variable exist
OK reshape successful
alkalinity
variable not in observations
&lt;/code>&lt;/pre>
&lt;p>Keep subset.&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">&lt;span style="color:#000">wod_profile_sub&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000">wod_profile&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">subset_indices_lonlat_box&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">lonbounds&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#000;font-weight:bold">[&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">90&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">120&lt;/span>&lt;span style="color:#000;font-weight:bold">],&lt;/span> &lt;span style="color:#000">latbounds&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#000;font-weight:bold">[&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">-&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">5&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">5&lt;/span>&lt;span style="color:#000;font-weight:bold">])&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">&lt;span style="color:#8f5902;font-style:italic">#wod_profile_sub.dataset # uncomment to print data object summary&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>SEAsia read BGC.
Note in this simple test nemo data are only for 3 months from 1990 so the comparisons are not going to be correct but just as a demo.&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">&lt;span style="color:#000">fn_seasia_domain&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000">path_examples&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">+&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;coast_example_domain_SEAsia.nc&amp;#34;&lt;/span>
&lt;span style="color:#000">fn_seasia_config_bgc&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000">path_config&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">+&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;example_nemo_bgc.json&amp;#34;&lt;/span>
&lt;span style="color:#000">fn_seasia_var&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000">path_examples&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">+&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;coast_example_SEAsia_BGC_1990.nc&amp;#34;&lt;/span>
&lt;span style="color:#000">seasia_bgc&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000">coast&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">Gridded&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>
&lt;span style="color:#000">fn_data&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#000">fn_seasia_var&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">fn_domain&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#000">fn_seasia_domain&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">config&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#000">fn_seasia_config_bgc&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">multiple&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#3465a4">True&lt;/span>
&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Domain file does not have mask so this is just a trick.&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">&lt;span style="color:#000">seasia_bgc&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">dataset&lt;/span>&lt;span style="color:#000;font-weight:bold">[&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;landmask&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">]&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000">seasia_bgc&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">dataset&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">bottom_level&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">==&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">0&lt;/span>
&lt;span style="color:#000">seasia_bgc&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">dataset&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000">seasia_bgc&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">dataset&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">rename&lt;/span>&lt;span style="color:#000;font-weight:bold">({&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;depth_0&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;depth&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">})&lt;/span>
&lt;span style="color:#000">model_profiles&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000">wod_profile_sub&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">obs_operator&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">seasia_bgc&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;span style="color:#8f5902;font-style:italic">#model_profiles.dataset # uncomment to print data object summary&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Remove any points that are far from model.&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">&lt;span style="color:#000">too_far&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">5&lt;/span>
&lt;span style="color:#000">keep_indices&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000">model_profiles&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">dataset&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">interp_dist&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">&amp;lt;=&lt;/span> &lt;span style="color:#000">too_far&lt;/span>
&lt;span style="color:#000">model_profiles&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000">model_profiles&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">isel&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">id_dim&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#000">keep_indices&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;span style="color:#000">wod_profile&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000">wod_profile_sub&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">isel&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">id_dim&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#000">keep_indices&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">&lt;span style="color:#8f5902;font-style:italic">#wod_profile.dataset # uncomment to print data object summary&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="plot-profiles">Plot profiles&lt;/h3>
&lt;p>Transform observed DIC from mmol/l to mmol C/ m^3 that the model has.&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">&lt;span style="color:#000">fig&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000">plt&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">figure&lt;/span>&lt;span style="color:#000;font-weight:bold">()&lt;/span>
&lt;span style="color:#000">plt&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">plot&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">1000&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">*&lt;/span> &lt;span style="color:#000">wod_profile&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">dataset&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">dic&lt;/span>&lt;span style="color:#000;font-weight:bold">[&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">8&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000;font-weight:bold">:],&lt;/span> &lt;span style="color:#000">wod_profile&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">dataset&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">depth&lt;/span>&lt;span style="color:#000;font-weight:bold">[&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">8&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000;font-weight:bold">:],&lt;/span> &lt;span style="color:#000">linestyle&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">marker&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;o&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;span style="color:#000">plt&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">plot&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">model_profiles&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">dataset&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">dic&lt;/span>&lt;span style="color:#000;font-weight:bold">[&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">8&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000;font-weight:bold">:],&lt;/span> &lt;span style="color:#000">model_profiles&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">dataset&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">depth&lt;/span>&lt;span style="color:#000;font-weight:bold">[:,&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">8&lt;/span>&lt;span style="color:#000;font-weight:bold">],&lt;/span> &lt;span style="color:#000">linestyle&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">marker&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;o&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;span style="color:#000">plt&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">ylim&lt;/span>&lt;span style="color:#000;font-weight:bold">([&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">2500&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">0&lt;/span>&lt;span style="color:#000;font-weight:bold">])&lt;/span>
&lt;span style="color:#000">plt&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">title&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;DIC vs depth&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;span style="color:#000">plt&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">show&lt;/span>&lt;span style="color:#000;font-weight:bold">()&lt;/span>
&lt;span style="color:#000">fig&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000">plt&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">figure&lt;/span>&lt;span style="color:#000;font-weight:bold">()&lt;/span>
&lt;span style="color:#000">plt&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">plot&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">wod_profile&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">dataset&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">oxygen&lt;/span>&lt;span style="color:#000;font-weight:bold">[&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">8&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000;font-weight:bold">:],&lt;/span> &lt;span style="color:#000">wod_profile&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">dataset&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">depth&lt;/span>&lt;span style="color:#000;font-weight:bold">[&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">8&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000;font-weight:bold">:],&lt;/span> &lt;span style="color:#000">linestyle&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">marker&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;o&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;span style="color:#000">plt&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">plot&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">model_profiles&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">dataset&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">oxygen&lt;/span>&lt;span style="color:#000;font-weight:bold">[&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">8&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000;font-weight:bold">:],&lt;/span> &lt;span style="color:#000">model_profiles&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">dataset&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">depth&lt;/span>&lt;span style="color:#000;font-weight:bold">[:,&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">8&lt;/span>&lt;span style="color:#000;font-weight:bold">],&lt;/span> &lt;span style="color:#000">linestyle&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">marker&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;o&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;span style="color:#000">plt&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">ylim&lt;/span>&lt;span style="color:#000;font-weight:bold">([&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">2500&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">0&lt;/span>&lt;span style="color:#000;font-weight:bold">])&lt;/span>
&lt;span style="color:#000">plt&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">title&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;Oxygen vs depth&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;span style="color:#000">plt&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">show&lt;/span>&lt;span style="color:#000;font-weight:bold">()&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;img src="https://british-oceanographic-data-centre.github.io/COAsT/COAsT/wod_bgc_ragged_example_files/wod_bgc_ragged_example_17_0.png" alt="png">&lt;/p>
&lt;p>&lt;img src="https://british-oceanographic-data-centre.github.io/COAsT/COAsT/wod_bgc_ragged_example_files/wod_bgc_ragged_example_17_1.png" alt="png">&lt;/p>
&lt;h3 id="perform-profile-analysis-to-evaluate-differences">Perform profile analysis to evaluate differences&lt;/h3>
&lt;p>Interpolate seasia to profile depths, using &lt;code>ProfileAnalysis&lt;/code> class.&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">&lt;span style="color:#000">reference_depths&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000">wod_profile&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">dataset&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">depth&lt;/span>&lt;span style="color:#000;font-weight:bold">[&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">20&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000;font-weight:bold">:]&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">values&lt;/span>
&lt;span style="color:#000">model_profiles&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">dataset&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000">model_profiles&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">dataset&lt;/span>&lt;span style="color:#000;font-weight:bold">[[&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;dic&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">]]&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">/&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">1000&lt;/span>
&lt;span style="color:#000">pa&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000">coast&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">ProfileAnalysis&lt;/span>&lt;span style="color:#000;font-weight:bold">()&lt;/span>
&lt;span style="color:#000">model_interpolated&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000">pa&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">interpolate_vertical&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">model_profiles&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">wod_profile&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Calculate differences.&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">&lt;span style="color:#000">differences&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000">pa&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">difference&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">model_interpolated&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">wod_profile&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;span style="color:#8f5902;font-style:italic">#differences.dataset.load() # uncomment to print data object summary&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">
&lt;/code>&lt;/pre>&lt;/div></description></item><item><title>Docs: Copernicus</title><link>https://british-oceanographic-data-centre.github.io/COAsT/docs/examples/remote-datasets/copernicus/</link><pubDate>Tue, 15 Sep 2020 00:00:00 +0000</pubDate><guid>https://british-oceanographic-data-centre.github.io/COAsT/docs/examples/remote-datasets/copernicus/</guid><description>
&lt;h1 id="intro">Intro&lt;/h1>
&lt;p>Remote access to Copernicus Marine Environment Monitoring Service CMEMS datasets is enabled via &lt;a href="https://en.wikipedia.org/wiki/OPeNDAP">OPeNDAP&lt;/a> and &lt;a href="https://github.com/pydap/pydap">Pydap&lt;/a>.&lt;/p>
&lt;p>OPeNDAP allows COAsT to stream data from Copernicus without downloading specific subsets or the dataset as a whole.&lt;/p>
&lt;p>In order to access CMEMS data, you must first &lt;a href="https://resources.marine.copernicus.eu/registration-form">create an account&lt;/a>.&lt;/p>
&lt;p>After you have created your account, or if you already have one, a product ID can be selected from the &lt;a href="https://resources.marine.copernicus.eu/products">product catalogue&lt;/a>.&lt;/p>
&lt;h1 id="example">Example&lt;/h1>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">&lt;span style="color:#204a87;font-weight:bold">import&lt;/span> &lt;span style="color:#000">coast&lt;/span>
&lt;span style="color:#8f5902;font-style:italic"># Authenticate with Copernicus and select a database.&lt;/span>
&lt;span style="color:#000">database&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000">coast&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">Copernicus&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">USERNAME&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">PASSWORD&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;nrt&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;span style="color:#8f5902;font-style:italic"># Instantiate a product with its ID&lt;/span>
&lt;span style="color:#000">forecast&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000">database&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">get_product&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;global-analysis-forecast-phy-001-024&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;span style="color:#8f5902;font-style:italic"># Create a COAsT object with the relevant config file&lt;/span>
&lt;span style="color:#000">nemo_t&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000">coast&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">Gridded&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">fn_data&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#000">forecast&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">config&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;./config/example_cmems_grid_t.json&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Look inside the COAsT gridded object: &lt;code>nemo_t.dataset&lt;/code>&lt;/p>
&lt;pre>&lt;code>&amp;lt;xarray.Dataset&amp;gt;
Dimensions: (x_dim: 4320, y_dim: 2041, z_dim: 50, t_dim: 912)
Coordinates:
longitude (x_dim) float32 -180.0 -179.9 -179.8 ... 179.8 179.8 179.9
latitude (y_dim) float32 -80.0 -79.92 -79.83 -79.75 ... 89.83 89.92 90.0
* z_dim (z_dim) float32 0.494 1.541 2.646 ... 5.275e+03 5.728e+03
time (t_dim) datetime64[ns] 2020-01-01T12:00:00 ... 2022-06-30T12...
Dimensions without coordinates: x_dim, y_dim, t_dim
Data variables:
mlotst (t_dim, y_dim, x_dim) float32 dask.array&amp;lt;chunksize=(1, 2041, 4320), meta=np.ndarray&amp;gt;
ssh (t_dim, y_dim, x_dim) float32 dask.array&amp;lt;chunksize=(1, 2041, 4320), meta=np.ndarray&amp;gt;
bottomT (t_dim, y_dim, x_dim) float32 dask.array&amp;lt;chunksize=(1, 2041, 4320), meta=np.ndarray&amp;gt;
sithick (t_dim, y_dim, x_dim) float32 dask.array&amp;lt;chunksize=(1, 2041, 4320), meta=np.ndarray&amp;gt;
siconc (t_dim, y_dim, x_dim) float32 dask.array&amp;lt;chunksize=(1, 2041, 4320), meta=np.ndarray&amp;gt;
usi (t_dim, y_dim, x_dim) float32 dask.array&amp;lt;chunksize=(1, 2041, 4320), meta=np.ndarray&amp;gt;
vsi (t_dim, y_dim, x_dim) float32 dask.array&amp;lt;chunksize=(1, 2041, 4320), meta=np.ndarray&amp;gt;
temperature (t_dim, z_dim, y_dim, x_dim) float32 dask.array&amp;lt;chunksize=(1, 50, 2041, 4320), meta=np.ndarray&amp;gt;
salinity (t_dim, z_dim, y_dim, x_dim) float32 dask.array&amp;lt;chunksize=(1, 50, 2041, 4320), meta=np.ndarray&amp;gt;
uo (t_dim, z_dim, y_dim, x_dim) float32 dask.array&amp;lt;chunksize=(1, 50, 2041, 4320), meta=np.ndarray&amp;gt;
vo (t_dim, z_dim, y_dim, x_dim) float32 dask.array&amp;lt;chunksize=(1, 50, 2041, 4320), meta=np.ndarray&amp;gt;
Attributes: (12/24)
title: daily mean fields from Global Ocean Physics Analysis ...
easting: longitude
northing: latitude
history: 2022/06/21 00:05:41 MERCATOR OCEAN Netcdf creation
source: MERCATOR PSY4QV3R1
institution: MERCATOR OCEAN
...
longitude_min: -180.0
longitude_max: 179.91667
latitude_min: -80.0
latitude_max: 90.0
z_min: 0.494025
z_max: 5727.917
&lt;/code>&lt;/pre>&lt;p>Or plot a snapshot of surface temperature. (This lazy loaded so may take time to render)&lt;/p>
&lt;pre>&lt;code>import matplotlib.pyplot as plt
plt.pcolormesh( nemo_t.dataset.temperature.isel(t_dim=1,z_dim=1))
plt.show()
&lt;/code>&lt;/pre></description></item><item><title>Docs: Build test</title><link>https://british-oceanographic-data-centre.github.io/COAsT/docs/contributing_package/build_test/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://british-oceanographic-data-centre.github.io/COAsT/docs/contributing_package/build_test/</guid><description>
&lt;p>A short script to install COAsT in a conda environment, download and run some
build tests.&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-shell" data-lang="shell">&lt;span style="color:#8f5902;font-style:italic"># Fresh build&lt;/span>
module load anaconda/3-5.1.0 &lt;span style="color:#8f5902;font-style:italic"># or whatever it takes to activate conda&lt;/span>
yes &lt;span style="color:#000;font-weight:bold">|&lt;/span> conda env remove --name test_env
yes &lt;span style="color:#000;font-weight:bold">|&lt;/span> conda create -n test_env &lt;span style="color:#000">python&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>3.8 &lt;span style="color:#8f5902;font-style:italic"># create a new environment&lt;/span>
conda activate test_env
yes &lt;span style="color:#000;font-weight:bold">|&lt;/span> conda install -c conda-forge -c bodc coast
yes &lt;span style="color:#000;font-weight:bold">|&lt;/span> conda install -c conda-forge &lt;span style="color:#000">cartopy&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>0.18.0 &lt;span style="color:#8f5902;font-style:italic"># used for some of the map plotting&lt;/span>
&lt;span style="color:#8f5902;font-style:italic"># Download bits and bobs&lt;/span>
rm -rf coast_test
mkdir coast_test
&lt;span style="color:#204a87">cd&lt;/span> coast_test
git clone https://github.com/British-Oceanographic-Data-Centre/COAsT.git
wget -c https://linkedsystems.uk/erddap/files/COAsT_example_files/COAsT_example_files.zip &lt;span style="color:#ce5c00;font-weight:bold">&amp;amp;&amp;amp;&lt;/span> unzip COAsT_example_files.zip
ln -s COAsT/unit_testing/ .
ln -s COAsT_example_files example_files
&lt;span style="color:#8f5902;font-style:italic"># Run unit tests&lt;/span>
python COAsT/unit_testing/unit_test.py &amp;gt; coast_test.txt
&lt;span style="color:#8f5902;font-style:italic">## If OK then clean up&lt;/span>
&lt;span style="color:#204a87">cd&lt;/span> ..
rm -rf coast_test
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Or, trialling a new (Oct 2022) workflow which seems to dig deeper with useful feedback&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-shell" data-lang="shell">&lt;span style="color:#8f5902;font-style:italic"># create a new conda env with:&lt;/span>
conda env update --prune --file environment.yml
&lt;span style="color:#8f5902;font-style:italic"># run the unit tests with:&lt;/span>
pip install . &lt;span style="color:#ce5c00;font-weight:bold">&amp;amp;&amp;amp;&lt;/span> pytest unit_testing/unit_test.py -s
&lt;/code>&lt;/pre>&lt;/div></description></item><item><title>Docs: Push to master</title><link>https://british-oceanographic-data-centre.github.io/COAsT/docs/contributing_package/push_to_master/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://british-oceanographic-data-centre.github.io/COAsT/docs/contributing_package/push_to_master/</guid><description>
&lt;p>To date the workflow has been to unit test anything and everything that goes
into the develop branch and then periodically push to master less frequently
and issue a new github release.&lt;/p>
&lt;p>With the push to master Git Actions build the conda and pip packages and the
package receives a zenodo update (&lt;a href="https://zenodo.org/account/settings/github/repository/British-Oceanographic-Data-Centre/COAsT">https://zenodo.org/account/settings/github/repository/British-Oceanographic-Data-Centre/COAsT&lt;/a>) and DOI.&lt;/p>
&lt;h3 id="1-push-to-master">1. Push to master&lt;/h3>
&lt;p>Any push to master initiates the Git Actions to build and release the package. It is advisable then to prepare the release in develop and only ever pull into master from develop. (Pulling from master to develop could bring unexpected Git Actions to develop). In order for the package builds to work the version of the package must be unique. The &lt;strong>version&lt;/strong> of the package is set in
file &lt;em>setup.py&lt;/em>. E.g. shown as 2.0.1 below:&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-shell" data-lang="shell">&lt;span style="color:#8f5902;font-style:italic"># setup.py&lt;/span>
...
&lt;span style="color:#000">PACKAGE&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> SimpleNamespace&lt;span style="color:#ce5c00;font-weight:bold">(&lt;/span>**&lt;span style="color:#ce5c00;font-weight:bold">{&lt;/span>
&lt;span style="color:#4e9a06">&amp;#34;name&amp;#34;&lt;/span>: &lt;span style="color:#4e9a06">&amp;#34;COAsT&amp;#34;&lt;/span>,
&lt;span style="color:#4e9a06">&amp;#34;version&amp;#34;&lt;/span>: &lt;span style="color:#4e9a06">&amp;#34;2.0.1&amp;#34;&lt;/span>,
&lt;span style="color:#4e9a06">&amp;#34;description&amp;#34;&lt;/span>: &lt;span style="color:#4e9a06">&amp;#34;This is the Coast Ocean Assessment Tool&amp;#34;&lt;/span>,
&lt;span style="color:#4e9a06">&amp;#34;url&amp;#34;&lt;/span>: &lt;span style="color:#4e9a06">&amp;#34;https://www.bodc.ac.uk&amp;#34;&lt;/span>,
&lt;span style="color:#4e9a06">&amp;#34;download_url&amp;#34;&lt;/span>: &lt;span style="color:#4e9a06">&amp;#34;https://github.com/British-Oceanographic-Data-Centre/COAsT/&amp;#34;&lt;/span>,
....
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Package version also appears in CITATION.cff file, which therefore also needs updating. E.g.:&lt;/p>
&lt;pre>&lt;code>...
title: British-Oceanographic-Data-Centre/COAsT: v2.0.1
version: v2.0.1
date-released: 2022-04-07
&lt;/code>&lt;/pre>&lt;p>Version numbering follows the &lt;a href="http://semver.org/">semantic versioning convention&lt;/a>.
Briefly, given a version number MAJOR.MINOR.PATCH, increment the:&lt;/p>
&lt;ul>
&lt;li>MAJOR version when you make incompatible API changes,&lt;/li>
&lt;li>MINOR version when you add functionality in a backwards compatible manner, and&lt;/li>
&lt;li>PATCH version when you make backwards compatible bug fixes.
Additional labels for pre-release and build metadata are available as extensions to the MAJOR.MINOR.PATCH format.&lt;/li>
&lt;/ul>
&lt;h3 id="2-issue-new-release">2. Issue new release&lt;/h3>
&lt;p>Then issue a &lt;a href="https://github.com/British-Oceanographic-Data-Centre/COAsT/releases">new release&lt;/a>, with the new version label, and annotate the major changes.&lt;/p></description></item><item><title>Docs: Configuration Gallery</title><link>https://british-oceanographic-data-centre.github.io/COAsT/docs/examples/configs_gallery/</link><pubDate>Tue, 15 Sep 2020 00:00:00 +0000</pubDate><guid>https://british-oceanographic-data-centre.github.io/COAsT/docs/examples/configs_gallery/</guid><description>
&lt;h1 id="amm15---15km-resolution-atlantic-margin-model">AMM15 - 1.5km resolution Atlantic Margin Model&lt;/h1>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">&lt;span style="color:#4e9a06">&amp;#34;&amp;#34;&amp;#34;
&lt;/span>&lt;span style="color:#4e9a06">AMM15_example_plot.py
&lt;/span>&lt;span style="color:#4e9a06">
&lt;/span>&lt;span style="color:#4e9a06">Make simple AMM15 SST plot.
&lt;/span>&lt;span style="color:#4e9a06">
&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;&amp;#34;&amp;#34;&lt;/span>
&lt;span style="color:#8f5902;font-style:italic">#%%&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">import&lt;/span> &lt;span style="color:#000">coast&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">import&lt;/span> &lt;span style="color:#000">numpy&lt;/span> &lt;span style="color:#204a87;font-weight:bold">as&lt;/span> &lt;span style="color:#000">np&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">import&lt;/span> &lt;span style="color:#000">xarray&lt;/span> &lt;span style="color:#204a87;font-weight:bold">as&lt;/span> &lt;span style="color:#000">xr&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">import&lt;/span> &lt;span style="color:#000">matplotlib.pyplot&lt;/span> &lt;span style="color:#204a87;font-weight:bold">as&lt;/span> &lt;span style="color:#000">plt&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">import&lt;/span> &lt;span style="color:#000">matplotlib.colors&lt;/span> &lt;span style="color:#204a87;font-weight:bold">as&lt;/span> &lt;span style="color:#000">colors&lt;/span> &lt;span style="color:#8f5902;font-style:italic"># colormap fiddling&lt;/span>
&lt;span style="color:#8f5902;font-style:italic">#################################################&lt;/span>
&lt;span style="color:#8f5902;font-style:italic">#%% Loading data&lt;/span>
&lt;span style="color:#8f5902;font-style:italic">#################################################&lt;/span>
&lt;span style="color:#000">config&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#4e9a06">&amp;#39;AMM15&amp;#39;&lt;/span>
&lt;span style="color:#000">dir_nam&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;/projectsa/NEMO/gmaya/2013p2/&amp;#34;&lt;/span>
&lt;span style="color:#000">fil_nam&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;20130415_25hourm_grid_T.nc&amp;#34;&lt;/span>
&lt;span style="color:#000">dom_nam&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;/projectsa/NEMO/gmaya/AMM15_GRID/amm15.mesh_mask.cs3x.nc&amp;#34;&lt;/span>
&lt;span style="color:#000">config&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;/work/jelt/GitHub/COAsT/config/example_nemo_grid_t.json&amp;#34;&lt;/span>
&lt;span style="color:#000">sci_t&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000">coast&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">Gridded&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">dir_nam&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">+&lt;/span> &lt;span style="color:#000">fil_nam&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">dom_nam&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">config&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#000">config&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span> &lt;span style="color:#8f5902;font-style:italic"># , chunks=chunks)&lt;/span>
&lt;span style="color:#000">chunks&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;span style="color:#4e9a06">&amp;#34;x_dim&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">10&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>
&lt;span style="color:#4e9a06">&amp;#34;y_dim&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">10&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>
&lt;span style="color:#4e9a06">&amp;#34;t_dim&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">10&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>
&lt;span style="color:#000;font-weight:bold">}&lt;/span> &lt;span style="color:#8f5902;font-style:italic"># Chunks are prescribed in the config json file, but can be adjusted while the data is lazy loaded.&lt;/span>
&lt;span style="color:#000">sci_t&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">dataset&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">chunk&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">chunks&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;span style="color:#8f5902;font-style:italic"># create an empty w-grid object, to store stratification&lt;/span>
&lt;span style="color:#000">sci_w&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000">coast&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">Gridded&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">fn_domain&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#000">dom_nam&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">config&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#000">config&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">replace&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;t_nemo&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;w_nemo&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">))&lt;/span>
&lt;span style="color:#000">sci_w&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">dataset&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">chunk&lt;/span>&lt;span style="color:#000;font-weight:bold">({&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;x_dim&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">10&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;y_dim&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">10&lt;/span>&lt;span style="color:#000;font-weight:bold">})&lt;/span> &lt;span style="color:#8f5902;font-style:italic"># Can reset after loading config json&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">print&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#4e9a06">&amp;#39;* Loaded &amp;#39;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>&lt;span style="color:#000">config&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#4e9a06">&amp;#39; data&amp;#39;&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;span style="color:#8f5902;font-style:italic">#################################################&lt;/span>
&lt;span style="color:#8f5902;font-style:italic">#%% subset of data and domain ##&lt;/span>
&lt;span style="color:#8f5902;font-style:italic">#################################################&lt;/span>
&lt;span style="color:#8f5902;font-style:italic"># Pick out a North Sea subdomain&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">print&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#4e9a06">&amp;#39;* Extract North Sea subdomain&amp;#39;&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;span style="color:#000">ind_sci&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000">sci_t&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">subset_indices&lt;/span>&lt;span style="color:#000;font-weight:bold">([&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">51&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">-&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">4&lt;/span>&lt;span style="color:#000;font-weight:bold">],&lt;/span> &lt;span style="color:#000;font-weight:bold">[&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">62&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">15&lt;/span>&lt;span style="color:#000;font-weight:bold">])&lt;/span>
&lt;span style="color:#000">sci_nwes_t&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000">sci_t&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">isel&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">y_dim&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#000">ind_sci&lt;/span>&lt;span style="color:#000;font-weight:bold">[&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">0&lt;/span>&lt;span style="color:#000;font-weight:bold">],&lt;/span> &lt;span style="color:#000">x_dim&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#000">ind_sci&lt;/span>&lt;span style="color:#000;font-weight:bold">[&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">1&lt;/span>&lt;span style="color:#000;font-weight:bold">])&lt;/span> &lt;span style="color:#8f5902;font-style:italic">#nwes = northwest europe shelf&lt;/span>
&lt;span style="color:#000">ind_sci&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000">sci_w&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">subset_indices&lt;/span>&lt;span style="color:#000;font-weight:bold">([&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">51&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">-&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">4&lt;/span>&lt;span style="color:#000;font-weight:bold">],&lt;/span> &lt;span style="color:#000;font-weight:bold">[&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">62&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">15&lt;/span>&lt;span style="color:#000;font-weight:bold">])&lt;/span>
&lt;span style="color:#000">sci_nwes_w&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000">sci_w&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">isel&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">y_dim&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#000">ind_sci&lt;/span>&lt;span style="color:#000;font-weight:bold">[&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">0&lt;/span>&lt;span style="color:#000;font-weight:bold">],&lt;/span> &lt;span style="color:#000">x_dim&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#000">ind_sci&lt;/span>&lt;span style="color:#000;font-weight:bold">[&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">1&lt;/span>&lt;span style="color:#000;font-weight:bold">])&lt;/span> &lt;span style="color:#8f5902;font-style:italic">#nwes = northwest europe shelf&lt;/span>
&lt;span style="color:#8f5902;font-style:italic">#%% Apply masks to temperature and salinity&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">if&lt;/span> &lt;span style="color:#000">config&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">==&lt;/span> &lt;span style="color:#4e9a06">&amp;#39;AMM15&amp;#39;&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>
&lt;span style="color:#000">sci_nwes_t&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">dataset&lt;/span>&lt;span style="color:#000;font-weight:bold">[&lt;/span>&lt;span style="color:#4e9a06">&amp;#39;temperature_m&amp;#39;&lt;/span>&lt;span style="color:#000;font-weight:bold">]&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000">sci_nwes_t&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">dataset&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">temperature&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">where&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span> &lt;span style="color:#000">sci_nwes_t&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">dataset&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">mask&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">expand_dims&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">dim&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#000">sci_nwes_t&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">dataset&lt;/span>&lt;span style="color:#000;font-weight:bold">[&lt;/span>&lt;span style="color:#4e9a06">&amp;#39;t_dim&amp;#39;&lt;/span>&lt;span style="color:#000;font-weight:bold">]&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">sizes&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">&amp;gt;&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">0&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;span style="color:#000">sci_nwes_t&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">dataset&lt;/span>&lt;span style="color:#000;font-weight:bold">[&lt;/span>&lt;span style="color:#4e9a06">&amp;#39;salinity_m&amp;#39;&lt;/span>&lt;span style="color:#000;font-weight:bold">]&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000">sci_nwes_t&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">dataset&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">salinity&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">where&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span> &lt;span style="color:#000">sci_nwes_t&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">dataset&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">mask&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">expand_dims&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">dim&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#000">sci_nwes_t&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">dataset&lt;/span>&lt;span style="color:#000;font-weight:bold">[&lt;/span>&lt;span style="color:#4e9a06">&amp;#39;t_dim&amp;#39;&lt;/span>&lt;span style="color:#000;font-weight:bold">]&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">sizes&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">&amp;gt;&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">0&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">else&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>
&lt;span style="color:#8f5902;font-style:italic"># Apply fake masks to temperature and salinity&lt;/span>
&lt;span style="color:#000">sci_nwes_t&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">dataset&lt;/span>&lt;span style="color:#000;font-weight:bold">[&lt;/span>&lt;span style="color:#4e9a06">&amp;#39;temperature_m&amp;#39;&lt;/span>&lt;span style="color:#000;font-weight:bold">]&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000">sci_nwes_t&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">dataset&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">temperature&lt;/span>
&lt;span style="color:#000">sci_nwes_t&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">dataset&lt;/span>&lt;span style="color:#000;font-weight:bold">[&lt;/span>&lt;span style="color:#4e9a06">&amp;#39;salinity_m&amp;#39;&lt;/span>&lt;span style="color:#000;font-weight:bold">]&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000">sci_nwes_t&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">dataset&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">salinity&lt;/span>
&lt;span style="color:#8f5902;font-style:italic">#%% Plots&lt;/span>
&lt;span style="color:#000">fig&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000">plt&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">figure&lt;/span>&lt;span style="color:#000;font-weight:bold">()&lt;/span>
&lt;span style="color:#000">plt&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">pcolormesh&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span> &lt;span style="color:#000">sci_t&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">dataset&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">longitude&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">sci_t&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">dataset&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">latitude&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">sci_t&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">dataset&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">temperature&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">isel&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">z_dim&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">0&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">squeeze&lt;/span>&lt;span style="color:#000;font-weight:bold">())&lt;/span>
&lt;span style="color:#8f5902;font-style:italic">#plt.xlabel(&amp;#39;longitude&amp;#39;)&lt;/span>
&lt;span style="color:#8f5902;font-style:italic">#plt.ylabel(&amp;#39;latitude&amp;#39;)&lt;/span>
&lt;span style="color:#8f5902;font-style:italic">#plt.colorbar()&lt;/span>
&lt;span style="color:#000">plt&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">axis&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#4e9a06">&amp;#39;off&amp;#39;&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;span style="color:#000">plt&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">show&lt;/span>&lt;span style="color:#000;font-weight:bold">()&lt;/span>
&lt;span style="color:#000">fig&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">savefig&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#4e9a06">&amp;#39;AMM15_SST_nocolorbar.png&amp;#39;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">dpi&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">120&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>
&lt;div class="card rounded p-2 td-post-card mb-4 mt-4" style="max-width: 610px">
&lt;img class="card-img-top" src="https://british-oceanographic-data-centre.github.io/COAsT/COAsT/docs/examples/configs_gallery/AMM15_SST_nocolorbar_hu877f3826aecfbf10acb03ed24307d340_124451_600x700_fit_catmullrom_2.png" width="600" height="400">
&lt;div class="card-body px-0 pt-2 pb-0">
&lt;p class="card-text">
&lt;/p>
&lt;/div>
&lt;/div>
&lt;h1 id="india-subcontinent-maritime-domain-wcssp-india-configuration">India subcontinent maritime domain. WCSSP India configuration&lt;/h1>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">&lt;span style="color:#8f5902;font-style:italic">#%%&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">import&lt;/span> &lt;span style="color:#000">coast&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">import&lt;/span> &lt;span style="color:#000">numpy&lt;/span> &lt;span style="color:#204a87;font-weight:bold">as&lt;/span> &lt;span style="color:#000">np&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">import&lt;/span> &lt;span style="color:#000">xarray&lt;/span> &lt;span style="color:#204a87;font-weight:bold">as&lt;/span> &lt;span style="color:#000">xr&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">import&lt;/span> &lt;span style="color:#000">dask&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">import&lt;/span> &lt;span style="color:#000">matplotlib.pyplot&lt;/span> &lt;span style="color:#204a87;font-weight:bold">as&lt;/span> &lt;span style="color:#000">plt&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">import&lt;/span> &lt;span style="color:#000">matplotlib.colors&lt;/span> &lt;span style="color:#204a87;font-weight:bold">as&lt;/span> &lt;span style="color:#000">colors&lt;/span> &lt;span style="color:#8f5902;font-style:italic"># colormap fiddling&lt;/span>
&lt;span style="color:#8f5902;font-style:italic">#################################################&lt;/span>
&lt;span style="color:#8f5902;font-style:italic">#%% Loading data&lt;/span>
&lt;span style="color:#8f5902;font-style:italic">#################################################&lt;/span>
&lt;span style="color:#000">dir_nam&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;/projectsa/COAsT/NEMO_example_data/MO_INDIA/&amp;#34;&lt;/span>
&lt;span style="color:#000">fil_nam&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;ind_1d_cat_20180101_20180105_25hourm_grid_T.nc&amp;#34;&lt;/span>
&lt;span style="color:#000">dom_nam&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;domain_cfg_wcssp.nc&amp;#34;&lt;/span>
&lt;span style="color:#000">config_t&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;/work/jelt/GitHub/COAsT/config/example_nemo_grid_t.json&amp;#34;&lt;/span>
&lt;span style="color:#000">sci_t&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000">coast&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">Gridded&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">dir_nam&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">+&lt;/span> &lt;span style="color:#000">fil_nam&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">dir_nam&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">+&lt;/span> &lt;span style="color:#000">dom_nam&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">config&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#000">config_t&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;span style="color:#8f5902;font-style:italic">#%% Plot&lt;/span>
&lt;span style="color:#000">fig&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000">plt&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">figure&lt;/span>&lt;span style="color:#000;font-weight:bold">()&lt;/span>
&lt;span style="color:#000">plt&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">pcolormesh&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span> &lt;span style="color:#000">sci_t&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">dataset&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">longitude&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">sci_t&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">dataset&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">latitude&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">sci_t&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">dataset&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">temperature&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">isel&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">t_dim&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">0&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">isel&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">z_dim&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">0&lt;/span>&lt;span style="color:#000;font-weight:bold">))&lt;/span>
&lt;span style="color:#000">plt&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">xlabel&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#4e9a06">&amp;#39;longitude&amp;#39;&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;span style="color:#000">plt&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">ylabel&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#4e9a06">&amp;#39;latitude&amp;#39;&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;span style="color:#000">plt&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">title&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#4e9a06">&amp;#39;WCSSP India SST&amp;#39;&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;span style="color:#000">plt&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">colorbar&lt;/span>&lt;span style="color:#000;font-weight:bold">()&lt;/span>
&lt;span style="color:#000">plt&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">show&lt;/span>&lt;span style="color:#000;font-weight:bold">()&lt;/span>
&lt;span style="color:#000">fig&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">savefig&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#4e9a06">&amp;#39;WCSSP_India_SST.png&amp;#39;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">dpi&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">120&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>
&lt;div class="card rounded p-2 td-post-card mb-4 mt-4" style="max-width: 610px">
&lt;img class="card-img-top" src="https://british-oceanographic-data-centre.github.io/COAsT/COAsT/docs/examples/configs_gallery/WCSSP_India_SST_hu26324214e01da4db3cfe888337350570_138094_600x700_fit_catmullrom_2.png" width="600" height="450">
&lt;div class="card-body px-0 pt-2 pb-0">
&lt;p class="card-text">
&lt;/p>
&lt;/div>
&lt;/div>
&lt;h1 id="south-east-asia-112-deg-configuration-accord-seasia_r12">South East Asia, 1/12 deg configuration (ACCORD: SEAsia_R12)&lt;/h1>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">&lt;span style="color:#8f5902;font-style:italic">#%%&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">import&lt;/span> &lt;span style="color:#000">coast&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">import&lt;/span> &lt;span style="color:#000">numpy&lt;/span> &lt;span style="color:#204a87;font-weight:bold">as&lt;/span> &lt;span style="color:#000">np&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">import&lt;/span> &lt;span style="color:#000">xarray&lt;/span> &lt;span style="color:#204a87;font-weight:bold">as&lt;/span> &lt;span style="color:#000">xr&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">import&lt;/span> &lt;span style="color:#000">dask&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">import&lt;/span> &lt;span style="color:#000">matplotlib.pyplot&lt;/span> &lt;span style="color:#204a87;font-weight:bold">as&lt;/span> &lt;span style="color:#000">plt&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">import&lt;/span> &lt;span style="color:#000">matplotlib.colors&lt;/span> &lt;span style="color:#204a87;font-weight:bold">as&lt;/span> &lt;span style="color:#000">colors&lt;/span> &lt;span style="color:#8f5902;font-style:italic"># colormap fiddling&lt;/span>
&lt;span style="color:#8f5902;font-style:italic">#################################################&lt;/span>
&lt;span style="color:#8f5902;font-style:italic">#%% Loading data&lt;/span>
&lt;span style="color:#8f5902;font-style:italic">#################################################&lt;/span>
&lt;span style="color:#000">dir_nam&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;/projectsa/COAsT/NEMO_example_data/SEAsia_R12/&amp;#34;&lt;/span>
&lt;span style="color:#000">fil_nam&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;SEAsia_R12_5d_20120101_20121231_gridT.nc&amp;#34;&lt;/span>
&lt;span style="color:#000">dom_nam&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;domain_cfg_ORCA12_adj.nc&amp;#34;&lt;/span>
&lt;span style="color:#000">config_t&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;/work/jelt/GitHub/COAsT/config/example_nemo_grid_t.json&amp;#34;&lt;/span>
&lt;span style="color:#000">sci_t&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000">coast&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">Gridded&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">dir_nam&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">+&lt;/span> &lt;span style="color:#000">fil_nam&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">dir_nam&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">+&lt;/span> &lt;span style="color:#000">dom_nam&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">config&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#000">config_t&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;span style="color:#8f5902;font-style:italic">#%% Plot&lt;/span>
&lt;span style="color:#000">fig&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000">plt&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">figure&lt;/span>&lt;span style="color:#000;font-weight:bold">()&lt;/span>
&lt;span style="color:#000">plt&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">pcolormesh&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span> &lt;span style="color:#000">sci_t&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">dataset&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">longitude&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">sci_t&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">dataset&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">latitude&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">sci_t&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">dataset&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">soce&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">isel&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">t_dim&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">0&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">isel&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">z_dim&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">0&lt;/span>&lt;span style="color:#000;font-weight:bold">))&lt;/span>
&lt;span style="color:#000">plt&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">xlabel&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#4e9a06">&amp;#39;longitude&amp;#39;&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;span style="color:#000">plt&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">ylabel&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#4e9a06">&amp;#39;latitude&amp;#39;&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;span style="color:#000">plt&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">title&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#4e9a06">&amp;#39;SE Asia, surface salinity (psu)&amp;#39;&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;span style="color:#000">plt&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">colorbar&lt;/span>&lt;span style="color:#000;font-weight:bold">()&lt;/span>
&lt;span style="color:#000">plt&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">show&lt;/span>&lt;span style="color:#000;font-weight:bold">()&lt;/span>
&lt;span style="color:#000">fig&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">savefig&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#4e9a06">&amp;#39;SEAsia_R12_SSS.png&amp;#39;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">dpi&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">120&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>
&lt;div class="card rounded p-2 td-post-card mb-4 mt-4" style="max-width: 610px">
&lt;img class="card-img-top" src="https://british-oceanographic-data-centre.github.io/COAsT/COAsT/docs/examples/configs_gallery/SEAsia_R12_SSS_hu5159f12f7e0dba7fb4d65a79ff209969_95940_600x700_fit_catmullrom_2.png" width="600" height="450">
&lt;div class="card-body px-0 pt-2 pb-0">
&lt;p class="card-text">
&lt;/p>
&lt;/div>
&lt;/div></description></item><item><title>Docs: Altimetry</title><link>https://british-oceanographic-data-centre.github.io/COAsT/docs/reference/altimetry/</link><pubDate>Thu, 20 Oct 2022 00:00:00 +0000</pubDate><guid>https://british-oceanographic-data-centre.github.io/COAsT/docs/reference/altimetry/</guid><description>
&lt;h3 id="objects">Objects&lt;/h3>
&lt;p>&lt;a href="#altimetry">Altimetry()&lt;/a>&lt;br />
&lt;a href="#altimetryread_cmems">Altimetry.read_cmems()&lt;/a>&lt;br />
&lt;a href="#altimetryload">Altimetry.load()&lt;/a>&lt;br />
&lt;a href="#altimetryload_single">Altimetry.load_single()&lt;/a>&lt;br />
&lt;a href="#altimetryload_multiple">Altimetry.load_multiple()&lt;/a>&lt;br />
&lt;a href="#altimetrysubset_indices_lonlat_box">Altimetry.subset_indices_lonlat_box()&lt;/a>&lt;br />
&lt;a href="#altimetryquick_plot">Altimetry.quick_plot()&lt;/a>&lt;br />
&lt;a href="#altimetryobs_operator">Altimetry.obs_operator()&lt;/a>&lt;br />
&lt;a href="#altimetrycrps">Altimetry.crps()&lt;/a>&lt;br />
&lt;a href="#altimetrydifference">Altimetry.difference()&lt;/a>&lt;br />
&lt;a href="#altimetryabsolute_error">Altimetry.absolute_error()&lt;/a>&lt;br />
&lt;a href="#altimetrymean_absolute_error">Altimetry.mean_absolute_error()&lt;/a>&lt;br />
&lt;a href="#altimetryroot_mean_square_error">Altimetry.root_mean_square_error()&lt;/a>&lt;br />
&lt;a href="#altimetrytime_mean">Altimetry.time_mean()&lt;/a>&lt;br />
&lt;a href="#altimetrytime_std">Altimetry.time_std()&lt;/a>&lt;br />
&lt;a href="#altimetrytime_correlation">Altimetry.time_correlation()&lt;/a>&lt;br />
&lt;a href="#altimetrytime_covariance">Altimetry.time_covariance()&lt;/a>&lt;br />
&lt;a href="#altimetrybasic_stats">Altimetry.basic_stats()&lt;/a>&lt;br />&lt;/p>
&lt;p>Altimetry class&lt;/p>
&lt;h4 id="altimetry">Altimetry()&lt;/h4>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">&lt;span style="color:#204a87;font-weight:bold">class&lt;/span> &lt;span style="color:#000">Altimetry&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">Track&lt;/span>&lt;span style="color:#000;font-weight:bold">):&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;pre>&lt;code>An object for reading, storing and manipulating altimetry data.
Currently the object contains functionality for reading altimetry netCDF
data from the CMEMS database. This is the default for initialisation.
Data should be stored in an xarray.Dataset, in the form:
* Date Format Overview *
1. A single dimension (time).
2. Three coordinates: time, latitude, longitude. All lie on the 'time'
dimension.
3. Observed variable DataArrays on the time dimension.
There are currently no naming conventions for the variables however
examples from the CMEMS database include sla_filtered, sla_unfiltered and
mdt (mean dynamic topography).
* Methods Overview *
*Initialisation and File Reading*
-&amp;gt; __init__(): Initialises an ALTIMETRY object.
-&amp;gt; read_cmems(): Reads data from a CMEMS netCDF file.
*Plotting*
-&amp;gt; quick_plot(): Makes a quick along-track plot of specified data.
*Model Comparison*
-&amp;gt; obs_operator(): For interpolating model data to this object.
-&amp;gt; cprs(): Calculates the CRPS between a model and obs variable.
-&amp;gt; difference(): Differences two specified variables
-&amp;gt; absolute_error(): Absolute difference, two variables
-&amp;gt; mean_absolute_error(): MAE between two variables
-&amp;gt; root_mean_square_error(): RMSE between two variables
-&amp;gt; time_mean(): Mean of a variable in time
-&amp;gt; time_std(): St. Dev of a variable in time
-&amp;gt; time_correlation(): Correlation between two variables
-&amp;gt; time_covariance(): Covariance between two variables
-&amp;gt; basic_stats(): Calculates multiple of the above metrics.
&lt;/code>&lt;/pre>&lt;h5 id="altimetryread_cmems">Altimetry.read_cmems()&lt;/h5>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">
&lt;span style="color:#204a87;font-weight:bold">def&lt;/span> &lt;span style="color:#000">Altimetry&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">read_cmems&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#3465a4">self&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">file_path&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">multiple&lt;/span>&lt;span style="color:#000;font-weight:bold">):&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;blockquote>
&lt;p>&lt;br />
Read file.&lt;br />
&lt;br />
&lt;b>Args:&lt;/b>&lt;br />
Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â  file_path (str): path to data file&lt;br />
Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â  multiple (boolean): True if reading multiple files otherwise False&lt;br />
&lt;br />&lt;/p>
&lt;/blockquote>
&lt;h5 id="altimetryload">Altimetry.load()&lt;/h5>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">
&lt;span style="color:#204a87;font-weight:bold">def&lt;/span> &lt;span style="color:#000">Altimetry&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">load&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#3465a4">self&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">file_or_dir&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">chunks&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#3465a4">None&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">multiple&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#3465a4">False&lt;/span>&lt;span style="color:#000;font-weight:bold">):&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;blockquote>
&lt;p>&lt;br />
Loads a file into a object&amp;rsquo;s dataset variable using xarray&lt;br />
&lt;br />
&lt;b>Args:&lt;/b>&lt;br />
Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â  file_or_dir (str) : file name or directory to multiple files.&lt;br />
Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â  chunks (dict)Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â  : Chunks to use in Dask [default None]&lt;br />
Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â  multiple (bool) : If true, load in multiple files from directory.&lt;br />
Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â  Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â  Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â  Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â  Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â  Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â  If false load a single file [default False]&lt;br />
&lt;br />&lt;/p>
&lt;/blockquote>
&lt;h5 id="altimetryload_single">Altimetry.load_single()&lt;/h5>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">
&lt;span style="color:#204a87;font-weight:bold">def&lt;/span> &lt;span style="color:#000">Altimetry&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">load_single&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#3465a4">self&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#204a87">file&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">chunks&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#3465a4">None&lt;/span>&lt;span style="color:#000;font-weight:bold">):&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;blockquote>
&lt;p>&lt;br />
Loads a single file into object&amp;rsquo;s dataset variable.&lt;br />
&lt;br />
&lt;b>Args:&lt;/b>&lt;br />
Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â  file (str) : file name or directory to multiple files.&lt;br />
Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â  chunks (dict) : Chunks to use in Dask [default None]&lt;br />
&lt;br />&lt;/p>
&lt;/blockquote>
&lt;h5 id="altimetryload_multiple">Altimetry.load_multiple()&lt;/h5>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">
&lt;span style="color:#204a87;font-weight:bold">def&lt;/span> &lt;span style="color:#000">Altimetry&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">load_multiple&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#3465a4">self&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">directory_to_files&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">chunks&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#3465a4">None&lt;/span>&lt;span style="color:#000;font-weight:bold">):&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;blockquote>
&lt;p>&lt;br />
Loads multiple files from directory into dataset variable.&lt;br />
&lt;br />
&lt;b>Args:&lt;/b>&lt;br />
Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â  directory_to_files (str) : directory path to multiple files.&lt;br />
Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â  chunks (dict) : Chunks to use in Dask [default None]&lt;br />
&lt;br />&lt;/p>
&lt;/blockquote>
&lt;h5 id="altimetrysubset_indices_lonlat_box">Altimetry.subset_indices_lonlat_box()&lt;/h5>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">
&lt;span style="color:#204a87;font-weight:bold">def&lt;/span> &lt;span style="color:#000">Altimetry&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">subset_indices_lonlat_box&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#3465a4">self&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">lonbounds&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">latbounds&lt;/span>&lt;span style="color:#000;font-weight:bold">):&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;blockquote>
&lt;p>&lt;br />
Generates array indices for data which lies in a given lon/lat box.&lt;br />
&lt;br />
&lt;b>Keyword arguments:&lt;/b>&lt;br />
lonÂ Â Â Â Â Â Â Â Â Â Â Â Â Â Â  &amp;ndash; Longitudes, 1D or 2D.&lt;br />
latÂ Â Â Â Â Â Â Â Â Â Â Â Â Â Â  &amp;ndash; Latitudes, 1D or 2D&lt;br />
lonbounds &amp;ndash; Array of form [min_longitude=-180, max_longitude=180]&lt;br />
latbounds &amp;ndash; Array of form [min_latitude, max_latitude]&lt;br />
&lt;br />
return: Indices corresponding to datapoints inside specified box&lt;br />
&lt;br />&lt;/p>
&lt;/blockquote>
&lt;h5 id="altimetryquick_plot">Altimetry.quick_plot()&lt;/h5>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">
&lt;span style="color:#204a87;font-weight:bold">def&lt;/span> &lt;span style="color:#000">Altimetry&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">quick_plot&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#3465a4">self&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">color_var_str&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#3465a4">None&lt;/span>&lt;span style="color:#000;font-weight:bold">):&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;blockquote>
&lt;p>&lt;br />
Quick plot&lt;br />
&lt;br />&lt;/p>
&lt;/blockquote>
&lt;h5 id="altimetryobs_operator">Altimetry.obs_operator()&lt;/h5>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">
&lt;span style="color:#204a87;font-weight:bold">def&lt;/span> &lt;span style="color:#000">Altimetry&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">obs_operator&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#3465a4">self&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">model&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">mod_var_name&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">time_interp&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#000">nearest&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">model_mask&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#3465a4">None&lt;/span>&lt;span style="color:#000;font-weight:bold">):&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;blockquote>
&lt;p>&lt;br />
For interpolating a model dataarray onto altimetry locations and times.&lt;br />
&lt;br />
&lt;b>For ALTIMETRY, the interpolation is done independently in two steps:&lt;/b>&lt;br />
Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â  1. Horizontal space&lt;br />
Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â  2. Time&lt;br />
Model data is taken at the surface if necessary (0 index).&lt;br />
&lt;br />
&lt;b>Example usage:&lt;/b>&lt;br />
&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;ndash;&lt;br />
altimetry.obs_operator(nemo_obj, &amp;lsquo;sossheig&amp;rsquo;)&lt;br />
&lt;br />
Parameters&lt;br />
&amp;mdash;&amp;mdash;&amp;mdash;-&lt;br />
model : model object (e.g. NEMO)&lt;br />
mod_var: variable name string to use from model object&lt;br />
time_interp: time interpolation method (optional, default: &amp;lsquo;nearest&amp;rsquo;)&lt;br />
Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â  This can take any string scipy.interpolate would take. e.g.&lt;br />
Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â  &amp;lsquo;nearest&amp;rsquo;, &amp;lsquo;linear&amp;rsquo; or &amp;lsquo;cubic'&lt;br />
model_mask : Mask to apply to model data in geographical interpolation&lt;br />
Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â  of model. For example, use to ignore land points.&lt;br />
Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â  If None, no mask is applied. If &amp;lsquo;bathy&amp;rsquo;, model variable&lt;br />
Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â  (bathymetry==0) is used. Custom 2D mask arrays can be&lt;br />
Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â  supplied.&lt;br />
Returns&lt;br />
&amp;mdash;&amp;mdash;-&lt;br />
Adds a DataArray to self.dataset, containing interpolated values.&lt;br />
&lt;br />&lt;/p>
&lt;/blockquote>
&lt;h5 id="altimetrycrps">Altimetry.crps()&lt;/h5>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">
&lt;span style="color:#204a87;font-weight:bold">def&lt;/span> &lt;span style="color:#000">Altimetry&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">crps&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#3465a4">self&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">model_object&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">model_var_name&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">obs_var_name&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">nh_radius&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">20&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">time_interp&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#000">linear&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">create_new_object&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#3465a4">True&lt;/span>&lt;span style="color:#000;font-weight:bold">):&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;blockquote>
&lt;p>&lt;br />
Comparison of observed variable to modelled using the Continuous&lt;br />
Ranked Probability Score. This is done using this ALTIMETRY object.&lt;br />
This method specifically performs a single-observation neighbourhood-&lt;br />
forecast method.&lt;br />
&lt;br />
Parameters&lt;br />
&amp;mdash;&amp;mdash;&amp;mdash;-&lt;br />
model_object (model) : Model object (NEMO) containing model data&lt;br />
model_var_name (str) : Name of model variable to compare.&lt;br />
obs_var_name (str) : Name of observed variable to compare.&lt;br />
nh_radius (float)Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â  : Neighbourhood radius (km)&lt;br />
time_interp (str)Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â  : Type of time interpolation to use (s)&lt;br />
create_new_obj (bool): If True, save output to new ALTIMETRY obj.&lt;br />
Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â  Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â  Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â  Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â  Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â  Otherwise, save to this obj.&lt;br />
&lt;br />
Returns&lt;br />
&amp;mdash;&amp;mdash;-&lt;br />
xarray.Dataset containing times, sealevel and quality control flags&lt;br />
&lt;br />
Example Usage&lt;br />
&amp;mdash;&amp;mdash;-&lt;br />&lt;/p>
&lt;h1 id="compare-modelled-sossheig-with-sla_filtered-using-crpsbr-">Compare modelled &amp;lsquo;sossheig&amp;rsquo; with &amp;lsquo;sla_filtered&amp;rsquo; using CRPS&lt;br />&lt;/h1>
&lt;p>crps = altimetry.crps(nemo, &amp;lsquo;sossheig&amp;rsquo;, &amp;lsquo;sla_filtered&amp;rsquo;)&lt;br />
&lt;br />&lt;/p>
&lt;/blockquote>
&lt;h5 id="altimetrydifference">Altimetry.difference()&lt;/h5>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">
&lt;span style="color:#204a87;font-weight:bold">def&lt;/span> &lt;span style="color:#000">Altimetry&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">difference&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#3465a4">self&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">var_str0&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">var_str1&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">date0&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#3465a4">None&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">date1&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#3465a4">None&lt;/span>&lt;span style="color:#000;font-weight:bold">):&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;blockquote>
&lt;p>&lt;br />
Difference two variables defined by var_str0 and var_str1 between&lt;br />
two dates date0 and date1. Returns xr.DataArray&lt;br />
&lt;br />&lt;/p>
&lt;/blockquote>
&lt;h5 id="altimetryabsolute_error">Altimetry.absolute_error()&lt;/h5>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">
&lt;span style="color:#204a87;font-weight:bold">def&lt;/span> &lt;span style="color:#000">Altimetry&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">absolute_error&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#3465a4">self&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">var_str0&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">var_str1&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">date0&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#3465a4">None&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">date1&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#3465a4">None&lt;/span>&lt;span style="color:#000;font-weight:bold">):&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;blockquote>
&lt;p>&lt;br />
Absolute difference two variables defined by var_str0 and var_str1&lt;br />
between two dates date0 and date1. Return xr.DataArray&lt;br />
&lt;br />&lt;/p>
&lt;/blockquote>
&lt;h5 id="altimetrymean_absolute_error">Altimetry.mean_absolute_error()&lt;/h5>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">
&lt;span style="color:#204a87;font-weight:bold">def&lt;/span> &lt;span style="color:#000">Altimetry&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">mean_absolute_error&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#3465a4">self&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">var_str0&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">var_str1&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">date0&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#3465a4">None&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">date1&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#3465a4">None&lt;/span>&lt;span style="color:#000;font-weight:bold">):&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;blockquote>
&lt;p>&lt;br />
Mean absolute difference two variables defined by var_str0 and&lt;br />
var_str1 between two dates date0 and date1. Return xr.DataArray&lt;br />
&lt;br />&lt;/p>
&lt;/blockquote>
&lt;h5 id="altimetryroot_mean_square_error">Altimetry.root_mean_square_error()&lt;/h5>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">
&lt;span style="color:#204a87;font-weight:bold">def&lt;/span> &lt;span style="color:#000">Altimetry&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">root_mean_square_error&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#3465a4">self&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">var_str0&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">var_str1&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">date0&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#3465a4">None&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">date1&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#3465a4">None&lt;/span>&lt;span style="color:#000;font-weight:bold">):&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;blockquote>
&lt;p>&lt;br />
Root mean square difference two variables defined by var_str0 and&lt;br />
var_str1 between two dates date0 and date1. Return xr.DataArray&lt;br />
&lt;br />&lt;/p>
&lt;/blockquote>
&lt;h5 id="altimetrytime_mean">Altimetry.time_mean()&lt;/h5>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">
&lt;span style="color:#204a87;font-weight:bold">def&lt;/span> &lt;span style="color:#000">Altimetry&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">time_mean&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#3465a4">self&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">var_str&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">date0&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#3465a4">None&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">date1&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#3465a4">None&lt;/span>&lt;span style="color:#000;font-weight:bold">):&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;blockquote>
&lt;p>&lt;br />
Time mean of variable var_str between dates date0, date1&lt;br />
&lt;br />&lt;/p>
&lt;/blockquote>
&lt;h5 id="altimetrytime_std">Altimetry.time_std()&lt;/h5>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">
&lt;span style="color:#204a87;font-weight:bold">def&lt;/span> &lt;span style="color:#000">Altimetry&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">time_std&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#3465a4">self&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">var_str&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">date0&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#3465a4">None&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">date1&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#3465a4">None&lt;/span>&lt;span style="color:#000;font-weight:bold">):&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;blockquote>
&lt;p>&lt;br />
Time st. dev of variable var_str between dates date0 and date1&lt;br />
&lt;br />&lt;/p>
&lt;/blockquote>
&lt;h5 id="altimetrytime_correlation">Altimetry.time_correlation()&lt;/h5>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">
&lt;span style="color:#204a87;font-weight:bold">def&lt;/span> &lt;span style="color:#000">Altimetry&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">time_correlation&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#3465a4">self&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">var_str0&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">var_str1&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">date0&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#3465a4">None&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">date1&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#3465a4">None&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">method&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#000">pearson&lt;/span>&lt;span style="color:#000;font-weight:bold">):&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;blockquote>
&lt;p>&lt;br />
Time correlation between two variables defined by var_str0,&lt;br />
var_str1 between dates date0 and date1. Uses Pandas corr().&lt;br />
&lt;br />&lt;/p>
&lt;/blockquote>
&lt;h5 id="altimetrytime_covariance">Altimetry.time_covariance()&lt;/h5>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">
&lt;span style="color:#204a87;font-weight:bold">def&lt;/span> &lt;span style="color:#000">Altimetry&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">time_covariance&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#3465a4">self&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">var_str0&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">var_str1&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">date0&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#3465a4">None&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">date1&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#3465a4">None&lt;/span>&lt;span style="color:#000;font-weight:bold">):&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;blockquote>
&lt;p>&lt;br />
Time covariance between two variables defined by var_str0,&lt;br />
var_str1 between dates date0 and date1. Uses Pandas corr().&lt;br />
&lt;br />&lt;/p>
&lt;/blockquote>
&lt;h5 id="altimetrybasic_stats">Altimetry.basic_stats()&lt;/h5>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">
&lt;span style="color:#204a87;font-weight:bold">def&lt;/span> &lt;span style="color:#000">Altimetry&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">basic_stats&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#3465a4">self&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">var_str0&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">var_str1&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">date0&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#3465a4">None&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">date1&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#3465a4">None&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">create_new_object&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#3465a4">True&lt;/span>&lt;span style="color:#000;font-weight:bold">):&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;blockquote>
&lt;p>&lt;br />
Calculates a selection of statistics for two variables defined by&lt;br />
var_str0 and var_str1, between dates date0 and date1. This will return&lt;br />
their difference, absolute difference, mean absolute error, root mean&lt;br />
square error, correlation and covariance. If create_new_object is True&lt;br />
then this method returns a new ALTIMETRY object containing statistics,&lt;br />
otherwise variables are saved to the dateset inside this object.&lt;br />
&lt;br />&lt;/p>
&lt;/blockquote></description></item><item><title>Docs: Argos</title><link>https://british-oceanographic-data-centre.github.io/COAsT/docs/reference/argos/</link><pubDate>Thu, 20 Oct 2022 00:00:00 +0000</pubDate><guid>https://british-oceanographic-data-centre.github.io/COAsT/docs/reference/argos/</guid><description>
&lt;h3 id="objects">Objects&lt;/h3>
&lt;p>&lt;a href="#argos">Argos()&lt;/a>&lt;br />
&lt;a href="#argosread_data">Argos.read_data()&lt;/a>&lt;br />&lt;/p>
&lt;p>Argos class&lt;/p>
&lt;h4 id="argos">Argos()&lt;/h4>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">&lt;span style="color:#204a87;font-weight:bold">class&lt;/span> &lt;span style="color:#000">Argos&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">Indexed&lt;/span>&lt;span style="color:#000;font-weight:bold">):&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;pre>&lt;code>Class for reading Argos CSV formatted data files into an xarray object
&lt;/code>&lt;/pre>&lt;h5 id="argosread_data">Argos.read_data()&lt;/h5>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">
&lt;span style="color:#204a87;font-weight:bold">def&lt;/span> &lt;span style="color:#000">Argos&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">read_data&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#3465a4">self&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">file_path&lt;/span>&lt;span style="color:#000;font-weight:bold">):&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;blockquote>
&lt;p>&lt;br />
Read the data file&lt;br />
&lt;br />
Expected format and variable names are&lt;br />
&lt;br />
Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â  DATIM,LAT,LON,SST,SST_F,PSST,PSST_F,PPRES,PPRES_F,BEN&lt;br />
&lt;br />
xarray dataset to have dimension as time and coordinates as time, latitude and longitude&lt;br />
&lt;br />
&lt;b>Args:&lt;/b>&lt;br />
Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â  file_path (str) : path of data file&lt;br />
&lt;br />&lt;/p>
&lt;/blockquote></description></item><item><title>Docs: Climatology</title><link>https://british-oceanographic-data-centre.github.io/COAsT/docs/reference/climatology/</link><pubDate>Thu, 20 Oct 2022 00:00:00 +0000</pubDate><guid>https://british-oceanographic-data-centre.github.io/COAsT/docs/reference/climatology/</guid><description>
&lt;h3 id="objects">Objects&lt;/h3>
&lt;p>&lt;a href="#climatology">Climatology()&lt;/a>&lt;br />
&lt;a href="#climatologymake_climatology">Climatology.make_climatology()&lt;/a>&lt;br />
&lt;a href="#climatology_get_date_ranges">Climatology._get_date_ranges()&lt;/a>&lt;br />
&lt;a href="#climatologymultiyear_averages">Climatology.multiyear_averages()&lt;/a>&lt;br />&lt;/p>
&lt;p>Climatology class&lt;/p>
&lt;h4 id="climatology">Climatology()&lt;/h4>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">&lt;span style="color:#204a87;font-weight:bold">class&lt;/span> &lt;span style="color:#000">Climatology&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">Coast&lt;/span>&lt;span style="color:#000;font-weight:bold">):&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;pre>&lt;code>A Python class containing methods for lazily creating climatologies of
NEMO data (or any xarray datasets) and writing to file. Also for resampling
methods.
&lt;/code>&lt;/pre>&lt;h5 id="climatologymake_climatology">Climatology.make_climatology()&lt;/h5>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">&lt;span style="color:#5c35cc;font-weight:bold">@staticmethod&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">def&lt;/span> &lt;span style="color:#000">Climatology&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">make_climatology&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">ds&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">output_frequency&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">monthly_weights&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#3465a4">False&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">time_var_name&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#000">time&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">time_dim_name&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#000">t_dim&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">fn_out&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#3465a4">None&lt;/span>&lt;span style="color:#000;font-weight:bold">):&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;blockquote>
&lt;p>&lt;br />
Calculates a climatology for all variables in a supplied dataset.&lt;br />
The resulting xarray dataset will NOT be loaded to RAM. Instead,&lt;br />
it is a set of dask operations. To load to RAM use, e.g. .compute().&lt;br />
However, if the original data was large, this may take a long time and&lt;br />
a lot of memory. Make sure you have the available RAM or chunking&lt;br />
and parallel processes are specified correctly.&lt;br />
&lt;br />
Otherwise, it is recommended that you access the climatology data&lt;br />
in an indexed way. I.E. compute only at specific parts of the data&lt;br />
are once.&lt;br />
&lt;br />
The resulting cliamtology dataset can be written to disk using&lt;br />
.to_netcdf(). Again, this may take a while for larger datasets.&lt;br />
&lt;br />
ds :: xarray dataset object from a Coast object.&lt;br />
&lt;b>output_frequency :: any xarray groupby string. i.e:&lt;/b>&lt;br />
Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â  &amp;lsquo;month'&lt;br />
Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â  &amp;lsquo;season'&lt;br />
time_var_name :: the string name of the time variable in dataset&lt;br />
time_dim_name :: the string name of the time dimension variable in dataset&lt;br />
fn_out :: string defining full output netcdf file path and name.&lt;br />
&lt;br />&lt;/p>
&lt;/blockquote>
&lt;h5 id="climatology_get_date_ranges">Climatology._get_date_ranges()&lt;/h5>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">&lt;span style="color:#5c35cc;font-weight:bold">@staticmethod&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">def&lt;/span> &lt;span style="color:#000">Climatology&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">_get_date_ranges&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">years&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">month_periods&lt;/span>&lt;span style="color:#000;font-weight:bold">):&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;blockquote>
&lt;p>&lt;br />
Calculates a list of datetime date ranges for a given list of years and a specified start/end month.&lt;br />
&lt;br />
&lt;b>Args:&lt;/b>&lt;br />
Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â  years (list): A list of years to calculate date ranges for.&lt;br />
Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â  month_periods (list): A list containing tuples of start and end month integers.&lt;br />
Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â  (i.e. [(3,5),(12, 2)] is Mar -&amp;gt; May, Dec -&amp;gt; Feb). Must be in chronological order.&lt;br />
&lt;br />
&lt;b>Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â  Returns:&lt;/b>&lt;br />
Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â  Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â  date_ranges (list): A list of tuples, each containing a start and end datetime.date object.&lt;br />
&lt;br />&lt;/p>
&lt;/blockquote>
&lt;h5 id="climatologymultiyear_averages">Climatology.multiyear_averages()&lt;/h5>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">&lt;span style="color:#5c35cc;font-weight:bold">@classmethod&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">def&lt;/span> &lt;span style="color:#000">Climatology&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">multiyear_averages&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#3465a4">cls&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">ds&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">month_periods&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">time_var&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#000">time&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">time_dim&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#000">t_dim&lt;/span>&lt;span style="color:#000;font-weight:bold">):&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;blockquote>
&lt;p>&lt;br />
Calculate multiyear means for all Data variables in a dataset between a given start and end month.&lt;br />
&lt;br />
&lt;b>Args:&lt;/b>&lt;br />
Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â  ds (xr.Dataset): xarray dataset containing data.&lt;br />
Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â  month_periods (list): A list containing tuples of start and end month integers.&lt;br />
Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â  (i.e. [(3,5),(12, 2)] is Mar -&amp;gt; May, Dec -&amp;gt; Feb). Must be in chronological order.&lt;br />
Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â  The seasons module can be used for convenience (e.g. seasons.WINTER, seasons.ALL etc. )&lt;br />
Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â  time_var (str): String representing the time variable name within the dataset.&lt;br />
Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â  time_dim (str): String representing the time dimension name within the dataset.&lt;br />
&lt;b>returns:&lt;/b>&lt;br />
Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â  ds_mean (xr.Dataset): A new dataset containing mean averages for each data variable across all years and&lt;br />
Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â  date periods. Indexed by the multi-index &amp;lsquo;year_period&amp;rsquo; (i.e. (2000, &amp;lsquo;Dec-Feb&amp;rsquo;)).&lt;br />
&lt;br />&lt;/p>
&lt;/blockquote></description></item><item><title>Docs: Coast</title><link>https://british-oceanographic-data-centre.github.io/COAsT/docs/reference/coast/</link><pubDate>Thu, 20 Oct 2022 00:00:00 +0000</pubDate><guid>https://british-oceanographic-data-centre.github.io/COAsT/docs/reference/coast/</guid><description>
&lt;h3 id="objects">Objects&lt;/h3>
&lt;p>&lt;a href="#setup_dask_client">setup_dask_client()&lt;/a>&lt;br />
&lt;a href="#coast">Coast()&lt;/a>&lt;br />
&lt;a href="#coastload">Coast.load()&lt;/a>&lt;br />
&lt;a href="#coastload_single">Coast.load_single()&lt;/a>&lt;br />
&lt;a href="#coastload_multiple">Coast.load_multiple()&lt;/a>&lt;br />
&lt;a href="#coastload_dataset">Coast.load_dataset()&lt;/a>&lt;br />
&lt;a href="#coastset_dimension_mapping">Coast.set_dimension_mapping()&lt;/a>&lt;br />
&lt;a href="#coastset_variable_mapping">Coast.set_variable_mapping()&lt;/a>&lt;br />
&lt;a href="#coastset_grid_ref_attribute">Coast.set_grid_ref_attribute()&lt;/a>&lt;br />
&lt;a href="#coastset_dimension_names">Coast.set_dimension_names()&lt;/a>&lt;br />
&lt;a href="#coastset_variable_names">Coast.set_variable_names()&lt;/a>&lt;br />
&lt;a href="#coastset_variable_grid_ref_attribute">Coast.set_variable_grid_ref_attribute()&lt;/a>&lt;br />
&lt;a href="#coastcopy">Coast.copy()&lt;/a>&lt;br />
&lt;a href="#coastisel">Coast.isel()&lt;/a>&lt;br />
&lt;a href="#coastsel">Coast.sel()&lt;/a>&lt;br />
&lt;a href="#coastrename">Coast.rename()&lt;/a>&lt;br />
&lt;a href="#coastsubset">Coast.subset()&lt;/a>&lt;br />
&lt;a href="#coastsubset_as_copy">Coast.subset_as_copy()&lt;/a>&lt;br />
&lt;a href="#coastdistance_between_two_points">Coast.distance_between_two_points()&lt;/a>&lt;br />
&lt;a href="#coastsubset_indices_by_distance">Coast.subset_indices_by_distance()&lt;/a>&lt;br />
&lt;a href="#coastsubset_indices_lonlat_box">Coast.subset_indices_lonlat_box()&lt;/a>&lt;br />
&lt;a href="#coastcalculate_haversine_distance">Coast.calculate_haversine_distance()&lt;/a>&lt;br />
&lt;a href="#coastget_subset_as_xarray">Coast.get_subset_as_xarray()&lt;/a>&lt;br />
&lt;a href="#coastget_2d_subset_as_xarray">Coast.get_2d_subset_as_xarray()&lt;/a>&lt;br />
&lt;a href="#coastplot_simple_2d">Coast.plot_simple_2d()&lt;/a>&lt;br />
&lt;a href="#coastplot_cartopy">Coast.plot_cartopy()&lt;/a>&lt;br />
&lt;a href="#coastplot_movie">Coast.plot_movie()&lt;/a>&lt;br />&lt;/p>
&lt;p>The coast class is the main access point into this package.&lt;/p>
&lt;h4 id="setup_dask_client">setup_dask_client()&lt;/h4>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">
&lt;span style="color:#204a87;font-weight:bold">def&lt;/span> &lt;span style="color:#000">setup_dask_client&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">workers&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">2&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">threads&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">2&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">memory_limit_per_worker&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">2&lt;/span>&lt;span style="color:#000">GB&lt;/span>&lt;span style="color:#000;font-weight:bold">):&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;blockquote>
&lt;p>&lt;br />
None&lt;br />
&lt;br />&lt;/p>
&lt;/blockquote>
&lt;h4 id="coast">Coast()&lt;/h4>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">&lt;span style="color:#204a87;font-weight:bold">class&lt;/span> &lt;span style="color:#000">Coast&lt;/span>&lt;span style="color:#000;font-weight:bold">():&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;pre>&lt;code>None
&lt;/code>&lt;/pre>&lt;h5 id="coastload">Coast.load()&lt;/h5>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">
&lt;span style="color:#204a87;font-weight:bold">def&lt;/span> &lt;span style="color:#000">Coast&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">load&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#3465a4">self&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">file_or_dir&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">chunks&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#3465a4">None&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">multiple&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#3465a4">False&lt;/span>&lt;span style="color:#000;font-weight:bold">):&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;blockquote>
&lt;p>&lt;br />
Loads a file into a COAsT object&amp;rsquo;s dataset variable using xarray.&lt;br />
&lt;br />
&lt;b>Args:&lt;/b>&lt;br />
Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â  file_or_dir (str): file name, OPeNDAP accessor, or directory to multiple files.&lt;br />
Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â  chunks (dict): Chunks to use in Dask [default None].&lt;br />
Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â  multiple (bool): If true, load in multiple files from directory. If false load a single file [default False].&lt;br />
&lt;br />&lt;/p>
&lt;/blockquote>
&lt;h5 id="coastload_single">Coast.load_single()&lt;/h5>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">
&lt;span style="color:#204a87;font-weight:bold">def&lt;/span> &lt;span style="color:#000">Coast&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">load_single&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#3465a4">self&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#204a87">file&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">chunks&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#3465a4">None&lt;/span>&lt;span style="color:#000;font-weight:bold">):&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;blockquote>
&lt;p>&lt;br />
Loads a single file into COAsT object&amp;rsquo;s dataset variable.&lt;br />
&lt;br />
&lt;b>Args:&lt;/b>&lt;br />
Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â  file (str): Input file.&lt;br />
Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â  chunks (Dict): Chunks to use in Dask [default None].&lt;br />
&lt;br />&lt;/p>
&lt;/blockquote>
&lt;h5 id="coastload_multiple">Coast.load_multiple()&lt;/h5>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">
&lt;span style="color:#204a87;font-weight:bold">def&lt;/span> &lt;span style="color:#000">Coast&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">load_multiple&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#3465a4">self&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">directory_to_files&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">chunks&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#3465a4">None&lt;/span>&lt;span style="color:#000;font-weight:bold">):&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;blockquote>
&lt;p>&lt;br />
Loads multiple files from directory into dataset variable.&lt;br />
&lt;br />
&lt;b>Args:&lt;/b>&lt;br />
&lt;b>Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â  directory_to_files (str):&lt;/b>&lt;br />
Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â  chunks (Dict): Chunks to use in Dask [default None].&lt;br />
&lt;br />&lt;/p>
&lt;/blockquote>
&lt;h5 id="coastload_dataset">Coast.load_dataset()&lt;/h5>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">
&lt;span style="color:#204a87;font-weight:bold">def&lt;/span> &lt;span style="color:#000">Coast&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">load_dataset&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#3465a4">self&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">dataset&lt;/span>&lt;span style="color:#000;font-weight:bold">):&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;blockquote>
&lt;p>&lt;br />
Loads a dataset.&lt;br />
&lt;br />
&lt;b>Args:&lt;/b>&lt;br />
Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â  dataset (xr.Dataset): Dataset to load.&lt;br />
&lt;br />&lt;/p>
&lt;/blockquote>
&lt;h5 id="coastset_dimension_mapping">Coast.set_dimension_mapping()&lt;/h5>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">
&lt;span style="color:#204a87;font-weight:bold">def&lt;/span> &lt;span style="color:#000">Coast&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">set_dimension_mapping&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#3465a4">self&lt;/span>&lt;span style="color:#000;font-weight:bold">):&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;blockquote>
&lt;p>&lt;br />
Set mapping of dimensions.&lt;br />
&lt;br />&lt;/p>
&lt;/blockquote>
&lt;h5 id="coastset_variable_mapping">Coast.set_variable_mapping()&lt;/h5>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">
&lt;span style="color:#204a87;font-weight:bold">def&lt;/span> &lt;span style="color:#000">Coast&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">set_variable_mapping&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#3465a4">self&lt;/span>&lt;span style="color:#000;font-weight:bold">):&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;blockquote>
&lt;p>&lt;br />
Set mapping of variable.&lt;br />
&lt;br />&lt;/p>
&lt;/blockquote>
&lt;h5 id="coastset_grid_ref_attribute">Coast.set_grid_ref_attribute()&lt;/h5>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">
&lt;span style="color:#204a87;font-weight:bold">def&lt;/span> &lt;span style="color:#000">Coast&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">set_grid_ref_attribute&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#3465a4">self&lt;/span>&lt;span style="color:#000;font-weight:bold">):&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;blockquote>
&lt;p>&lt;br />
Set grid reference attribute.&lt;br />
&lt;br />&lt;/p>
&lt;/blockquote>
&lt;h5 id="coastset_dimension_names">Coast.set_dimension_names()&lt;/h5>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">
&lt;span style="color:#204a87;font-weight:bold">def&lt;/span> &lt;span style="color:#000">Coast&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">set_dimension_names&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#3465a4">self&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">dim_mapping&lt;/span>&lt;span style="color:#000;font-weight:bold">):&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;blockquote>
&lt;p>&lt;br />
Relabel dimensions in COAsT object xarray.dataset to ensure consistent naming throughout the COAsT package.&lt;br />
&lt;br />
&lt;b>Args:&lt;/b>&lt;br />
Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â  dim_mapping (Dict): keys are dimension names to change and values new dimension names.&lt;br />
&lt;br />&lt;/p>
&lt;/blockquote>
&lt;h5 id="coastset_variable_names">Coast.set_variable_names()&lt;/h5>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">
&lt;span style="color:#204a87;font-weight:bold">def&lt;/span> &lt;span style="color:#000">Coast&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">set_variable_names&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#3465a4">self&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">var_mapping&lt;/span>&lt;span style="color:#000;font-weight:bold">):&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;blockquote>
&lt;p>&lt;br />
Relabel variables in COAsT object xarray.dataset to ensure consistent naming throughout the COAsT package.&lt;br />
&lt;br />
&lt;b>Args:&lt;/b>&lt;br />
Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â  var_mapping (Dict): keys are variable names to change and values are new variable names&lt;br />
&lt;br />&lt;/p>
&lt;/blockquote>
&lt;h5 id="coastset_variable_grid_ref_attribute">Coast.set_variable_grid_ref_attribute()&lt;/h5>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">
&lt;span style="color:#204a87;font-weight:bold">def&lt;/span> &lt;span style="color:#000">Coast&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">set_variable_grid_ref_attribute&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#3465a4">self&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">grid_ref_attr_mapping&lt;/span>&lt;span style="color:#000;font-weight:bold">):&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;blockquote>
&lt;p>&lt;br />
Set attributes for variables to access within package and set grid attributes to identify which grid variable is associated with.&lt;br />
&lt;br />
&lt;b>Args:&lt;/b>&lt;br />
Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â  grid_ref_attr_mapping (Dict): Dict containing mappings.&lt;br />
&lt;br />&lt;/p>
&lt;/blockquote>
&lt;h5 id="coastcopy">Coast.copy()&lt;/h5>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">
&lt;span style="color:#204a87;font-weight:bold">def&lt;/span> &lt;span style="color:#000">Coast&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">copy&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#3465a4">self&lt;/span>&lt;span style="color:#000;font-weight:bold">):&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;blockquote>
&lt;p>&lt;br />
Method to copy self.&lt;br />
&lt;br />&lt;/p>
&lt;/blockquote>
&lt;h5 id="coastisel">Coast.isel()&lt;/h5>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">
&lt;span style="color:#204a87;font-weight:bold">def&lt;/span> &lt;span style="color:#000">Coast&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">isel&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#3465a4">self&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">indexers&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#3465a4">None&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">drop&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#3465a4">False&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">**&lt;/span>&lt;span style="color:#000">kwargs&lt;/span>&lt;span style="color:#000;font-weight:bold">):&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;blockquote>
&lt;p>&lt;br />
Indexes COAsT object along specified dimensions using xarray isel.&lt;br />
&lt;br />
&lt;b>Input is of same form as xarray.isel. Basic use, hand in either:&lt;/b>&lt;br />&lt;/p>
&lt;ol>
&lt;li>dictionary with keys = dimensions, values = indices&lt;br />&lt;/li>
&lt;li>**kwargs of form dimension = indices.&lt;br />
&lt;br />
&lt;b>Args:&lt;/b>&lt;br />
Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â  indexers (Dict): A dict with keys matching dimensions and values given by integers, slice objects or arrays.&lt;br />
Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â  drop (bool): If drop=True, drop coordinates variables indexed by integers instead of making them scalar.&lt;br />
Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â  **kwargs (Any): The keyword arguments form of indexers. One of indexers or indexers_kwargs must be provided.&lt;br />
&lt;br />&lt;/li>
&lt;/ol>
&lt;/blockquote>
&lt;h5 id="coastsel">Coast.sel()&lt;/h5>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">
&lt;span style="color:#204a87;font-weight:bold">def&lt;/span> &lt;span style="color:#000">Coast&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">sel&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#3465a4">self&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">indexers&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#3465a4">None&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">drop&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#3465a4">False&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">**&lt;/span>&lt;span style="color:#000">kwargs&lt;/span>&lt;span style="color:#000;font-weight:bold">):&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;blockquote>
&lt;p>&lt;br />
Indexes COAsT object along specified dimensions using xarray sel.&lt;br />
&lt;br />
&lt;b>Input is of same form as xarray.sel. Basic use, hand in either:&lt;/b>&lt;br />
Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â  1. Dictionary with keys = dimensions, values = indices&lt;br />
Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â  2. **kwargs of form dimension = indices&lt;br />
&lt;br />
&lt;b>Args:&lt;/b>&lt;br />
Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â  indexers (Dict): A dict with keys matching dimensions and values given by scalars, slices or arrays of tick labels.&lt;br />
Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â  drop (bool): If drop=True, drop coordinates variables in indexers instead of making them scalar.&lt;br />
Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â  **kwargs (Any): The keyword arguments form of indexers. One of indexers or indexers_kwargs must be provided.&lt;br />
&lt;br />&lt;/p>
&lt;/blockquote>
&lt;h5 id="coastrename">Coast.rename()&lt;/h5>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">
&lt;span style="color:#204a87;font-weight:bold">def&lt;/span> &lt;span style="color:#000">Coast&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">rename&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#3465a4">self&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">rename_dict&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">**&lt;/span>&lt;span style="color:#000">kwargs&lt;/span>&lt;span style="color:#000;font-weight:bold">):&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;blockquote>
&lt;p>&lt;br />
Rename dataset.&lt;br />
&lt;br />
&lt;b>Args:&lt;/b>&lt;br />
Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â  rename_dict (Dict): Dictionary whose keys are current variable or dimension names and whose values are the desired names.&lt;br />
Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â  **kwargs (Any): Keyword form of name_dict. One of name_dict or names must be provided.&lt;br />
&lt;br />&lt;/p>
&lt;/blockquote>
&lt;h5 id="coastsubset">Coast.subset()&lt;/h5>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">
&lt;span style="color:#204a87;font-weight:bold">def&lt;/span> &lt;span style="color:#000">Coast&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">subset&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#3465a4">self&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">**&lt;/span>&lt;span style="color:#000">kwargs&lt;/span>&lt;span style="color:#000;font-weight:bold">):&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;blockquote>
&lt;p>&lt;br />
Subsets all variables within the dataset inside self (a COAsT object).&lt;br />
&lt;br />
Input is a set of keyword argument pairs of the form: dimension_name = indices.&lt;br />
The entire object is then subsetted along this dimension at indices&lt;br />
&lt;br />
&lt;b>Args:&lt;/b>&lt;br />
Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â  **kwargs (Any): The keyword arguments form of indexers. One of indexers or indexers_kwargs must be provided.&lt;br />
&lt;br />&lt;/p>
&lt;/blockquote>
&lt;h5 id="coastsubset_as_copy">Coast.subset_as_copy()&lt;/h5>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">
&lt;span style="color:#204a87;font-weight:bold">def&lt;/span> &lt;span style="color:#000">Coast&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">subset_as_copy&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#3465a4">self&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">**&lt;/span>&lt;span style="color:#000">kwargs&lt;/span>&lt;span style="color:#000;font-weight:bold">):&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;blockquote>
&lt;p>&lt;br />
Similar to COAsT.subset() however applies the subsetting to a copy of the original COAsT object.&lt;br />
&lt;br />
This subsetted copy is then returned.Useful for preserving the original object whilst creating smaller subsetted object copies.&lt;br />
&lt;br />
&lt;b>Args:&lt;/b>&lt;br />
Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â  **kwargs (Any): The keyword arguments form of indexers. One of indexers or indexers_kwargs must be provided.&lt;br />
&lt;br />&lt;/p>
&lt;/blockquote>
&lt;h5 id="coastdistance_between_two_points">Coast.distance_between_two_points()&lt;/h5>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">
&lt;span style="color:#204a87;font-weight:bold">def&lt;/span> &lt;span style="color:#000">Coast&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">distance_between_two_points&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#3465a4">self&lt;/span>&lt;span style="color:#000;font-weight:bold">):&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;blockquote>
&lt;p>&lt;br />
None&lt;br />
&lt;br />&lt;/p>
&lt;/blockquote>
&lt;h5 id="coastsubset_indices_by_distance">Coast.subset_indices_by_distance()&lt;/h5>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">
&lt;span style="color:#204a87;font-weight:bold">def&lt;/span> &lt;span style="color:#000">Coast&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">subset_indices_by_distance&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#3465a4">self&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">centre_lon&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">centre_lat&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">radius&lt;/span>&lt;span style="color:#000;font-weight:bold">):&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;blockquote>
&lt;p>&lt;br />
This method returns a &lt;code>tuple&lt;/code> of indices within the &lt;code>radius&lt;/code> of the lon/lat point given by the user.&lt;br />
&lt;br />
Distance is calculated as haversine - see &lt;code>self.calculate_haversine_distance&lt;/code>.&lt;br />
&lt;br />
&lt;b>Args:&lt;/b>&lt;br />
Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â  centre_lon (float): The longitude of the users central point.&lt;br />
Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â  centre_lat (float): The latitude of the users central point.&lt;br />
Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â  radius (float): The haversine distance (in km) from the central point.&lt;br />
&lt;br />
&lt;b>Return:&lt;/b>&lt;br />
Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â  Tuple[xr.DataArray, xr.DataArray]: All indices in a &lt;code>tuple&lt;/code> with the haversine distance of the central point.&lt;br />
&lt;br />&lt;/p>
&lt;/blockquote>
&lt;h5 id="coastsubset_indices_lonlat_box">Coast.subset_indices_lonlat_box()&lt;/h5>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">
&lt;span style="color:#204a87;font-weight:bold">def&lt;/span> &lt;span style="color:#000">Coast&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">subset_indices_lonlat_box&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#3465a4">self&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">lonbounds&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">latbounds&lt;/span>&lt;span style="color:#000;font-weight:bold">):&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;blockquote>
&lt;p>&lt;br />
Generates array indices for data which lies in a given lon/lat box.&lt;br />
&lt;br />
&lt;b>Args:&lt;/b>&lt;br />
Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â  lonbounds: Longitude boundaries. List of form [min_longitude=-180, max_longitude=180].&lt;br />
Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â  latbounds: Latitude boundaries. List of form [min_latitude, max_latitude].&lt;br />
&lt;br />
&lt;b>Returns:&lt;/b>&lt;br />
Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â  np.ndarray: Indices corresponding to datapoints inside specified box.&lt;br />
&lt;br />&lt;/p>
&lt;/blockquote>
&lt;h5 id="coastcalculate_haversine_distance">Coast.calculate_haversine_distance()&lt;/h5>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">&lt;span style="color:#5c35cc;font-weight:bold">@staticmethod&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">def&lt;/span> &lt;span style="color:#000">Coast&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">calculate_haversine_distance&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">lon1&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">lat1&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">lon2&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">lat2&lt;/span>&lt;span style="color:#000;font-weight:bold">):&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;blockquote>
&lt;p>&lt;br />
Estimation of geographical distance using the Haversine function.&lt;br />
&lt;br />
Input can be single values or 1D arrays of locations. This does NOT create a distance matrix but outputs another 1D array.&lt;br />
This works for either location vectors of equal length OR a single location and an arbitrary length location vector.&lt;br />
&lt;br />
&lt;b>Args:&lt;/b>&lt;br />
Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â  lon1 (Any): Angles in degrees.&lt;br />
Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â  lat1 (Any): Angles in degrees.&lt;br />
Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â  lon2 (Any): Angles in degrees.&lt;br />
Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â  lat2 (Any): Angles in degrees.&lt;br />
&lt;br />
&lt;b>Returns:&lt;/b>&lt;br />
Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â  float: Haversine distance between points.&lt;br />
&lt;br />&lt;/p>
&lt;/blockquote>
&lt;h5 id="coastget_subset_as_xarray">Coast.get_subset_as_xarray()&lt;/h5>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">
&lt;span style="color:#204a87;font-weight:bold">def&lt;/span> &lt;span style="color:#000">Coast&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">get_subset_as_xarray&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#3465a4">self&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">var&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">points_x&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">points_y&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">line_length&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#3465a4">None&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">time_counter&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">0&lt;/span>&lt;span style="color:#000;font-weight:bold">):&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;blockquote>
&lt;p>&lt;br />
This method gets a subset of the data across the x/y indices given for the chosen variable.&lt;br />
&lt;br />
Setting time_counter to None will treat &lt;code>var&lt;/code> as only having 3 dimensions depth, y, x&lt;br />
there is a check on &lt;code>var&lt;/code> to see the size of the time_counter, if 1 then time_counter is fixed to index 0.&lt;br />
&lt;br />
&lt;b>Args:&lt;/b>&lt;br />
Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â  var (str): The name of the variable to get data from.&lt;br />
Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â  points_x (slice): A list/array of indices for the x dimension.&lt;br />
Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â  points_y (slice): A list/array of indices for the y dimension.&lt;br />
Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â  line_length (int): The length of your subset (assuming simple line transect). TODO This is unused.&lt;br />
Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â  time_counter (int): Which time slice to get data from, if None and the variable only has one a time&lt;br />
Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â  Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â  channel of length 1 then time_counter is fixed too an index of 0.&lt;br />
&lt;br />
&lt;b>Returns:&lt;/b>&lt;br />
Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â  xr.DataArray: Data across all depths for the chosen variable along the given indices.&lt;br />
&lt;br />&lt;/p>
&lt;/blockquote>
&lt;h5 id="coastget_2d_subset_as_xarray">Coast.get_2d_subset_as_xarray()&lt;/h5>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">
&lt;span style="color:#204a87;font-weight:bold">def&lt;/span> &lt;span style="color:#000">Coast&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">get_2d_subset_as_xarray&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#3465a4">self&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">var&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">points_x&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">points_y&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">line_length&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#3465a4">None&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">time_counter&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">0&lt;/span>&lt;span style="color:#000;font-weight:bold">):&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;blockquote>
&lt;p>&lt;br />
Get 2d subset as an xarray.&lt;br />
&lt;br />
&lt;b>Args:&lt;/b>&lt;br />
Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â  var (str): Member of dataset.&lt;br />
Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â  points_x (slice): Keys matching dimensions.&lt;br />
Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â  points_y (slice): Keys matching dimensions.&lt;br />
Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â  line_length (int): Unused.&lt;br />
Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â  time_counter (int): Time counter.&lt;br />
&lt;br />
&lt;b>Return:&lt;/b>&lt;br />
Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â  xr.Dataset: Subset.&lt;br />
&lt;br />&lt;/p>
&lt;/blockquote>
&lt;h5 id="coastplot_simple_2d">Coast.plot_simple_2d()&lt;/h5>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">
&lt;span style="color:#204a87;font-weight:bold">def&lt;/span> &lt;span style="color:#000">Coast&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">plot_simple_2d&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#3465a4">self&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">x&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">y&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">data&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">cmap&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">plot_info&lt;/span>&lt;span style="color:#000;font-weight:bold">):&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;blockquote>
&lt;p>&lt;br />
This is a simple method that will plot data in a 2d. It is a wrapper for matplotlib&amp;rsquo;s &amp;lsquo;pcolormesh&amp;rsquo; method.&lt;br />
&lt;br />
&lt;code>cmap&lt;/code> and &lt;code>plot_info&lt;/code> are required to run this method, &lt;code>cmap&lt;/code> is passed directly to &lt;code>pcolormesh&lt;/code>.&lt;br />
&lt;code>plot_info&lt;/code> contains all the required information for setting the figure;&lt;br />
Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â  - ylim&lt;br />
Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â  - xlim&lt;br />
Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â  - clim&lt;br />
Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â  - title&lt;br />
Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â  - fig_size&lt;br />
Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â  - ylabel&lt;br />
&lt;br />
&lt;b>Args:&lt;/b>&lt;br />
Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â  x (xr.Variable): The variable contain the x axis information.&lt;br />
Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â  y (xr.Variable): The variable contain the y axis information.&lt;br />
Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â  data (xr.DataArray): the DataArray a user wishes to plot.&lt;br />
Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â  cmap (matplotlib.cm): Matplotlib color map.&lt;br />
Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â  plot_info (Dict): Dict containing all the required information for setting the figure.&lt;br />
&lt;br />&lt;/p>
&lt;/blockquote>
&lt;h5 id="coastplot_cartopy">Coast.plot_cartopy()&lt;/h5>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">
&lt;span style="color:#204a87;font-weight:bold">def&lt;/span> &lt;span style="color:#000">Coast&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">plot_cartopy&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#3465a4">self&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">var&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">plot_var&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">params&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">time_counter&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">0&lt;/span>&lt;span style="color:#000;font-weight:bold">):&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;blockquote>
&lt;p>&lt;br />
Plot cartopy.&lt;br />
&lt;br />&lt;/p>
&lt;/blockquote>
&lt;h5 id="coastplot_movie">Coast.plot_movie()&lt;/h5>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">
&lt;span style="color:#204a87;font-weight:bold">def&lt;/span> &lt;span style="color:#000">Coast&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">plot_movie&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#3465a4">self&lt;/span>&lt;span style="color:#000;font-weight:bold">):&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;blockquote>
&lt;p>&lt;br />
Plot movie.&lt;br />
&lt;br />&lt;/p>
&lt;/blockquote></description></item><item><title>Docs: Config_parser</title><link>https://british-oceanographic-data-centre.github.io/COAsT/docs/reference/config_parser/</link><pubDate>Thu, 20 Oct 2022 00:00:00 +0000</pubDate><guid>https://british-oceanographic-data-centre.github.io/COAsT/docs/reference/config_parser/</guid><description>
&lt;h3 id="objects">Objects&lt;/h3>
&lt;p>&lt;a href="#configparser">ConfigParser()&lt;/a>&lt;br />
&lt;a href="#configparser_parse_gridded">ConfigParser._parse_gridded()&lt;/a>&lt;br />
&lt;a href="#configparser_parse_indexed">ConfigParser._parse_indexed()&lt;/a>&lt;br />
&lt;a href="#configparser_get_code_processing_object">ConfigParser._get_code_processing_object()&lt;/a>&lt;br />
&lt;a href="#configparser_get_datafile_object">ConfigParser._get_datafile_object()&lt;/a>&lt;br />&lt;/p>
&lt;p>Config parser.&lt;/p>
&lt;h4 id="configparser">ConfigParser()&lt;/h4>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">&lt;span style="color:#204a87;font-weight:bold">class&lt;/span> &lt;span style="color:#000">ConfigParser&lt;/span>&lt;span style="color:#000;font-weight:bold">():&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;pre>&lt;code>Class for parsing gridded and indexed configuration files.
&lt;/code>&lt;/pre>&lt;h5 id="configparser_parse_gridded">ConfigParser._parse_gridded()&lt;/h5>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">&lt;span style="color:#5c35cc;font-weight:bold">@staticmethod&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">def&lt;/span> &lt;span style="color:#000">ConfigParser&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">_parse_gridded&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">json_content&lt;/span>&lt;span style="color:#000;font-weight:bold">):&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;blockquote>
&lt;p>&lt;br />
Static method to parse Gridded config files.&lt;br />
&lt;br />
&lt;b>Args:&lt;/b>&lt;br />
Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â  json_content (dict): Config file json.&lt;br />
&lt;br />&lt;/p>
&lt;/blockquote>
&lt;h5 id="configparser_parse_indexed">ConfigParser._parse_indexed()&lt;/h5>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">&lt;span style="color:#5c35cc;font-weight:bold">@staticmethod&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">def&lt;/span> &lt;span style="color:#000">ConfigParser&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">_parse_indexed&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">json_content&lt;/span>&lt;span style="color:#000;font-weight:bold">):&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;blockquote>
&lt;p>&lt;br />
Static method to parse Indexed config files.&lt;br />
&lt;br />
&lt;b>Args:&lt;/b>&lt;br />
Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â  json_content (dict): Config file json.&lt;br />
&lt;br />&lt;/p>
&lt;/blockquote>
&lt;h5 id="configparser_get_code_processing_object">ConfigParser._get_code_processing_object()&lt;/h5>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">&lt;span style="color:#5c35cc;font-weight:bold">@staticmethod&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">def&lt;/span> &lt;span style="color:#000">ConfigParser&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">_get_code_processing_object&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">json_content&lt;/span>&lt;span style="color:#000;font-weight:bold">):&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;blockquote>
&lt;p>&lt;br />
Static method to convert static_variables configs into objects.&lt;br />
&lt;br />
&lt;b>Args:&lt;/b>&lt;br />
Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â  json_content (dict): Config file json.&lt;br />
&lt;br />&lt;/p>
&lt;/blockquote>
&lt;h5 id="configparser_get_datafile_object">ConfigParser._get_datafile_object()&lt;/h5>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">&lt;span style="color:#5c35cc;font-weight:bold">@staticmethod&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">def&lt;/span> &lt;span style="color:#000">ConfigParser&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">_get_datafile_object&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">json_content&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">data_file_type&lt;/span>&lt;span style="color:#000;font-weight:bold">):&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;blockquote>
&lt;p>&lt;br />
Static method to convert dataset and domain configs into objects.&lt;br />
&lt;br />
&lt;b>Args:&lt;/b>&lt;br />
Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â  json_content (dict): Config file json.&lt;br />
Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â  data_file_type (str): key of datafile type (dataset or domain).&lt;br />
&lt;br />&lt;/p>
&lt;/blockquote></description></item><item><title>Docs: Config_structure</title><link>https://british-oceanographic-data-centre.github.io/COAsT/docs/reference/config_structure/</link><pubDate>Thu, 20 Oct 2022 00:00:00 +0000</pubDate><guid>https://british-oceanographic-data-centre.github.io/COAsT/docs/reference/config_structure/</guid><description>
&lt;h3 id="objects">Objects&lt;/h3>
&lt;p>&lt;a href="#configtypes">ConfigTypes()&lt;/a>&lt;br />
&lt;a href="#configkeys">ConfigKeys()&lt;/a>&lt;br />
&lt;a href="#datafile">DataFile()&lt;/a>&lt;br />
&lt;a href="#codeprocessing">CodeProcessing()&lt;/a>&lt;br />
&lt;a href="#dataset">Dataset()&lt;/a>&lt;br />
&lt;a href="#domain">Domain()&lt;/a>&lt;br />
&lt;a href="#config">Config()&lt;/a>&lt;br />
&lt;a href="#griddedconfig">GriddedConfig()&lt;/a>&lt;br />
&lt;a href="#indexedconfig">IndexedConfig()&lt;/a>&lt;br />&lt;/p>
&lt;p>Classes defining config structure.&lt;/p>
&lt;h4 id="configtypes">ConfigTypes()&lt;/h4>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">&lt;span style="color:#204a87;font-weight:bold">class&lt;/span> &lt;span style="color:#000">ConfigTypes&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">Enum&lt;/span>&lt;span style="color:#000;font-weight:bold">):&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;pre>&lt;code>Enum class containing the valid types for config files.
&lt;/code>&lt;/pre>&lt;h4 id="configkeys">ConfigKeys()&lt;/h4>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">&lt;span style="color:#204a87;font-weight:bold">class&lt;/span> &lt;span style="color:#000">ConfigKeys&lt;/span>&lt;span style="color:#000;font-weight:bold">():&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;pre>&lt;code>Class of constants representing valid keys within configuriation json.
&lt;/code>&lt;/pre>&lt;h4 id="datafile">DataFile()&lt;/h4>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">&lt;span style="color:#204a87;font-weight:bold">class&lt;/span> &lt;span style="color:#000">DataFile&lt;/span>&lt;span style="color:#000;font-weight:bold">():&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;pre>&lt;code>General parent dataclass for holding common config attributes of datafiles.
Args:
variable_map (dict): dict containing mapping for variable names.
dimension_map (dict): dict containing mapping for dimension names.
keep_all_vars (boolean): True if xarray is to retain all data file variables
otherwise False i.e keep only those in the json config file variable mappings.
&lt;/code>&lt;/pre>&lt;h4 id="codeprocessing">CodeProcessing()&lt;/h4>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">&lt;span style="color:#204a87;font-weight:bold">class&lt;/span> &lt;span style="color:#000">CodeProcessing&lt;/span>&lt;span style="color:#000;font-weight:bold">():&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;pre>&lt;code>Dataclass holding config attributes for static variables that might not need changing between model runs
Args:
not_grid_variables (list): A list of variables not belonging to the grid.
delete_variables (list): A list of variables to drop from the dataset.
&lt;/code>&lt;/pre>&lt;h4 id="dataset">Dataset()&lt;/h4>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">&lt;span style="color:#204a87;font-weight:bold">class&lt;/span> &lt;span style="color:#000">Dataset&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">DataFile&lt;/span>&lt;span style="color:#000;font-weight:bold">):&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;pre>&lt;code>Dataclass holding config attributes for Dataset datafiles. Extends DataFile.
Args:
coord_var (list): list of dataset coordinate variables to apply once dataset is loaded
&lt;/code>&lt;/pre>&lt;h4 id="domain">Domain()&lt;/h4>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">&lt;span style="color:#204a87;font-weight:bold">class&lt;/span> &lt;span style="color:#000">Domain&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">DataFile&lt;/span>&lt;span style="color:#000;font-weight:bold">):&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;pre>&lt;code>Dataclass holding config attributes for Domain datafiles. Extends DataFile.
&lt;/code>&lt;/pre>&lt;h4 id="config">Config()&lt;/h4>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">&lt;span style="color:#204a87;font-weight:bold">class&lt;/span> &lt;span style="color:#000">Config&lt;/span>&lt;span style="color:#000;font-weight:bold">():&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;pre>&lt;code>General dataclass for holding common config file attributes.
Args:
dataset (Dataset): Dataset object representing 'dataset' config.
processing_flags (list): List of processing flags.
chunks (dict): dict for dask chunking config. (i.e. {&amp;quot;dim1&amp;quot;:100, &amp;quot;dim2&amp;quot;:100, &amp;quot;dim3&amp;quot;:100}).
type (ConfigTypes): Type of config. Must be a valid ConfigType.
&lt;/code>&lt;/pre>&lt;h4 id="griddedconfig">GriddedConfig()&lt;/h4>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">&lt;span style="color:#204a87;font-weight:bold">class&lt;/span> &lt;span style="color:#000">GriddedConfig&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">Config&lt;/span>&lt;span style="color:#000;font-weight:bold">):&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;pre>&lt;code>Dataclass for holding gridded-config specific attributes. Extends Config.
Args:
type (ConfigTypes): Type of config. Set to ConfigTypes.GRIDDED.
grid_ref (dict): dict containing key:value of grid_ref:[list of grid variables].
domain (Domain): Domain object representing 'domain' config.
&lt;/code>&lt;/pre>&lt;h4 id="indexedconfig">IndexedConfig()&lt;/h4>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">&lt;span style="color:#204a87;font-weight:bold">class&lt;/span> &lt;span style="color:#000">IndexedConfig&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">Config&lt;/span>&lt;span style="color:#000;font-weight:bold">):&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;pre>&lt;code>Dataclass for holding indexed-config specific attributes. Extends Config.
Args:
type (ConfigTypes): Type of config. Set to ConfigTypes.INDEXED.
&lt;/code>&lt;/pre></description></item><item><title>Docs: Contour</title><link>https://british-oceanographic-data-centre.github.io/COAsT/docs/reference/contour/</link><pubDate>Thu, 20 Oct 2022 00:00:00 +0000</pubDate><guid>https://british-oceanographic-data-centre.github.io/COAsT/docs/reference/contour/</guid><description>
&lt;h3 id="objects">Objects&lt;/h3>
&lt;p>&lt;a href="#contour">Contour()&lt;/a>&lt;br />
&lt;a href="#contourget_contours">Contour.get_contours()&lt;/a>&lt;br />
&lt;a href="#contourplot_contour">Contour.plot_contour()&lt;/a>&lt;br />
&lt;a href="#contourget_contour_segment">Contour.get_contour_segment()&lt;/a>&lt;br />
&lt;a href="#contourprocess_contour">Contour.process_contour()&lt;/a>&lt;br />
&lt;a href="#contourgen_z_levels">Contour.gen_z_levels()&lt;/a>&lt;br />
&lt;a href="#contourf">ContourF()&lt;/a>&lt;br />
&lt;a href="#contourfcalc_cross_contour_flow">ContourF.calc_cross_contour_flow()&lt;/a>&lt;br />
&lt;a href="#contourf_update_cross_flow_vars">ContourF._update_cross_flow_vars()&lt;/a>&lt;br />
&lt;a href="#contourf_update_cross_flow_latlon">ContourF._update_cross_flow_latlon()&lt;/a>&lt;br />
&lt;a href="#contourf_pressure_gradient_fpoint2">ContourF._pressure_gradient_fpoint2()&lt;/a>&lt;br />
&lt;a href="#contourfcalc_geostrophic_flow">ContourF.calc_geostrophic_flow()&lt;/a>&lt;br />
&lt;a href="#contourt">ContourT()&lt;/a>&lt;br />
&lt;a href="#contourtconstruct_pressure">ContourT.construct_pressure()&lt;/a>&lt;br />
&lt;a href="#contourtcalc_along_contour_flow">ContourT.calc_along_contour_flow()&lt;/a>&lt;br />
&lt;a href="#contourtcalc_along_contour_flow_2d">ContourT.calc_along_contour_flow_2d()&lt;/a>&lt;br />
&lt;a href="#contourt_update_flow_vars">ContourT._update_flow_vars()&lt;/a>&lt;br />
&lt;a href="#contourt_update_along_flow_latlon">ContourT._update_along_flow_latlon()&lt;/a>&lt;br />&lt;/p>
&lt;p>Contour classes&lt;/p>
&lt;h4 id="contour">Contour()&lt;/h4>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">&lt;span style="color:#204a87;font-weight:bold">class&lt;/span> &lt;span style="color:#000">Contour&lt;/span>&lt;span style="color:#000;font-weight:bold">():&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;pre>&lt;code>None
&lt;/code>&lt;/pre>&lt;h5 id="contourget_contours">Contour.get_contours()&lt;/h5>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">&lt;span style="color:#5c35cc;font-weight:bold">@staticmethod&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">def&lt;/span> &lt;span style="color:#000">Contour&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">get_contours&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">gridded&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">contour_depth&lt;/span>&lt;span style="color:#000;font-weight:bold">):&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;blockquote>
&lt;p>&lt;br />
A method to obtain the continuous isbobath contours within a supplied&lt;br />
gridded domain as a set of y indices and x indices for the model grid.&lt;br />
&lt;br />
Parameters&lt;br />
&amp;mdash;&amp;mdash;&amp;mdash;-&lt;br />
gridded : Coast&lt;br />
Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â  The gridded object containing the dataset with the &amp;lsquo;bathymetry&amp;rsquo; variable&lt;br />
contour_depth : int&lt;br />
Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â  Depth of desired contours&lt;br />
&lt;br />
Returns&lt;br />
&amp;mdash;&amp;mdash;-&lt;br />
List of 2d ndarrays&lt;br />
Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â  Each item of the list contains a different continuous isobath contour as a&lt;br />
&lt;b>Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â  2d ndarray of indicies, i.e. for each list item:&lt;/b>&lt;br />
Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â  contour[:,0] contains the y indices for the contour on the model grid&lt;br />
Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â  contour[:,1] contains the x indices for the contour on the model grid&lt;br />
&lt;br />&lt;/p>
&lt;/blockquote>
&lt;h5 id="contourplot_contour">Contour.plot_contour()&lt;/h5>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">&lt;span style="color:#5c35cc;font-weight:bold">@staticmethod&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">def&lt;/span> &lt;span style="color:#000">Contour&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">plot_contour&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">gridded&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">contour&lt;/span>&lt;span style="color:#000;font-weight:bold">):&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;blockquote>
&lt;p>&lt;br />
Quick plot method to plot a contour over a pcolormesh of the&lt;br />
model bathymetry&lt;br />
&lt;br />
Parameters&lt;br />
&amp;mdash;&amp;mdash;&amp;mdash;-&lt;br />
gridded : Coast&lt;br />
Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â  The gridded object containing the dataset with the &amp;lsquo;bathymetry&amp;rsquo; variable&lt;br />
contour : 2d array&lt;br />
Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â  contour[:,0] contains the y indices for the contour on the model grid&lt;br />
Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â  contour[:,1] contains the x indices for the contour on the model grid&lt;br />
Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â  i.e. contour = np.vstack((y_indices,x_indices)).T&lt;br />
&lt;br />
Returns&lt;br />
&amp;mdash;&amp;mdash;-&lt;br />
None&lt;br />
&lt;br />&lt;/p>
&lt;/blockquote>
&lt;h5 id="contourget_contour_segment">Contour.get_contour_segment()&lt;/h5>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">&lt;span style="color:#5c35cc;font-weight:bold">@staticmethod&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">def&lt;/span> &lt;span style="color:#000">Contour&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">get_contour_segment&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">gridded&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">contour&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">start_coords&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">end_coords&lt;/span>&lt;span style="color:#000;font-weight:bold">):&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;blockquote>
&lt;p>&lt;br />
Method that will take a contour from the list of contours generated by&lt;br />
coast.Contour.get_contours() and trim it to start at supplied (lat,lon)&lt;br />
coordinates and end at supplied (lat, lon) coordinates.&lt;br />
&lt;br />
Parameters&lt;br />
&amp;mdash;&amp;mdash;&amp;mdash;-&lt;br />
gridded : Coast&lt;br />
Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â  The gridded object containing the dataset with the &amp;lsquo;bathymetry&amp;rsquo; variable&lt;br />
contour : numpy.ndarray&lt;br />
Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â  contour[:,0] contains the y indices for the contour on the model grid&lt;br />
Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â  contour[:,1] contains the x indices for the contour on the model grid&lt;br />
start_coords : numpy.ndarray&lt;br />
Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â  1d array containing [latitude,longitude] of the start point of the contour&lt;br />
end_coords : numpy.ndarray&lt;br />
Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â  1d array containing [latitude,longitude] of the end point of the contour&lt;br />
&lt;br />
Returns&lt;br />
&amp;mdash;&amp;mdash;-&lt;br />
y_ind : numpy.ndarray&lt;br />
Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â  y indices of the contour on the model grid&lt;br />
x_ind : numpy.ndarray&lt;br />
Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â  x indices of the contour on the model grid&lt;br />
contour : numpy.ndarray&lt;br />
Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â  For the convenience of plotting using coast.Contour.plot_contour()&lt;br />
Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â  contour[:,0] = y_ind&lt;br />
Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â  contour[:,1] = x_ind&lt;br />
&lt;br />&lt;/p>
&lt;/blockquote>
&lt;h5 id="contourprocess_contour">Contour.process_contour()&lt;/h5>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">
&lt;span style="color:#204a87;font-weight:bold">def&lt;/span> &lt;span style="color:#000">Contour&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">process_contour&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#3465a4">self&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">dataset&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">y_ind&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">x_ind&lt;/span>&lt;span style="color:#000;font-weight:bold">):&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;blockquote>
&lt;p>&lt;br />
Redefine contour so that each point on the contour defined by&lt;br />
y_ind and x_ind is seperated from its neighbours by a single index change&lt;br />
in y or x, but not both.&lt;br />
example: convert y_ind = [10,11], x_ind = [1,2] to y_ind = [10,10], x_ind = [1,2]&lt;br />
or y_ind = [10,11], x_ind = [1,1]&lt;br />
&lt;br />
Parameters&lt;br />
&amp;mdash;&amp;mdash;&amp;mdash;-&lt;br />
dataset : xarray.Dataset&lt;br />
Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â  xarray Dataset from supplied gridded object&lt;br />
y_ind : numpy.ndarray&lt;br />
Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â  1d array of y indices defining the contour on the model grid&lt;br />
x_ind : numpy.ndarray&lt;br />
Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â  1d array of x indices defining the contour on the model grid&lt;br />
&lt;br />
Returns&lt;br />
&amp;mdash;&amp;mdash;-&lt;br />
y_ind : numpy.ndarray&lt;br />
Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â  processed y indices of the contour on the model grid&lt;br />
x_ind : numpy.ndarray&lt;br />
Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â  processed x indices of the contour on the model grid&lt;br />
&lt;br />&lt;/p>
&lt;/blockquote>
&lt;h5 id="contourgen_z_levels">Contour.gen_z_levels()&lt;/h5>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">&lt;span style="color:#5c35cc;font-weight:bold">@staticmethod&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">def&lt;/span> &lt;span style="color:#000">Contour&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">gen_z_levels&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">max_depth&lt;/span>&lt;span style="color:#000;font-weight:bold">):&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;blockquote>
&lt;p>&lt;br />
Generates a pre-defined 1d vertical depth coordinates,&lt;br />
i.e. horizontal z-level vertical coordinates up to a supplied&lt;br />
maximum depth, &amp;lsquo;max_depth'&lt;br />
&lt;br />&lt;/p>
&lt;/blockquote>
&lt;h4 id="contourf">ContourF()&lt;/h4>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">&lt;span style="color:#204a87;font-weight:bold">class&lt;/span> &lt;span style="color:#000">ContourF&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">Contour&lt;/span>&lt;span style="color:#000;font-weight:bold">):&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;pre>&lt;code>Class defining a Contour type on the f-grid, which is a 3d dataset of points between a point A and
a point B defining an isobath contour. The dataset has a time, depth and contour dimension.
The contour dimension defines the points along the contour.
The supplied model f-grid Data is subsetted in its entirety along these dimensions
within Contour_f.data_contour of type xarray.Dataset
Parameters
----------
gridded_f : Coast
f-grid gridded object containing the model dataset.
y_ind : numpy.ndarray
1d array of y indices defining the contour on the model grid
x_ind : numpy.ndarray
1d array of x indices defining the contour on the model grid
depth : int
Depth of contour isobath
&lt;/code>&lt;/pre>&lt;h5 id="contourfcalc_cross_contour_flow">ContourF.calc_cross_contour_flow()&lt;/h5>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">
&lt;span style="color:#204a87;font-weight:bold">def&lt;/span> &lt;span style="color:#000">ContourF&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">calc_cross_contour_flow&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#3465a4">self&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">gridded_u&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">gridded_v&lt;/span>&lt;span style="color:#000;font-weight:bold">):&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;blockquote>
&lt;p>&lt;br />
Method that will calculate the flow across the contour and store this data&lt;br />
within Contour_f.data_cross_flow, which is an xarray.Dataset. Specifically&lt;br />
Contour_f.normal_velocities are the velocities across the contour&lt;br />
(time, depth, position along contour) in m/s&lt;br />
Contour_f.depth_integrated_normal_transport are the depth integrated&lt;br />
volume transports across the contour (time, position along contour) in Sv&lt;br />
&lt;br />
If the time dependent cell thicknesses (e3) on the u and v grids are&lt;br />
present in the gridded_u and gridded_v datasets they will be used, if they&lt;br />
are not then the initial cell thicknesses (e3_0) will be used.&lt;br />
&lt;br />
Parameters&lt;br />
&amp;mdash;&amp;mdash;&amp;mdash;-&lt;br />
gridded_u : Coast&lt;br />
Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â  The gridded object containing the model data on the u-grid.&lt;br />
gridded_v : Coast&lt;br />
Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â  The gridded object containing the model data on the v-grid.&lt;br />
&lt;br />
Returns&lt;br />
&amp;mdash;&amp;mdash;-&lt;br />
None.&lt;br />
&lt;br />&lt;/p>
&lt;/blockquote>
&lt;h5 id="contourf_update_cross_flow_vars">ContourF._update_cross_flow_vars()&lt;/h5>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">
&lt;span style="color:#204a87;font-weight:bold">def&lt;/span> &lt;span style="color:#000">ContourF&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">_update_cross_flow_vars&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#3465a4">self&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">var&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">u_var&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">v_var&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">dr_n&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">dr_s&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">dr_e&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">dr_w&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">pos&lt;/span>&lt;span style="color:#000;font-weight:bold">):&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;blockquote>
&lt;p>&lt;br />
This method will pull variable data at specific points along the contour&lt;br />
from the u and v grid datasets and put them into the self.data_cross_flow dataset&lt;br />
&lt;br />&lt;/p>
&lt;/blockquote>
&lt;h5 id="contourf_update_cross_flow_latlon">ContourF._update_cross_flow_latlon()&lt;/h5>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">
&lt;span style="color:#204a87;font-weight:bold">def&lt;/span> &lt;span style="color:#000">ContourF&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">_update_cross_flow_latlon&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#3465a4">self&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">ds_u&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">ds_v&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">dr_n&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">dr_s&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">dr_e&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">dr_w&lt;/span>&lt;span style="color:#000;font-weight:bold">):&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;blockquote>
&lt;p>&lt;br />
This method will pull the latitude and longitude data at specific points along the&lt;br />
contour from the u and v grid datasets and put them into the self.data_cross_flow dataset&lt;br />
&lt;br />&lt;/p>
&lt;/blockquote>
&lt;h5 id="contourf_pressure_gradient_fpoint2">ContourF._pressure_gradient_fpoint2()&lt;/h5>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">&lt;span style="color:#5c35cc;font-weight:bold">@staticmethod&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">def&lt;/span> &lt;span style="color:#000">ContourF&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">_pressure_gradient_fpoint2&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">ds_t&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">ds_t_j1&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">ds_t_i1&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">ds_t_j1i1&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">r_ind&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">velocity_component&lt;/span>&lt;span style="color:#000;font-weight:bold">):&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;blockquote>
&lt;p>&lt;br />
Calculates the hydrostatic and surface pressure gradients at a set of f-points&lt;br />
along the contour, i.e. at a set of specific values of r_dim (but for all time and depth).&lt;br />
The caller must supply four datasets that contain the variables which define&lt;br />
the hydrostatic and surface pressure at all vertical z_levels and all time&lt;br />
on the t-points around the contour i.e. for a set of f-points on the contour&lt;br />
defined each defined at (j+1/2, i+1/2), we want t-points at (j,i), (j+1,i), (j,i+1), (j+1,i+1),&lt;br />
corresponding to ds_t, ds_t_j1, ds_t_i1, ds_t_j1i1, respectively.&lt;br />
ds_t, ds_t_j1, ds_t_i1, ds_t_j1i1 will have dimensions in time and depth.&lt;br />
&lt;br />
The velocity_component defines whether u or v is normal to the contour&lt;br />
for the segments of the contour. A segment of contour is&lt;br />
defined as being r_dim to r_dim+1 where r_dim is the along contour dimension.&lt;br />
&lt;br />
&lt;br />
Returns&lt;br />
&amp;mdash;&amp;mdash;-&lt;br />
hpg_f : DataArray with dimensions in time and depth and along contour&lt;br />
Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â  hydrostatic pressure gradient at a set of f-points along the contour&lt;br />
Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â  for all time and depth&lt;br />
spg_f : DataArray with dimensions in time and depth and along contour&lt;br />
Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â  surface pressure gradient at a set of f-points along the contour&lt;br />
&lt;br />&lt;/p>
&lt;/blockquote>
&lt;h5 id="contourfcalc_geostrophic_flow">ContourF.calc_geostrophic_flow()&lt;/h5>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">
&lt;span style="color:#204a87;font-weight:bold">def&lt;/span> &lt;span style="color:#000">ContourF&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">calc_geostrophic_flow&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#3465a4">self&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">gridded_t&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">ref_density&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#3465a4">None&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">config_u&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#000">config&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">/&lt;/span>&lt;span style="color:#000">example_nemo_grid_u&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">json&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">config_v&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#000">config&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">/&lt;/span>&lt;span style="color:#000">example_nemo_grid_v&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">json&lt;/span>&lt;span style="color:#000;font-weight:bold">):&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;blockquote>
&lt;p>&lt;br />
This method will calculate the geostrophic velocity and volume transport&lt;br />
(due to the geostrophic current) across the contour.&lt;br />
&lt;b>Four variables are added to the Contour.data_cross_flow dataset:&lt;/b>&lt;br />&lt;/p>
&lt;ol>
&lt;li>normal_velocity_hpgÂ Â Â Â Â Â Â Â Â Â Â Â Â Â Â  (t_dim, depth_z_levels, r_dim)&lt;br />
This is the velocity due to the hydrostatic pressure gradient&lt;br />&lt;/li>
&lt;li>normal_velocity_spgÂ Â Â Â Â Â Â Â Â Â Â Â Â Â Â  (t_dim, r_dim)&lt;br />
This is the velocity due to the surface pressure gradient&lt;br />&lt;/li>
&lt;li>transport_across_AB_hpg (t_dim, r_dim)&lt;br />
This is the volume transport due to the hydrostatic pressure gradient&lt;br />&lt;/li>
&lt;li>transport_across_AB_spg (t_dim, r_dim&lt;br />
This is the volume transport due to the surface pressure gradient&lt;br />
&lt;br />
This implementation works by regridding vertically onto horizontal z_levels in order&lt;br />
to perform the horizontal gradients. Currently s_level depths are&lt;br />
assumed fixed at their initial depths, i.e. at time zero.&lt;br />
&lt;br />
Requirements: The gridded t-grid dataset, gridded_t, must contain the sea surface height,&lt;br />
Practical Salinity and the Potential Temperature variables. The depth_0&lt;br />
field must also be supplied. The GSW package is used to calculate&lt;br />
The Absolute Pressure, Absolute Salinity and Conservate Temperature.&lt;br />
&lt;br />
Parameters&lt;br />
&amp;mdash;&amp;mdash;&amp;mdash;-&lt;br />
gridded_t : Coast&lt;br />
Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â  This is the gridded model data on the t-grid for the entire domain.&lt;br />
ref_density : TYPE, optional&lt;br />
Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â  reference density value. If not supplied a mean in time, depth and&lt;br />
Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â  along the contour will be used as the mean reference value.&lt;br />
config_u : file&lt;br />
Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â  configuration file for u-grid object&lt;br />
config_v : file&lt;br />
Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â  configuration file for v-grid object&lt;br />
&lt;br />
Returns&lt;br />
&amp;mdash;&amp;mdash;-&lt;br />
None.&lt;br />
&lt;br />&lt;/li>
&lt;/ol>
&lt;/blockquote>
&lt;h4 id="contourt">ContourT()&lt;/h4>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">&lt;span style="color:#204a87;font-weight:bold">class&lt;/span> &lt;span style="color:#000">ContourT&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">Contour&lt;/span>&lt;span style="color:#000;font-weight:bold">):&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;pre>&lt;code>Class defining a Contour type on the t-grid, which is a 3d dataset of points between a point A and
a point B defining an isobath contour. The dataset has a time, depth and contour dimension.
The contour dimension defines the points along the contour.
The supplied model t-grid Data is subsetted in its entirety along these dimensions and
calculations can be performed on this dataset.
Parameters
----------
gridded_t : Coast
t-grid gridded object containing the model dataset.
y_ind : numpy.ndarray
1d array of y indices defining the contour on the model grid
x_ind : numpy.ndarray
1d array of x indices defining the contour on the model grid
depth : int
Depth of contour isobath
&lt;/code>&lt;/pre>&lt;h5 id="contourtconstruct_pressure">ContourT.construct_pressure()&lt;/h5>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">
&lt;span style="color:#204a87;font-weight:bold">def&lt;/span> &lt;span style="color:#000">ContourT&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">construct_pressure&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#3465a4">self&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">ref_density&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#3465a4">None&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">z_levels&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#3465a4">None&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">extrapolate&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#3465a4">False&lt;/span>&lt;span style="color:#000;font-weight:bold">):&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;blockquote>
&lt;p>&lt;br />
Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â  This method is for calculating the hydrostatic and surface pressure fields&lt;br />
Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â  on horizontal levels in the vertical (z-levels). The motivation&lt;br />
Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â  is to enable the calculation of horizontal gradients; however,&lt;br />
Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â  the variables can quite easily be interpolated onto the original&lt;br />
Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â  vertical grid.&lt;br />
&lt;br />
Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â  Requirements: The object&amp;rsquo;s t-grid dataset must contain the sea surface height,&lt;br />
Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â  Practical Salinity and the Potential Temperature variables.&lt;br />
Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â  The GSW package is used to calculate the Absolute Pressure,&lt;br />
Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â  Absolute Salinity and Conservate Temperature.&lt;br />
&lt;br />
Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â  Three new variables (density, hydrostatic pressure, surface pressure)&lt;br />
&lt;b>Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â  are created and added to the Contour_t.data_contour dataset:&lt;/b>&lt;br />
Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â  Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â  density_zlevelsÂ Â Â Â Â Â Â Â Â Â Â Â Â Â Â  (t_dim, depth_z_levels, r_dim)&lt;br />
Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â  Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â  pressure_h_zlevelsÂ Â Â Â Â Â Â Â Â Â Â Â Â Â Â  (t_dim, depth_z_levels, r_dim)&lt;br />
Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â  Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â  pressure_sÂ Â Â Â Â Â Â Â Â Â Â Â Â Â Â  Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â  Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â  (t_dim, r_dim)&lt;br />
&lt;br />
Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â  Note that density is constructed using the EOS10&lt;br />
Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â  equation of state.&lt;br />
&lt;br />
Parameters&lt;br />
&amp;mdash;&amp;mdash;&amp;mdash;-&lt;br />
ref_density: float&lt;br />
Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â  reference density value, if None, then the Contour mean across time,&lt;br />
Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â  depth and along contour will be used.&lt;br />
z_levels : (optional) numpy array&lt;br />
Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â  1d array that defines the depths to interpolate the density and pressure&lt;br />
Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â  on to.&lt;br />
extrapolate : boolean, default False&lt;br />
Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â  If true the variables are extrapolated to the deepest z_level, if false,&lt;br />
Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â  values below the bathymetry are set to NaN&lt;br />
Returns&lt;br />
&amp;mdash;&amp;mdash;-&lt;br />
None.&lt;br />
&lt;br />&lt;/p>
&lt;/blockquote>
&lt;h5 id="contourtcalc_along_contour_flow">ContourT.calc_along_contour_flow()&lt;/h5>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">
&lt;span style="color:#204a87;font-weight:bold">def&lt;/span> &lt;span style="color:#000">ContourT&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">calc_along_contour_flow&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#3465a4">self&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">gridded_u&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">gridded_v&lt;/span>&lt;span style="color:#000;font-weight:bold">):&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;blockquote>
&lt;p>&lt;br />
Function that will calculate the flow along the contour and store this data&lt;br />
within Contour_t.data_along_flow, which is an xarray.Dataset. Specifically&lt;br />
Contour_t.data_along_flow.velocities are the velocities along the contour with dimensions&lt;br />
(t_dim, z_dim, r_dim), where r_dim is the dimension along the contour.&lt;br />
Contour_t.data_along_flow.transport are the velocities along the contour multiplied by the&lt;br />
thickness of the cell (velocity * e3) with dimensions&lt;br />
(t_dim, z_dim, r_dim).&lt;br />
&lt;br />
If the time dependent cell thicknesses (e3) on the u and v grids are&lt;br />
present in the gridded_u and gridded_v datasets they will be used, if they&lt;br />
are not then the initial cell thicknesses (e3_0) will be used.&lt;br />
&lt;br />
Parameters&lt;br />
&amp;mdash;&amp;mdash;&amp;mdash;-&lt;br />
gridded_u : Coast&lt;br />
Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â  The nemo object containing the model data on the u-grid.&lt;br />
gridded_v : Coast&lt;br />
Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â  The nemo object containing the model data on the v-grid.&lt;br />
&lt;br />
Returns&lt;br />
&amp;mdash;&amp;mdash;-&lt;br />
None.&lt;br />
&lt;br />&lt;/p>
&lt;/blockquote>
&lt;h5 id="contourtcalc_along_contour_flow_2d">ContourT.calc_along_contour_flow_2d()&lt;/h5>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">
&lt;span style="color:#204a87;font-weight:bold">def&lt;/span> &lt;span style="color:#000">ContourT&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">calc_along_contour_flow_2d&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#3465a4">self&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">gridded_u&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">gridded_v&lt;/span>&lt;span style="color:#000;font-weight:bold">):&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;blockquote>
&lt;p>&lt;br />
Function that will calculate the 2d flow (no vertical dimension&lt;br />
along the contour and store this data within Contour_t.data_along_flow,&lt;br />
which is an xarray.Dataset. Contour_t.data_along_flow.velocities are&lt;br />
the velocities along the contour with dimensions (t_dim, r_dim),&lt;br />
where r_dim is the dimension along the contour. e3 and&lt;br />
e3_0 are interpreted to be the water column thicknesses and&lt;br />
are included in the dataset as Contour_t.data_along_flow.e3 and&lt;br />
Contour_t.data_along_flow.e3_0&lt;br />
&lt;br />
Parameters&lt;br />
&amp;mdash;&amp;mdash;&amp;mdash;-&lt;br />
gridded_u : Coast&lt;br />
Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â  The nemo object containing the model data on the u-grid.&lt;br />
gridded_v : Coast&lt;br />
Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â  The nemo object containing the model data on the v-grid.&lt;br />
&lt;br />
Returns&lt;br />
&amp;mdash;&amp;mdash;-&lt;br />
None.&lt;br />
&lt;br />&lt;/p>
&lt;/blockquote>
&lt;h5 id="contourt_update_flow_vars">ContourT._update_flow_vars()&lt;/h5>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">
&lt;span style="color:#204a87;font-weight:bold">def&lt;/span> &lt;span style="color:#000">ContourT&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">_update_flow_vars&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#3465a4">self&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">var&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">u_var&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">v_var&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">dr_n&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">dr_s&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">dr_e&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">dr_w&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">pos&lt;/span>&lt;span style="color:#000;font-weight:bold">):&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;blockquote>
&lt;p>&lt;br />
This method will pull variable data at specific points along the contour&lt;br />
from the u and v grid datasets and put them into the self.data_along_flow dataset&lt;br />
&lt;br />&lt;/p>
&lt;/blockquote>
&lt;h5 id="contourt_update_along_flow_latlon">ContourT._update_along_flow_latlon()&lt;/h5>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">
&lt;span style="color:#204a87;font-weight:bold">def&lt;/span> &lt;span style="color:#000">ContourT&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">_update_along_flow_latlon&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#3465a4">self&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">ds_u&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">ds_v&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">dr_n&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">dr_s&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">dr_e&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">dr_w&lt;/span>&lt;span style="color:#000;font-weight:bold">):&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;blockquote>
&lt;p>&lt;br />
This method will pull latitude and longitude data at specific points along the&lt;br />
contour from the u and v grid datasets and put them into the self.data_along_flow dataset&lt;br />
&lt;br />&lt;/p>
&lt;/blockquote></description></item><item><title>Docs: Copernicus</title><link>https://british-oceanographic-data-centre.github.io/COAsT/docs/reference/copernicus/</link><pubDate>Thu, 20 Oct 2022 00:00:00 +0000</pubDate><guid>https://british-oceanographic-data-centre.github.io/COAsT/docs/reference/copernicus/</guid><description>
&lt;h3 id="objects">Objects&lt;/h3>
&lt;p>&lt;a href="#copernicusbase">CopernicusBase()&lt;/a>&lt;br />
&lt;a href="#copernicusbaseget_url">CopernicusBase.get_url()&lt;/a>&lt;br />
&lt;a href="#product">Product()&lt;/a>&lt;br />
&lt;a href="#productfrom_copernicus">Product.from_copernicus()&lt;/a>&lt;br />
&lt;a href="#copernicus">Copernicus()&lt;/a>&lt;br />
&lt;a href="#copernicusget_product">Copernicus.get_product()&lt;/a>&lt;br />&lt;/p>
&lt;p>Functionality for accessing Copernicus datasets via OPeNDAP.&lt;/p>
&lt;h4 id="copernicusbase">CopernicusBase()&lt;/h4>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">&lt;span style="color:#204a87;font-weight:bold">class&lt;/span> &lt;span style="color:#000">CopernicusBase&lt;/span>&lt;span style="color:#000;font-weight:bold">():&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;pre>&lt;code>Information required for accessing Copernicus datasets via OPeNDAP.
&lt;/code>&lt;/pre>&lt;h5 id="copernicusbaseget_url">CopernicusBase.get_url()&lt;/h5>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">
&lt;span style="color:#204a87;font-weight:bold">def&lt;/span> &lt;span style="color:#000">CopernicusBase&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">get_url&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#3465a4">self&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">product_id&lt;/span>&lt;span style="color:#000;font-weight:bold">):&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;blockquote>
&lt;p>&lt;br />
Get the URL required to access a Copernicus OPeNDAP dataset.&lt;br />
&lt;br />
&lt;b>Args:&lt;/b>&lt;br />
Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â  product_id: The product ID belonging to the chosen dataset.&lt;br />
&lt;br />
&lt;b>Returns:&lt;/b>&lt;br />
Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â  The constructed URL.&lt;br />
&lt;br />&lt;/p>
&lt;/blockquote>
&lt;h4 id="product">Product()&lt;/h4>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">&lt;span style="color:#204a87;font-weight:bold">class&lt;/span> &lt;span style="color:#000">Product&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">OpendapInfo&lt;/span>&lt;span style="color:#000;font-weight:bold">):&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;pre>&lt;code>Information required to access and stream data from a Copernicus product.
&lt;/code>&lt;/pre>&lt;h5 id="productfrom_copernicus">Product.from_copernicus()&lt;/h5>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">&lt;span style="color:#5c35cc;font-weight:bold">@classmethod&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">def&lt;/span> &lt;span style="color:#000">Product&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">from_copernicus&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#3465a4">cls&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">product_id&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">copernicus&lt;/span>&lt;span style="color:#000;font-weight:bold">):&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;blockquote>
&lt;p>&lt;br />
Instantiate a Product using Copernicus information and a specific product ID.&lt;br />
&lt;br />
&lt;b>Args:&lt;/b>&lt;br />
Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â  product_id: The product ID of the chosen Copernicus OPeNDAP dataset.&lt;br />
Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â  copernicus: A previously instantiated Copernicus info object.&lt;br />
&lt;br />
&lt;b>Returns:&lt;/b>&lt;br />
Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â  An instantiated Product accessor.&lt;br />
&lt;br />&lt;/p>
&lt;/blockquote>
&lt;h4 id="copernicus">Copernicus()&lt;/h4>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">&lt;span style="color:#204a87;font-weight:bold">class&lt;/span> &lt;span style="color:#000">Copernicus&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">CopernicusBase&lt;/span>&lt;span style="color:#000;font-weight:bold">):&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;pre>&lt;code>An object for accessing Copernicus products via OPeNDAP.
&lt;/code>&lt;/pre>&lt;h5 id="copernicusget_product">Copernicus.get_product()&lt;/h5>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">
&lt;span style="color:#204a87;font-weight:bold">def&lt;/span> &lt;span style="color:#000">Copernicus&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">get_product&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#3465a4">self&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">product_id&lt;/span>&lt;span style="color:#000;font-weight:bold">):&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;blockquote>
&lt;p>&lt;br />
Instantiate a Product related to a specific product ID.&lt;br />
&lt;br />
&lt;b>Args:&lt;/b>&lt;br />
Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â  product_id: The product ID of the chosen Copernicus OPeNDAP dataset.&lt;br />
&lt;br />
&lt;b>Returns:&lt;/b>&lt;br />
Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â  The instantiated Product accessor.&lt;br />
&lt;br />&lt;/p>
&lt;/blockquote></description></item><item><title>Docs: Crps_util</title><link>https://british-oceanographic-data-centre.github.io/COAsT/docs/reference/crps_util/</link><pubDate>Thu, 20 Oct 2022 00:00:00 +0000</pubDate><guid>https://british-oceanographic-data-centre.github.io/COAsT/docs/reference/crps_util/</guid><description>
&lt;h3 id="objects">Objects&lt;/h3>
&lt;p>&lt;a href="#crps_empirical">crps_empirical()&lt;/a>&lt;br />
&lt;a href="#crps_empiricalcalc">crps_empirical.calc()&lt;/a>&lt;br />
&lt;a href="#crps_empirical_loop">crps_empirical_loop()&lt;/a>&lt;br />
&lt;a href="#crps_empirical_loopcalc">crps_empirical_loop.calc()&lt;/a>&lt;br />
&lt;a href="#crps_sonf_fixed">crps_sonf_fixed()&lt;/a>&lt;br />
&lt;a href="#crps_sonf_moving">crps_sonf_moving()&lt;/a>&lt;br />&lt;/p>
&lt;p>Python definitions used to aid in the calculation of Continuous Ranked
Probability Score.
&lt;em>Methods Overview&lt;/em>
-&amp;gt; crps_sonf_fixed(): Single obs neighbourhood forecast CRPS for fixed obs
-&amp;gt; crps_song_moving(): Same as above for moving obs&lt;/p>
&lt;h4 id="crps_empirical">crps_empirical()&lt;/h4>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">
&lt;span style="color:#204a87;font-weight:bold">def&lt;/span> &lt;span style="color:#000">crps_empirical&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">sample&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">obs&lt;/span>&lt;span style="color:#000;font-weight:bold">):&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;blockquote>
&lt;p>&lt;br />
Calculates CRPS for a single observations against a sample of values.&lt;br />
&lt;br />
This sample of values may be an ensemble of model forecasts or a model&lt;br />
neighbourhood. This is a comparison of a Heaviside function defined by&lt;br />
the observation value and an Empirical Distribution Function (EDF)&lt;br />
defined by the sample of values. This sample is sorted to create the&lt;br />
EDF.The calculation method is that outlined by Hersbach et al. (2000).&lt;br />
Each member of a supplied sample is weighted equally.&lt;br />
&lt;br />
&lt;b>Args:&lt;/b>&lt;br />
Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â  sample (array): Array of points (ensemble or neighbourhood)&lt;br />
Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â  obs (float): A single &amp;lsquo;observation&amp;rsquo; value which to compare against&lt;br />
Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â  Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â  Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â  Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â  sample CDF.&lt;br />
&lt;b>Returns:&lt;/b>&lt;br />
Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â  np.ndarray: A single CRPS value.&lt;br />
&lt;br />&lt;/p>
&lt;/blockquote>
&lt;h5 id="crps_empiricalcalc">crps_empirical.calc()&lt;/h5>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">
&lt;span style="color:#204a87;font-weight:bold">def&lt;/span> &lt;span style="color:#000">crps_empirical&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">calc&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">alpha&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">beta&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">p&lt;/span>&lt;span style="color:#000;font-weight:bold">):&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;blockquote>
&lt;p>&lt;br />
None&lt;br />
&lt;br />&lt;/p>
&lt;/blockquote>
&lt;h4 id="crps_empirical_loop">crps_empirical_loop()&lt;/h4>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">
&lt;span style="color:#204a87;font-weight:bold">def&lt;/span> &lt;span style="color:#000">crps_empirical_loop&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">sample&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">obs&lt;/span>&lt;span style="color:#000;font-weight:bold">):&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;blockquote>
&lt;p>&lt;br />
Like crps_empirical, however a loop is used instead of numpy&lt;br />
boolean indexing. For large samples, will be slower but consume less&lt;br />
memory.&lt;br />
&lt;br />
&lt;b>Args:&lt;/b>&lt;br />
Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â  sample (array): Array of points (ensemble or neighbourhood)&lt;br />
Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â  obs (float): A single &amp;lsquo;observation&amp;rsquo; value which to compare against&lt;br />
Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â  Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â  Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â  Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â  sample CDF.&lt;br />
&lt;b>Returns:&lt;/b>&lt;br />
Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â  float: A single CRPS integral value.&lt;br />
&lt;br />&lt;/p>
&lt;/blockquote>
&lt;h5 id="crps_empirical_loopcalc">crps_empirical_loop.calc()&lt;/h5>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">
&lt;span style="color:#204a87;font-weight:bold">def&lt;/span> &lt;span style="color:#000">crps_empirical_loop&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">calc&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">alpha&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">beta&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">p&lt;/span>&lt;span style="color:#000;font-weight:bold">):&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;blockquote>
&lt;p>&lt;br />
None&lt;br />
&lt;br />&lt;/p>
&lt;/blockquote>
&lt;h4 id="crps_sonf_fixed">crps_sonf_fixed()&lt;/h4>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">
&lt;span style="color:#204a87;font-weight:bold">def&lt;/span> &lt;span style="color:#000">crps_sonf_fixed&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">mod_array&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">obs_lon&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">obs_lat&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">obs_var&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">obs_time&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">nh_radius&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">time_interp&lt;/span>&lt;span style="color:#000;font-weight:bold">):&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;blockquote>
&lt;p>&lt;br />
Single-observation neighbourhood forecast CRPS for a time series at a fixed observation location.&lt;br />
&lt;br />
Handles the calculation of single-observation neighbourhood forecast CRPS for a time series at a fixed observation location.&lt;br />
Differs from crps_sonf_moving in that it only need calculate a model neighbourhood once.&lt;br />
&lt;br />
&lt;b>Args:&lt;/b>&lt;br />
Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â  mod_array (xr.DataArray): DataArray from a Model Dataset.&lt;br />
Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â  obs_lon (float): Longitude of fixed observation point.&lt;br />
Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â  obs_lat (float): Latitude of fixed observation point.&lt;br />
Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â  obs_var (np.ndarray): of floatArray of variable values, e.g time series.&lt;br />
Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â  obs_time (np.ndarray): of datetimeArray of times, corresponding to obs_var.&lt;br />
Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â  nh_radius (float): Neighbourhood radius in km.&lt;br />
Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â  time_interp (str): Type of time interpolation to use.&lt;br />
&lt;br />
&lt;b>Returns:&lt;/b>&lt;br />
Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â  Tuple[np.ndarray, np.ndarray, np.ndarray]: Array of CRPS values, array containing the number of model points used for&lt;br />
Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â  Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â  each CRPS value and an array of bools indicating where a model neighbourhood&lt;br />
Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â  Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â  contained land.&lt;br />
&lt;br />&lt;/p>
&lt;/blockquote>
&lt;h4 id="crps_sonf_moving">crps_sonf_moving()&lt;/h4>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">
&lt;span style="color:#204a87;font-weight:bold">def&lt;/span> &lt;span style="color:#000">crps_sonf_moving&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">mod_array&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">obs_lon&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">obs_lat&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">obs_var&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">obs_time&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">nh_radius&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">time_interp&lt;/span>&lt;span style="color:#000;font-weight:bold">):&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;blockquote>
&lt;p>&lt;br />
Handles the calculation of single-observation neighbourhood forecast CRPS for a moving observation instrument.&lt;br />
&lt;br />
Differs from crps_sonf_fixed in that latitude and longitude are arrays of locations. Mod_array must contain&lt;br />
dimensions x_dim, y_dim and t_dim and coordinates longitude, latitude, time.&lt;br />
&lt;br />
&lt;b>Args:&lt;/b>&lt;br />
Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â  mod_array (xr.DataArray): DataArray from a Model Dataset.&lt;br />
Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â  obs_lon (np.ndarray): Longitudes of fixed observation point.&lt;br />
Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â  obs_lat (np.ndarray): Latitudes of fixed observation point.&lt;br />
Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â  obs_var (np.ndarray): of floatArray of variable values, e.g time series.&lt;br />
Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â  obs_time: (np.ndarray): of datetimeArray of times, corresponding to obs_var.&lt;br />
Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â  nh_radius (float): Neighbourhood radius in km.&lt;br />
Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â  time_interp (str): Type of time interpolation to use.&lt;br />
&lt;br />
&lt;b>Returns:&lt;/b>&lt;br />
Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â  Tuple[np.ndarray, np.ndarray, np.ndarray]: Array of CRPS values,&lt;br />
Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â  Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â  Array containing the number of model points used for each CRPS value,&lt;br />
Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â  Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â  Array of bools indicating where a model neighbourhood contained land.&lt;br />
&lt;br />&lt;/p>
&lt;/blockquote></description></item><item><title>Docs: Docsy_tools</title><link>https://british-oceanographic-data-centre.github.io/COAsT/docs/reference/docsy_tools/</link><pubDate>Thu, 20 Oct 2022 00:00:00 +0000</pubDate><guid>https://british-oceanographic-data-centre.github.io/COAsT/docs/reference/docsy_tools/</guid><description>
&lt;h3 id="objects">Objects&lt;/h3>
&lt;p>&lt;a href="#docsytools">DocsyTools()&lt;/a>&lt;br />
&lt;a href="#docsytoolswrite_class_to_markdown">DocsyTools.write_class_to_markdown()&lt;/a>&lt;br />
&lt;a href="#docsytools_method_to_str">DocsyTools._method_to_str()&lt;/a>&lt;br />
&lt;a href="#docsytools_get_list_of_methods">DocsyTools._get_list_of_methods()&lt;/a>&lt;br />&lt;/p>
&lt;p>A class to help with writting markdown.&lt;/p>
&lt;h4 id="docsytools">DocsyTools()&lt;/h4>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">&lt;span style="color:#204a87;font-weight:bold">class&lt;/span> &lt;span style="color:#000">DocsyTools&lt;/span>&lt;span style="color:#000;font-weight:bold">():&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;pre>&lt;code>DocsyTools Class
&lt;/code>&lt;/pre>&lt;h5 id="docsytoolswrite_class_to_markdown">DocsyTools.write_class_to_markdown()&lt;/h5>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">&lt;span style="color:#5c35cc;font-weight:bold">@classmethod&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">def&lt;/span> &lt;span style="color:#000">DocsyTools&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">write_class_to_markdown&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#3465a4">cls&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">class_to_write&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">fn_out&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">method_to_omit&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#000">unknown&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">omit_private_methods&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#3465a4">True&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">omit_parent_methods&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#3465a4">True&lt;/span>&lt;span style="color:#000;font-weight:bold">):&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;blockquote>
&lt;p>&lt;br />
None&lt;br />
&lt;br />&lt;/p>
&lt;/blockquote>
&lt;h5 id="docsytools_method_to_str">DocsyTools._method_to_str()&lt;/h5>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">&lt;span style="color:#5c35cc;font-weight:bold">@classmethod&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">def&lt;/span> &lt;span style="color:#000">DocsyTools&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">_method_to_str&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#3465a4">cls&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">method_name&lt;/span>&lt;span style="color:#000;font-weight:bold">):&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;blockquote>
&lt;p>&lt;br />
None&lt;br />
&lt;br />&lt;/p>
&lt;/blockquote>
&lt;h5 id="docsytools_get_list_of_methods">DocsyTools._get_list_of_methods()&lt;/h5>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">&lt;span style="color:#5c35cc;font-weight:bold">@classmethod&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">def&lt;/span> &lt;span style="color:#000">DocsyTools&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">_get_list_of_methods&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#3465a4">cls&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">class_to_search&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">methods_to_omit&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#000">unknown&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">omit_private_methods&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#3465a4">True&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">omit_parent_methods&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#3465a4">True&lt;/span>&lt;span style="color:#000;font-weight:bold">):&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;blockquote>
&lt;p>&lt;br />
Method get a list of methods inside a provided COAsT class, with some other options.&lt;br />
&lt;br />
&lt;b>Args:&lt;/b>&lt;br />
Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â  class_to_search (Type): Class imported from COAsT (e.g. from coast import Profile)&lt;br />
Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â  methods_to_omit (List): List of method strings to omit from the output. The default is [].&lt;br />
Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â  omit_private_methods (bool): If true, omit methods beginning with &amp;ldquo;_&amp;quot;. The default is True.&lt;br />
Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â  omit_parent_methods (bool): If true, omit methods in any parent/ancestor class. The default is True.&lt;br />
&lt;br />
&lt;b>Returns:&lt;/b>&lt;br />
Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â  List[str]: List of strings denoting method names.&lt;br />
&lt;br />&lt;/p>
&lt;/blockquote></description></item><item><title>Docs: Eof</title><link>https://british-oceanographic-data-centre.github.io/COAsT/docs/reference/eof/</link><pubDate>Thu, 20 Oct 2022 00:00:00 +0000</pubDate><guid>https://british-oceanographic-data-centre.github.io/COAsT/docs/reference/eof/</guid><description>
&lt;h3 id="objects">Objects&lt;/h3>
&lt;p>&lt;a href="#compute_eofs">compute_eofs()&lt;/a>&lt;br />
&lt;a href="#compute_hilbert_eofs">compute_hilbert_eofs()&lt;/a>&lt;br />
&lt;a href="#_compute">_compute()&lt;/a>&lt;br />&lt;/p>
&lt;p>This is file deals with empirical orthogonal functions.&lt;/p>
&lt;h4 id="compute_eofs">compute_eofs()&lt;/h4>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">
&lt;span style="color:#204a87;font-weight:bold">def&lt;/span> &lt;span style="color:#000">compute_eofs&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">variable&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">full_matrices&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#3465a4">False&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">time_dim_name&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#000">t_dim&lt;/span>&lt;span style="color:#000;font-weight:bold">):&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;blockquote>
&lt;p>&lt;br />
Compute some numbers is a helper method.&lt;br />
&lt;br />
Computes the Empirical Orthogonal Functions (EOFs) of a variable (time series)&lt;br />
that has 3 dimensions where one is time, i.e. (x,y,time)&lt;br />
&lt;br />
Returns the set of EOF modes, the associated temporal projections and the&lt;br />
variance explained by each mode as DataArrays within an xarray Dataset.&lt;br />
&lt;br />
All-NaN time series, such as those at land points, are handled and ignored;&lt;br />
however, isolated NaNs within a time series, i.e. missing data point, must&lt;br />
be filled before calling the function.&lt;br />
&lt;br />
The variable will be de-meaned in time before the EOFs are computed, normalisation&lt;br />
should be carried out before calling the function if desired. The returned EOFs and&lt;br />
temporal projections are not scaled or normalised.&lt;br />
&lt;br />
Parameters&lt;br />
&amp;mdash;&amp;mdash;&amp;mdash;-&lt;br />
variable : (xarray.DataArray), 3-dimensional variable of size (I,J,T),&lt;br />
containing I&lt;em>J time series&lt;br />
full_matrices : (boolean, default False) if false computes only first K EOFs&lt;br />
where K=min(I&lt;/em>J,T), where T is total number of time points. Setting to True&lt;br />
could demand significant memory.&lt;br />
time_dim_name : (string, default &amp;lsquo;t_dim&amp;rsquo;) the name of the time dimension.&lt;br />
&lt;br />
Returns&lt;br />
&amp;mdash;&amp;mdash;-&lt;br />
dataset : xarray Dataset, containing the EOFs, temporal projections and&lt;br />
variance explained as xarray DataArrays. The relevent coordinates&lt;br />
from the original data variable are also included&lt;br />
&lt;br />&lt;/p>
&lt;/blockquote>
&lt;h4 id="compute_hilbert_eofs">compute_hilbert_eofs()&lt;/h4>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">
&lt;span style="color:#204a87;font-weight:bold">def&lt;/span> &lt;span style="color:#000">compute_hilbert_eofs&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">variable&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">full_matrices&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#3465a4">False&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">time_dim_name&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#000">t_dim&lt;/span>&lt;span style="color:#000;font-weight:bold">):&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;blockquote>
&lt;p>&lt;br />
Compute with hilbert is a helper method.&lt;br />
&lt;br />
Computes the complex Hilbert Empirical Orthogonal Functions (HEOFs) of a&lt;br />
variable (time series) that has 3 dimensions where one is time, i.e. (x,y,time).&lt;br />
See &lt;a href="https://doi.org/10.1002/joc.1499">https://doi.org/10.1002/joc.1499&lt;/a>&lt;br />
&lt;br />
Returns the set of HEOF amplitude and phase modes, the associated temporal&lt;br />
projection amplitudes and phases and the variance explained by each mode&lt;br />
as DataArrays within an xarray Dataset.&lt;br />
&lt;br />
All-NaN time series, such as those at land points, are handled and ignored;&lt;br />
however, isolated NaNs within a time series, i.e. missing data point, must&lt;br />
be filled before calling the function.&lt;br />
&lt;br />
The variable will be de-meaned in time before the EOFs are computed, normalisation&lt;br />
should be carried out before calling the function if desired. The returned EOFs and&lt;br />
temporal projections are not scaled or normalised.&lt;br />
&lt;br />
Parameters&lt;br />
&amp;mdash;&amp;mdash;&amp;mdash;-&lt;br />
variable : (xarray.DataArray), 3-dimensional variable of size (I,J,T),&lt;br />
containing I&lt;em>J time series&lt;br />
full_matrices : (boolean, default False) if false computes only first K EOFs&lt;br />
where K=min(I&lt;/em>J,T), where T is total number of time points.&lt;br />
time_dim_name : (string, default &amp;lsquo;t_dim&amp;rsquo;) the name of the time dimension.&lt;br />
&lt;br />
Returns&lt;br />
&amp;mdash;&amp;mdash;-&lt;br />
dataset : xarray Dataset, containing the EOF amplitudes and phases,&lt;br />
temporal projection amplitude and phases and the variance explained&lt;br />
as xarray DataArrays. The relevent coordinates&lt;br />
from the original data variable are also in the dataset.&lt;br />
&lt;br />&lt;/p>
&lt;/blockquote>
&lt;h4 id="_compute">_compute()&lt;/h4>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">
&lt;span style="color:#204a87;font-weight:bold">def&lt;/span> &lt;span style="color:#000">_compute&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">signal&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">full_matrices&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">active_ind&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">number_points&lt;/span>&lt;span style="color:#000;font-weight:bold">):&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;blockquote>
&lt;p>&lt;br />
Private compute method is a helper method.&lt;br />
&lt;br />
Compute eofs, projections and variance explained using a Singular Value Decomposition&lt;br />
&lt;br />
Parameters&lt;br />
&amp;mdash;&amp;mdash;&amp;mdash;-&lt;br />
signal : (array) the signal&lt;br />
full_matrices : (boolean) whether to return a full or abbreviated SVD&lt;br />
active_ind : (array) indices of points with non-null signal&lt;br />
number_points : (int) number of points in original data set&lt;br />
&lt;br />
Returns&lt;br />
&amp;mdash;&amp;mdash;-&lt;br />
EOFs : (array) the EOFs in 2d form&lt;br />
projections : (array) the projection of the EOFs&lt;br />
variance_explained : (array) variance explained by each mode&lt;br />
mode_count : (int) number of modes computed&lt;br />
&lt;br />&lt;/p>
&lt;/blockquote></description></item><item><title>Docs: Experiments_file_handling</title><link>https://british-oceanographic-data-centre.github.io/COAsT/docs/reference/experiments_file_handling/</link><pubDate>Thu, 20 Oct 2022 00:00:00 +0000</pubDate><guid>https://british-oceanographic-data-centre.github.io/COAsT/docs/reference/experiments_file_handling/</guid><description>
&lt;h3 id="objects">Objects&lt;/h3>
&lt;p>&lt;a href="#experiments">experiments()&lt;/a>&lt;br />
&lt;a href="#nemo_filename_maker">nemo_filename_maker()&lt;/a>&lt;br />&lt;/p>
&lt;p>Set of functions to control basic experiment file handling&lt;/p>
&lt;h4 id="experiments">experiments()&lt;/h4>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">
&lt;span style="color:#204a87;font-weight:bold">def&lt;/span> &lt;span style="color:#000">experiments&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">experiments&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#000">experiments&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">json&lt;/span>&lt;span style="color:#000;font-weight:bold">):&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;blockquote>
&lt;p>&lt;br />
Reads a json formatted files, default name is experiments.json&lt;br />
&lt;b>for lists of:&lt;/b>&lt;br />
experiment names (exp_names)&lt;br />
directory names (dir names)&lt;br />
domain file names (domains)&lt;br />
file names (file_names)&lt;br />
&lt;br />
&lt;br />
Parameters&lt;br />
&amp;mdash;&amp;mdash;&amp;mdash;-&lt;br />
experiments : TYPE, optional&lt;br />
Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â  DESCRIPTION. The default is &amp;lsquo;experiments.json&amp;rsquo;.&lt;br />
&lt;br />
Returns&lt;br />
&amp;mdash;&amp;mdash;-&lt;br />
exp_names,dirs,domains,file_names&lt;br />
&lt;br />&lt;/p>
&lt;/blockquote>
&lt;h4 id="nemo_filename_maker">nemo_filename_maker()&lt;/h4>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">
&lt;span style="color:#204a87;font-weight:bold">def&lt;/span> &lt;span style="color:#000">nemo_filename_maker&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">directory&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">year_start&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">year_stop&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">grid&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#000">T&lt;/span>&lt;span style="color:#000;font-weight:bold">):&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;blockquote>
&lt;p>&lt;br />
Creates a list of NEMO file names from a set of standard templates.&lt;br />
&lt;br />
&lt;b>Args:&lt;/b>&lt;br />
Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â  directory: path to the files'&lt;br />
Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â  year_start: start year&lt;br />
Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â  year_stop: stop year&lt;br />
Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â  grid: NEMO grid type defaults to T&lt;br />
&lt;br />
Returns: a list of possible nemo file names&lt;br />
&lt;br />&lt;/p>
&lt;/blockquote></description></item><item><title>Docs: General_utils</title><link>https://british-oceanographic-data-centre.github.io/COAsT/docs/reference/general_utils/</link><pubDate>Thu, 20 Oct 2022 00:00:00 +0000</pubDate><guid>https://british-oceanographic-data-centre.github.io/COAsT/docs/reference/general_utils/</guid><description>
&lt;h3 id="objects">Objects&lt;/h3>
&lt;p>&lt;a href="#determine_season">determine_season()&lt;/a>&lt;br />
&lt;a href="#subset_indices_by_distance_balltree">subset_indices_by_distance_balltree()&lt;/a>&lt;br />
&lt;a href="#subset_indices_by_distance">subset_indices_by_distance()&lt;/a>&lt;br />
&lt;a href="#compare_angles">compare_angles()&lt;/a>&lt;br />
&lt;a href="#cartesian_to_polar">cartesian_to_polar()&lt;/a>&lt;br />
&lt;a href="#polar_to_cartesian">polar_to_cartesian()&lt;/a>&lt;br />
&lt;a href="#subset_indices_lonlat_box">subset_indices_lonlat_box()&lt;/a>&lt;br />
&lt;a href="#calculate_haversine_distance">calculate_haversine_distance()&lt;/a>&lt;br />
&lt;a href="#remove_indices_by_mask">remove_indices_by_mask()&lt;/a>&lt;br />
&lt;a href="#reinstate_indices_by_mask">reinstate_indices_by_mask()&lt;/a>&lt;br />
&lt;a href="#nearest_indices_2d">nearest_indices_2d()&lt;/a>&lt;br />
&lt;a href="#data_array_time_slice">data_array_time_slice()&lt;/a>&lt;br />
&lt;a href="#day_of_week">day_of_week()&lt;/a>&lt;br />&lt;/p>
&lt;p>A general utility file.&lt;/p>
&lt;h4 id="determine_season">determine_season()&lt;/h4>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">
&lt;span style="color:#204a87;font-weight:bold">def&lt;/span> &lt;span style="color:#000">determine_season&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">t&lt;/span>&lt;span style="color:#000;font-weight:bold">):&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;blockquote>
&lt;p>&lt;br />
Determine season (or array of seasons) from a time (Datetime or xarray)&lt;br />
object. Put in an array of times, get out an array of seasons.&lt;br />
&lt;br />&lt;/p>
&lt;/blockquote>
&lt;h4 id="subset_indices_by_distance_balltree">subset_indices_by_distance_balltree()&lt;/h4>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">
&lt;span style="color:#204a87;font-weight:bold">def&lt;/span> &lt;span style="color:#000">subset_indices_by_distance_balltree&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">longitude&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">latitude&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">centre_lon&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">centre_lat&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">radius&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">mask&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#3465a4">None&lt;/span>&lt;span style="color:#000;font-weight:bold">):&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;blockquote>
&lt;p>&lt;br />
Returns the indices of points that lie within a specified radius (km) of&lt;br />
central latitude and longitudes. This makes use of BallTree.query_radius.&lt;br />
&lt;br />
Parameters&lt;br />
&amp;mdash;&amp;mdash;&amp;mdash;-&lt;br />
longitude : (numpy.ndarray) longitudes in degrees&lt;br />
latitudeÂ Â Â Â Â Â Â Â Â Â Â Â Â Â Â  : (numpy.ndarray) latitudes in degrees&lt;br />
centre_lon : Central longitude. Can be single value or array of values&lt;br />
centre_lat : Central latitude. Can be single value or array of values&lt;br />
radiusÂ Â Â Â Â Â Â Â Â Â Â Â Â Â Â  : (float) Radius in km within which to find indices&lt;br />
maskÂ Â Â Â Â Â Â Â Â Â Â Â Â Â Â  Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â  : (numpy.ndarray) of same dimension as longitude and latitude.&lt;br />
Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â  Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â  Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â  If specified, will mask out points from the routine.&lt;br />
Returns&lt;br />
&amp;mdash;&amp;mdash;-&lt;br />
Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â  Returns an array of indices corresponding to points within radius.&lt;br />
Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â  If more than one central location is specified, this will be a list&lt;br />
Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â  of index arrays. Each element of which corresponds to one centre.&lt;br />
&lt;b>If longitude is 1D:&lt;/b>&lt;br />
Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â  Returns one array of indices per central location&lt;br />
&lt;b>If longitude is 2D:&lt;/b>&lt;br />
Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â  Returns arrays of x and y indices per central location.&lt;br />
Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â  ind_y corresponds to row indices of the original input arrays.&lt;br />
&lt;br />&lt;/p>
&lt;/blockquote>
&lt;h4 id="subset_indices_by_distance">subset_indices_by_distance()&lt;/h4>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">
&lt;span style="color:#204a87;font-weight:bold">def&lt;/span> &lt;span style="color:#000">subset_indices_by_distance&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">longitude&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">latitude&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">centre_lon&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">centre_lat&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">radius&lt;/span>&lt;span style="color:#000;font-weight:bold">):&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;blockquote>
&lt;p>&lt;br />
This method returns a &lt;code>tuple&lt;/code> of indices within the &lt;code>radius&lt;/code> of the&lt;br />
lon/lat point given by the user.&lt;br />
Scikit-learn BallTree is used to obtain indices.&lt;br />
:param longitude: The longitude of the users central point&lt;br />
:param latitude: The latitude of the users central point&lt;br />
:param radius: The haversine distance (in km) from the central point&lt;br />
:return: All indices in a &lt;code>tuple&lt;/code> with the haversine distance of the&lt;br />
Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â  Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â  central point&lt;br />
&lt;br />&lt;/p>
&lt;/blockquote>
&lt;h4 id="compare_angles">compare_angles()&lt;/h4>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">
&lt;span style="color:#204a87;font-weight:bold">def&lt;/span> &lt;span style="color:#000">compare_angles&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">a1&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">a2&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">degrees&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#3465a4">True&lt;/span>&lt;span style="color:#000;font-weight:bold">):&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;blockquote>
&lt;p>&lt;br />&lt;/p>
&lt;h1 id="compares-the-difference-between-two-angles-eg-it-is-2-degrees-betweenbr-">Compares the difference between two angles. e.g. it is 2 degrees between&lt;br />&lt;/h1>
&lt;h1 id="359-and-1-degree-if-degrees--false-then-will-treat-angles-as-radiansbr-">359 and 1 degree. If degrees = False then will treat angles as radians.&lt;br />&lt;/h1>
&lt;p>&lt;br />&lt;/p>
&lt;/blockquote>
&lt;h4 id="cartesian_to_polar">cartesian_to_polar()&lt;/h4>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">
&lt;span style="color:#204a87;font-weight:bold">def&lt;/span> &lt;span style="color:#000">cartesian_to_polar&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">x&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">y&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">degrees&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#3465a4">True&lt;/span>&lt;span style="color:#000;font-weight:bold">):&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;blockquote>
&lt;p>&lt;br />&lt;/p>
&lt;h1 id="conversion-of-cartesian-to-polar-coordinate-systembr-">Conversion of cartesian to polar coordinate system&lt;br />&lt;/h1>
&lt;h1 id="output-theta-is-in-radiansbr-">Output theta is in radians&lt;br />&lt;/h1>
&lt;p>&lt;br />&lt;/p>
&lt;/blockquote>
&lt;h4 id="polar_to_cartesian">polar_to_cartesian()&lt;/h4>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">
&lt;span style="color:#204a87;font-weight:bold">def&lt;/span> &lt;span style="color:#000">polar_to_cartesian&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">r&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">theta&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">degrees&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#3465a4">True&lt;/span>&lt;span style="color:#000;font-weight:bold">):&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;blockquote>
&lt;p>&lt;br />&lt;/p>
&lt;h1 id="conversion-of-polar-to-cartesian-coordinate-systembr-">Conversion of polar to cartesian coordinate system&lt;br />&lt;/h1>
&lt;h1 id="input-theta-must-be-in-radiansbr-">Input theta must be in radians&lt;br />&lt;/h1>
&lt;p>&lt;br />&lt;/p>
&lt;/blockquote>
&lt;h4 id="subset_indices_lonlat_box">subset_indices_lonlat_box()&lt;/h4>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">
&lt;span style="color:#204a87;font-weight:bold">def&lt;/span> &lt;span style="color:#000">subset_indices_lonlat_box&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">array_lon&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">array_lat&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">lon_min&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">lon_max&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">lat_min&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">lat_max&lt;/span>&lt;span style="color:#000;font-weight:bold">):&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;blockquote>
&lt;p>&lt;br />
None&lt;br />
&lt;br />&lt;/p>
&lt;/blockquote>
&lt;h4 id="calculate_haversine_distance">calculate_haversine_distance()&lt;/h4>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">
&lt;span style="color:#204a87;font-weight:bold">def&lt;/span> &lt;span style="color:#000">calculate_haversine_distance&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">lon1&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">lat1&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">lon2&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">lat2&lt;/span>&lt;span style="color:#000;font-weight:bold">):&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;blockquote>
&lt;p>&lt;br />&lt;/p>
&lt;h1 id="estimation-of-geographical-distance-using-the-haversine-functionbr-">Estimation of geographical distance using the Haversine function.&lt;br />&lt;/h1>
&lt;h1 id="input-can-be-single-values-or-1d-arrays-of-locations-thisbr-">Input can be single values or 1D arrays of locations. This&lt;br />&lt;/h1>
&lt;h1 id="does-not-create-a-distance-matrix-but-outputs-another-1d-arraybr-">does NOT create a distance matrix but outputs another 1D array.&lt;br />&lt;/h1>
&lt;h1 id="this-works-for-either-location-vectors-of-equal-length-or-a-single-locbr-">This works for either location vectors of equal length OR a single loc&lt;br />&lt;/h1>
&lt;h1 id="and-an-arbitrary-length-location-vectorbr-">and an arbitrary length location vector.&lt;br />&lt;/h1>
&lt;p>#&lt;br />&lt;/p>
&lt;h1 id="lon1-lat1--locations-1br-">lon1, lat1 :: Location(s) 1.&lt;br />&lt;/h1>
&lt;h1 id="lon2-lat2--locations-2br-">lon2, lat2 :: Location(s) 2.&lt;br />&lt;/h1>
&lt;p>&lt;br />&lt;/p>
&lt;/blockquote>
&lt;h4 id="remove_indices_by_mask">remove_indices_by_mask()&lt;/h4>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">
&lt;span style="color:#204a87;font-weight:bold">def&lt;/span> &lt;span style="color:#000">remove_indices_by_mask&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">array&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">mask&lt;/span>&lt;span style="color:#000;font-weight:bold">):&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;blockquote>
&lt;p>&lt;br />
Removes indices from a 2-dimensional array, A, based on true elements of&lt;br />
mask. A and mask variable should have the same shape.&lt;br />
&lt;br />&lt;/p>
&lt;/blockquote>
&lt;h4 id="reinstate_indices_by_mask">reinstate_indices_by_mask()&lt;/h4>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">
&lt;span style="color:#204a87;font-weight:bold">def&lt;/span> &lt;span style="color:#000">reinstate_indices_by_mask&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">array_removed&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">mask&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">fill_value&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#000">unknown&lt;/span>&lt;span style="color:#000;font-weight:bold">):&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;blockquote>
&lt;p>&lt;br />
Rebuilds a 2D array from a 1D array created using remove_indices_by_mask().&lt;br />
False elements of mask will be populated using array_removed. MAsked&lt;br />
indices will be replaced with fill_value&lt;br />
&lt;br />&lt;/p>
&lt;/blockquote>
&lt;h4 id="nearest_indices_2d">nearest_indices_2d()&lt;/h4>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">
&lt;span style="color:#204a87;font-weight:bold">def&lt;/span> &lt;span style="color:#000">nearest_indices_2d&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">mod_lon&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">mod_lat&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">new_lon&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">new_lat&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">mask&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#3465a4">None&lt;/span>&lt;span style="color:#000;font-weight:bold">):&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;blockquote>
&lt;p>&lt;br />
Obtains the 2 dimensional indices of the nearest model points to specified&lt;br />
lists of longitudes and latitudes. Makes use of sklearn.neighbours&lt;br />
and its BallTree haversine method. Ensure there are no NaNs in&lt;br />
input longitude/latitude arrays (or mask them using &amp;ldquo;mask&amp;rdquo;&amp;quot;)&lt;br />
&lt;br />
Example Usage&lt;br />
&amp;mdash;&amp;mdash;&amp;mdash;-&lt;br />&lt;/p>
&lt;h1 id="get-indices-of-model-points-closest-to-altimetry-pointsbr-">Get indices of model points closest to altimetry points&lt;br />&lt;/h1>
&lt;p>ind_x, ind_y = nemo.nearest_indices(altimetry.dataset.longitude,&lt;br />
Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â  Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â  Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â  Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â  Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â  Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â  Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â  Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â  Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â  altimetry.dataset.latitude)&lt;br />&lt;/p>
&lt;h1 id="nearest-neighbour-interpolation-of-model-dataset-to-these-pointsbr-">Nearest neighbour interpolation of model dataset to these points&lt;br />&lt;/h1>
&lt;p>interpolated = nemo.dataset.isel(x_dim = ind_x, y_dim = ind_y)&lt;br />
&lt;br />
Parameters&lt;br />
&amp;mdash;&amp;mdash;&amp;mdash;-&lt;br />
mod_lon (2D array): Model longitude (degrees) array (2-dimensional)&lt;br />
mod_lat (2D array): Model latitude (degrees) array (2-dimensions)&lt;br />
new_lon (1D array): Array of longitudes (degrees) to compare with model&lt;br />
new_lat (1D array): Array of latitudes (degrees) to compare with model&lt;br />
mask (2D array): Mask array. Where True (or 1), elements of array will&lt;br />
Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â  Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â  Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â  Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â  not be included. For example, use to mask out land in&lt;br />
Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â  Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â  Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â  Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â  case it ends up as the nearest point.&lt;br />
&lt;br />
Returns&lt;br />
&amp;mdash;&amp;mdash;-&lt;br />
Array of x indices, Array of y indices&lt;br />
&lt;br />&lt;/p>
&lt;/blockquote>
&lt;h4 id="data_array_time_slice">data_array_time_slice()&lt;/h4>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">
&lt;span style="color:#204a87;font-weight:bold">def&lt;/span> &lt;span style="color:#000">data_array_time_slice&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">data_array&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">date0&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">date1&lt;/span>&lt;span style="color:#000;font-weight:bold">):&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;blockquote>
&lt;p>&lt;br />
Takes an xr.DataArray object and returns a new object with times&lt;br />
sliced between dates date0 and date1. date0 and date1 may be a string or&lt;br />
datetime type object.&lt;br />
&lt;br />&lt;/p>
&lt;/blockquote>
&lt;h4 id="day_of_week">day_of_week()&lt;/h4>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">
&lt;span style="color:#204a87;font-weight:bold">def&lt;/span> &lt;span style="color:#000">day_of_week&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">date&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#3465a4">None&lt;/span>&lt;span style="color:#000;font-weight:bold">):&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;blockquote>
&lt;p>&lt;br />
Return the day of the week (3 letter str)&lt;br />
&lt;br />&lt;/p>
&lt;/blockquote></description></item><item><title>Docs: Glider</title><link>https://british-oceanographic-data-centre.github.io/COAsT/docs/reference/glider/</link><pubDate>Thu, 20 Oct 2022 00:00:00 +0000</pubDate><guid>https://british-oceanographic-data-centre.github.io/COAsT/docs/reference/glider/</guid><description>
&lt;h3 id="objects">Objects&lt;/h3>
&lt;p>&lt;a href="#glider">Glider()&lt;/a>&lt;br />
&lt;a href="#gliderload_single">Glider.load_single()&lt;/a>&lt;br />&lt;/p>
&lt;p>Glider class&lt;/p>
&lt;h4 id="glider">Glider()&lt;/h4>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">&lt;span style="color:#204a87;font-weight:bold">class&lt;/span> &lt;span style="color:#000">Glider&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">Indexed&lt;/span>&lt;span style="color:#000;font-weight:bold">):&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;pre>&lt;code>Glider class for reading in glider data (netcdf format) into an xarray object.
&lt;/code>&lt;/pre>&lt;h5 id="gliderload_single">Glider.load_single()&lt;/h5>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">
&lt;span style="color:#204a87;font-weight:bold">def&lt;/span> &lt;span style="color:#000">Glider&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">load_single&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#3465a4">self&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">file_path&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">chunks&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#3465a4">None&lt;/span>&lt;span style="color:#000;font-weight:bold">):&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;blockquote>
&lt;p>&lt;br />
Loads a single file into object&amp;rsquo;s dataset variable.&lt;br />
&lt;br />
&lt;b>Args:&lt;/b>&lt;br />
Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â  file_path (str): path to data file&lt;br />
Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â  chunks (dict): chunks&lt;br />
&lt;br />&lt;/p>
&lt;/blockquote></description></item><item><title>Docs: Gridded</title><link>https://british-oceanographic-data-centre.github.io/COAsT/docs/reference/gridded/</link><pubDate>Thu, 20 Oct 2022 00:00:00 +0000</pubDate><guid>https://british-oceanographic-data-centre.github.io/COAsT/docs/reference/gridded/</guid><description>
&lt;h3 id="objects">Objects&lt;/h3>
&lt;p>&lt;a href="#gridded">Gridded()&lt;/a>&lt;br />
&lt;a href="#gridded_setup_grid_obj">Gridded._setup_grid_obj()&lt;/a>&lt;br />
&lt;a href="#griddedmake_lonlat_2d">Gridded.make_lonLat_2d()&lt;/a>&lt;br />
&lt;a href="#griddedset_grid_vars">Gridded.set_grid_vars()&lt;/a>&lt;br />
&lt;a href="#griddedload_domain">Gridded.load_domain()&lt;/a>&lt;br />
&lt;a href="#griddedmerge_domain_into_dataset">Gridded.merge_domain_into_dataset()&lt;/a>&lt;br />
&lt;a href="#griddedset_grid_ref_attr">Gridded.set_grid_ref_attr()&lt;/a>&lt;br />
&lt;a href="#griddedget_contour_complex">Gridded.get_contour_complex()&lt;/a>&lt;br />
&lt;a href="#griddedset_timezero_depths">Gridded.set_timezero_depths()&lt;/a>&lt;br />
&lt;a href="#griddedcalc_bathymetry">Gridded.calc_bathymetry()&lt;/a>&lt;br />
&lt;a href="#griddedsubset_indices">Gridded.subset_indices()&lt;/a>&lt;br />
&lt;a href="#griddedfind_j_i">Gridded.find_j_i()&lt;/a>&lt;br />
&lt;a href="#griddedfind_j_i_list">Gridded.find_j_i_list()&lt;/a>&lt;br />
&lt;a href="#griddedfind_j_i_domain">Gridded.find_j_i_domain()&lt;/a>&lt;br />
&lt;a href="#griddedtransect_indices">Gridded.transect_indices()&lt;/a>&lt;br />
&lt;a href="#griddedinterpolate_in_space">Gridded.interpolate_in_space()&lt;/a>&lt;br />
&lt;a href="#griddedinterpolate_in_time">Gridded.interpolate_in_time()&lt;/a>&lt;br />
&lt;a href="#griddedconstruct_density">Gridded.construct_density()&lt;/a>&lt;br />
&lt;a href="#griddedtrim_domain_size">Gridded.trim_domain_size()&lt;/a>&lt;br />
&lt;a href="#griddedcopy_domain_vars_to_dataset">Gridded.copy_domain_vars_to_dataset()&lt;/a>&lt;br />
&lt;a href="#griddeddifferentiate">Gridded.differentiate()&lt;/a>&lt;br />
&lt;a href="#griddedapply_doodson_x0_filter">Gridded.apply_doodson_x0_filter()&lt;/a>&lt;br />
&lt;a href="#griddedget_e3_from_ssh">Gridded.get_e3_from_ssh()&lt;/a>&lt;br />
&lt;a href="#griddedharmonics_combine">Gridded.harmonics_combine()&lt;/a>&lt;br />
&lt;a href="#griddedharmonics_convert">Gridded.harmonics_convert()&lt;/a>&lt;br />
&lt;a href="#griddedtime_slice">Gridded.time_slice()&lt;/a>&lt;br />
&lt;a href="#griddedcalculate_vertical_mask">Gridded.calculate_vertical_mask()&lt;/a>&lt;br />&lt;/p>
&lt;p>Gridded class&lt;/p>
&lt;h4 id="gridded">Gridded()&lt;/h4>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">&lt;span style="color:#204a87;font-weight:bold">class&lt;/span> &lt;span style="color:#000">Gridded&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">Coast&lt;/span>&lt;span style="color:#000;font-weight:bold">):&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;pre>&lt;code>Words to describe the NEMO class
kwargs -- define addition keyworded arguemts for domain file. E.g. ln_sco=1
if using s-scoord in an old domain file that does not carry this flag.
&lt;/code>&lt;/pre>&lt;h5 id="gridded_setup_grid_obj">Gridded._setup_grid_obj()&lt;/h5>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">
&lt;span style="color:#204a87;font-weight:bold">def&lt;/span> &lt;span style="color:#000">Gridded&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">_setup_grid_obj&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#3465a4">self&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">chunks&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">multiple&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">**&lt;/span>&lt;span style="color:#000">kwargs&lt;/span>&lt;span style="color:#000;font-weight:bold">):&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;blockquote>
&lt;p>&lt;br />
This is a helper method to reduce the size of def __init__&lt;br />
&lt;br />
&lt;b>Args:&lt;/b>&lt;br />
Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â  chunks: This is a setting for xarray as to whether dask (parrell processing) should be on and how it works&lt;br />
Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â  multiple: falg to tell if we are loading one or more files&lt;br />
Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â  **kwargs: pass direct to loaded xarray dataset&lt;br />
&lt;br />&lt;/p>
&lt;/blockquote>
&lt;h5 id="griddedmake_lonlat_2d">Gridded.make_lonLat_2d()&lt;/h5>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">
&lt;span style="color:#204a87;font-weight:bold">def&lt;/span> &lt;span style="color:#000">Gridded&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">make_lonLat_2d&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#3465a4">self&lt;/span>&lt;span style="color:#000;font-weight:bold">):&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;blockquote>
&lt;p>&lt;br />
Expand 1D latitude and longitude variables to 2D.&lt;br />
&lt;br />&lt;/p>
&lt;/blockquote>
&lt;h5 id="griddedset_grid_vars">Gridded.set_grid_vars()&lt;/h5>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">
&lt;span style="color:#204a87;font-weight:bold">def&lt;/span> &lt;span style="color:#000">Gridded&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">set_grid_vars&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#3465a4">self&lt;/span>&lt;span style="color:#000;font-weight:bold">):&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;blockquote>
&lt;p>&lt;br />
Define the variables to map from the domain file to the NEMO obj&lt;br />
&lt;br />&lt;/p>
&lt;/blockquote>
&lt;h5 id="griddedload_domain">Gridded.load_domain()&lt;/h5>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">
&lt;span style="color:#204a87;font-weight:bold">def&lt;/span> &lt;span style="color:#000">Gridded&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">load_domain&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#3465a4">self&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">fn_domain&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">chunks&lt;/span>&lt;span style="color:#000;font-weight:bold">):&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;blockquote>
&lt;p>&lt;br />
Loads domain file and renames dimensions with dim_mapping_domain&lt;br />
&lt;br />&lt;/p>
&lt;/blockquote>
&lt;h5 id="griddedmerge_domain_into_dataset">Gridded.merge_domain_into_dataset()&lt;/h5>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">
&lt;span style="color:#204a87;font-weight:bold">def&lt;/span> &lt;span style="color:#000">Gridded&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">merge_domain_into_dataset&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#3465a4">self&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">dataset_domain&lt;/span>&lt;span style="color:#000;font-weight:bold">):&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;blockquote>
&lt;p>&lt;br />
Merge domain dataset variables into self.dataset, using grid_ref&lt;br />
&lt;br />&lt;/p>
&lt;/blockquote>
&lt;h5 id="griddedset_grid_ref_attr">Gridded.set_grid_ref_attr()&lt;/h5>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">
&lt;span style="color:#204a87;font-weight:bold">def&lt;/span> &lt;span style="color:#000">Gridded&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">set_grid_ref_attr&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#3465a4">self&lt;/span>&lt;span style="color:#000;font-weight:bold">):&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;blockquote>
&lt;p>&lt;br />
None&lt;br />
&lt;br />&lt;/p>
&lt;/blockquote>
&lt;h5 id="griddedget_contour_complex">Gridded.get_contour_complex()&lt;/h5>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">
&lt;span style="color:#204a87;font-weight:bold">def&lt;/span> &lt;span style="color:#000">Gridded&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">get_contour_complex&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#3465a4">self&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">var&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">points_x&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">points_y&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">points_z&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">tolerance&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">0.2&lt;/span>&lt;span style="color:#000;font-weight:bold">):&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;blockquote>
&lt;p>&lt;br />
None&lt;br />
&lt;br />&lt;/p>
&lt;/blockquote>
&lt;h5 id="griddedset_timezero_depths">Gridded.set_timezero_depths()&lt;/h5>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">
&lt;span style="color:#204a87;font-weight:bold">def&lt;/span> &lt;span style="color:#000">Gridded&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">set_timezero_depths&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#3465a4">self&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">dataset_domain&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">calculate_bathymetry&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#3465a4">False&lt;/span>&lt;span style="color:#000;font-weight:bold">):&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;blockquote>
&lt;p>&lt;br />
Calculates the depths at time zero (from the domain_cfg input file)&lt;br />
for the appropriate grid.&lt;br />
The depths are assigned to domain_dataset.depth_0&lt;br />
&lt;br />
&lt;b>Args:&lt;/b>&lt;br />
Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â  dataset_domain: a complex data object.&lt;br />
Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â  calculate_bathymetry: Flag that will either calculate bathymetry (true) or load it from dataset_domain file&lt;br />
Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â  (false).&lt;br />
&lt;br />&lt;/p>
&lt;/blockquote>
&lt;h5 id="griddedcalc_bathymetry">Gridded.calc_bathymetry()&lt;/h5>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">
&lt;span style="color:#204a87;font-weight:bold">def&lt;/span> &lt;span style="color:#000">Gridded&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">calc_bathymetry&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#3465a4">self&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">dataset_domain&lt;/span>&lt;span style="color:#000;font-weight:bold">):&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;blockquote>
&lt;p>&lt;br />
NEMO approach to defining bathymetry by summing scale factors at various&lt;br />
grid locations.&lt;br />
Works with z-coordinates on u- and v- faces where bathymetry is defined&lt;br />
at the top of the cliff, not at the bottom&lt;br />
&lt;br />
&lt;b>Args:&lt;/b>&lt;br />
Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â  dataset_domain: a complex data object.&lt;br />
&lt;br />&lt;/p>
&lt;/blockquote>
&lt;h5 id="griddedsubset_indices">Gridded.subset_indices()&lt;/h5>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">
&lt;span style="color:#204a87;font-weight:bold">def&lt;/span> &lt;span style="color:#000">Gridded&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">subset_indices&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#3465a4">self&lt;/span>&lt;span style="color:#000;font-weight:bold">):&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;blockquote>
&lt;p>&lt;br />
based on transect_indices, this method looks to return all indices between the given points.&lt;br />
This results in a &amp;lsquo;box&amp;rsquo; (Quadrilateral) of indices.&lt;br />
consequently the returned lists may have different lengths.&lt;br />
:param start: A lat/lon pair&lt;br />
:param end: A lat/lon pair&lt;br />
:return: list of y indices, list of x indices,&lt;br />
&lt;br />&lt;/p>
&lt;/blockquote>
&lt;h5 id="griddedfind_j_i">Gridded.find_j_i()&lt;/h5>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">
&lt;span style="color:#204a87;font-weight:bold">def&lt;/span> &lt;span style="color:#000">Gridded&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">find_j_i&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#3465a4">self&lt;/span>&lt;span style="color:#000;font-weight:bold">):&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;blockquote>
&lt;p>&lt;br />
A routine to find the nearest y x coordinates for a given latitude and longitude&lt;br />
Usage: [y,x] = find_j_i(lat=49, lon=-12)&lt;br />
&lt;br />
:param lat: latitude&lt;br />
:param lon: longitude&lt;br />
:return: the y and x coordinates for the NEMO object&amp;rsquo;s grid_ref, i.e. t,u,v,f,w.&lt;br />
&lt;br />&lt;/p>
&lt;/blockquote>
&lt;h5 id="griddedfind_j_i_list">Gridded.find_j_i_list()&lt;/h5>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">
&lt;span style="color:#204a87;font-weight:bold">def&lt;/span> &lt;span style="color:#000">Gridded&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">find_j_i_list&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#3465a4">self&lt;/span>&lt;span style="color:#000;font-weight:bold">):&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;blockquote>
&lt;p>&lt;br />
A routine to find the nearest y x coordinates for a list of latitude and longitude values&lt;br />
Usage: [y,x] = find_j_i(lat=[49,50,51], lon=[-12,-11,10])&lt;br />
&lt;br />
:param lat: latitude&lt;br />
:param lon: longitude&lt;br />
:optional n_nn=1 number of nearest neighbours&lt;br />
:return: the j, i coordinates for the NEMO object&amp;rsquo;s grid_ref, i.e. t,u,v,f,w. and a distance measure&lt;br />
&lt;br />&lt;/p>
&lt;/blockquote>
&lt;h5 id="griddedfind_j_i_domain">Gridded.find_j_i_domain()&lt;/h5>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">
&lt;span style="color:#204a87;font-weight:bold">def&lt;/span> &lt;span style="color:#000">Gridded&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">find_j_i_domain&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#3465a4">self&lt;/span>&lt;span style="color:#000;font-weight:bold">):&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;blockquote>
&lt;p>&lt;br />
A routine to find the nearest y x coordinates for a given latitude and longitude&lt;br />
Usage: [y,x] = find_j_i_domain(lat=49, lon=-12, dataset_domain=dataset_domain)&lt;br />
&lt;br />
:param lat: latitude&lt;br />
:param lon: longitude&lt;br />
:param dataset_domain: dataset domain&lt;br />
:return: the y and x coordinates for the grid_ref variable within the domain file&lt;br />
&lt;br />&lt;/p>
&lt;/blockquote>
&lt;h5 id="griddedtransect_indices">Gridded.transect_indices()&lt;/h5>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">
&lt;span style="color:#204a87;font-weight:bold">def&lt;/span> &lt;span style="color:#000">Gridded&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">transect_indices&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#3465a4">self&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">start&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">end&lt;/span>&lt;span style="color:#000;font-weight:bold">):&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;blockquote>
&lt;p>&lt;br />
This method returns the indices of a simple straight line transect between two&lt;br />
lat lon points defined on the NEMO object&amp;rsquo;s grid_ref, i.e. t,u,v,f,w.&lt;br />
&lt;br />
:type start: tuple A lat/lon pair&lt;br />
:type end: tuple A lat/lon pair&lt;br />
:return: array of y indices, array of x indices, number of indices in transect&lt;br />
&lt;br />&lt;/p>
&lt;/blockquote>
&lt;h5 id="griddedinterpolate_in_space">Gridded.interpolate_in_space()&lt;/h5>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">&lt;span style="color:#5c35cc;font-weight:bold">@staticmethod&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">def&lt;/span> &lt;span style="color:#000">Gridded&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">interpolate_in_space&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">model_array&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">new_lon&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">new_lat&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">mask&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#3465a4">None&lt;/span>&lt;span style="color:#000;font-weight:bold">):&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;blockquote>
&lt;p>&lt;br />
Interpolates a provided xarray.DataArray in space to new longitudes&lt;br />
and latitudes using a nearest neighbour method (BallTree).&lt;br />
&lt;br />
Example Usage&lt;br />
&amp;mdash;&amp;mdash;&amp;mdash;-&lt;br />&lt;/p>
&lt;h1 id="get-an-interpolated-dataarray-for-temperature-onto-two-locationsbr-">Get an interpolated DataArray for temperature onto two locations&lt;br />&lt;/h1>
&lt;p>interpolated = nemo.interpolate_in_space(nemo.dataset.votemper,&lt;br />
Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â  Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â  Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â  Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â  Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â  Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â  Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â  Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â  Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â  Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â  [0,1], [45,46])&lt;br />
Parameters&lt;br />
&amp;mdash;&amp;mdash;&amp;mdash;-&lt;br />
model_array (xr.DataArray): Model variable DataArray to interpolate&lt;br />
new_lons (1Darray): Array of longitudes (degrees) to compare with model&lt;br />
new_lats (1Darray): Array of latitudes (degrees) to compare with model&lt;br />
mask (2D array): Mask array. Where True (or 1), elements of array will&lt;br />
Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â  Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â  Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â  not be included. For example, use to mask out land in&lt;br />
Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â  Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â  Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â  case it ends up as the nearest point.&lt;br />
&lt;br />
Returns&lt;br />
&amp;mdash;&amp;mdash;-&lt;br />
Interpolated DataArray&lt;br />
&lt;br />&lt;/p>
&lt;/blockquote>
&lt;h5 id="griddedinterpolate_in_time">Gridded.interpolate_in_time()&lt;/h5>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">&lt;span style="color:#5c35cc;font-weight:bold">@staticmethod&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">def&lt;/span> &lt;span style="color:#000">Gridded&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">interpolate_in_time&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">model_array&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">new_times&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">interp_method&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#000">nearest&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">extrapolate&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#3465a4">True&lt;/span>&lt;span style="color:#000;font-weight:bold">):&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;blockquote>
&lt;p>&lt;br />
Interpolates a provided xarray.DataArray in time to new python&lt;br />
datetimes using a specified scipy.interpolate method.&lt;br />
&lt;br />
Example Useage&lt;br />
&amp;mdash;&amp;mdash;&amp;mdash;-&lt;br />&lt;/p>
&lt;h1 id="get-an-interpolated-dataarray-for-temperature-onto-altimetry-timesbr-">Get an interpolated DataArray for temperature onto altimetry times&lt;br />&lt;/h1>
&lt;p>new_times = altimetry.dataset.time&lt;br />
interpolated = nemo.interpolate_in_space(nemo.dataset.votemper,&lt;br />
Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â  Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â  Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â  Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â  Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â  Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â  Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â  Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â  Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â  Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â  new_times)&lt;br />
Parameters&lt;br />
&amp;mdash;&amp;mdash;&amp;mdash;-&lt;br />
model_array (xr.DataArray): Model variable DataArray to interpolate&lt;br />
new_times (array): New times to interpolate to (array of datetimes)&lt;br />
interp_method (str): Interpolation method&lt;br />
&lt;br />
Returns&lt;br />
&amp;mdash;&amp;mdash;-&lt;br />
Interpolated DataArray&lt;br />
&lt;br />&lt;/p>
&lt;/blockquote>
&lt;h5 id="griddedconstruct_density">Gridded.construct_density()&lt;/h5>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">
&lt;span style="color:#204a87;font-weight:bold">def&lt;/span> &lt;span style="color:#000">Gridded&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">construct_density&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#3465a4">self&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">eos&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#000">EOS10&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">rhobar&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#3465a4">False&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">Zd_mask&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#000">unknown&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">CT_AS&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#3465a4">False&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">pot_dens&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#3465a4">False&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">Tbar&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#3465a4">True&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">Sbar&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#3465a4">True&lt;/span>&lt;span style="color:#000;font-weight:bold">):&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;blockquote>
&lt;p>&lt;br />
Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â  Constructs the in-situ density using the salinity, temperture and&lt;br />
Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â  depth_0 fields and adds a density attribute to the t-grid dataset&lt;br />
&lt;br />
Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â  Requirements: The supplied t-grid dataset must contain the&lt;br />
Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â  Practical Salinity and the Potential Temperature variables. The depth_0&lt;br />
Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â  field must also be supplied. The GSW package is used to calculate&lt;br />
Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â  The Absolute Pressure, Absolute Salinity and Conservate Temperature.&lt;br />
&lt;br />
Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â  Note that currently density can only be constructed using the EOS10&lt;br />
Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â  equation of state.&lt;br />
&lt;br />
Parameters&lt;br />
&amp;mdash;&amp;mdash;&amp;mdash;-&lt;br />
eos : equation of state, optional&lt;br />
Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â  DESCRIPTION. The default is &amp;lsquo;EOS10&amp;rsquo;.&lt;br />
&lt;br />
rhobar : Calculate density with depth mean T and S&lt;br />
Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â  DESCRIPTION. The default is &amp;lsquo;False&amp;rsquo;.&lt;br />
Zd_mask : Provide a 3D mask for rhobar calculation&lt;br />
Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â  Calculate using calculate_vertical_mask&lt;br />
Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â  DESCRIPTION. The default is empty.&lt;br />
&lt;br />
CT_AS : Conservative Temperature and Absolute Salinity already provided&lt;br />
Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â  DESCRIPTION. The default is &amp;lsquo;False&amp;rsquo;.&lt;br />
pot_dens :Calculation at zero pressure&lt;br />
Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â  DESCRIPTION. The default is &amp;lsquo;False&amp;rsquo;.&lt;br />
Tbar and Sbar : If rhobar is True then these can be switch to False to allow one component to&lt;br />
Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â  Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â  Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â  Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â  remain depth varying. So Tbar=Flase gives temperature component, Sbar=Flase gives Salinity component&lt;br />
Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â  DESCRIPTION. The default is &amp;lsquo;True&amp;rsquo;.&lt;br />
&lt;br />
Returns&lt;br />
&amp;mdash;&amp;mdash;-&lt;br />
None.&lt;br />
adds attribute NEMO.dataset.density&lt;br />
&lt;br />&lt;/p>
&lt;/blockquote>
&lt;h5 id="griddedtrim_domain_size">Gridded.trim_domain_size()&lt;/h5>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">
&lt;span style="color:#204a87;font-weight:bold">def&lt;/span> &lt;span style="color:#000">Gridded&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">trim_domain_size&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#3465a4">self&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">dataset_domain&lt;/span>&lt;span style="color:#000;font-weight:bold">):&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;blockquote>
&lt;p>&lt;br />
Trim the domain variables if the dataset object is a spatial subset&lt;br />
&lt;br />
Note: This breaks if the SW &amp;amp; NW corner values of nav_lat and nav_lon&lt;br />
are masked, as can happen if on land&amp;hellip;&lt;br />
&lt;br />&lt;/p>
&lt;/blockquote>
&lt;h5 id="griddedcopy_domain_vars_to_dataset">Gridded.copy_domain_vars_to_dataset()&lt;/h5>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">
&lt;span style="color:#204a87;font-weight:bold">def&lt;/span> &lt;span style="color:#000">Gridded&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">copy_domain_vars_to_dataset&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#3465a4">self&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">dataset_domain&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">grid_vars&lt;/span>&lt;span style="color:#000;font-weight:bold">):&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;blockquote>
&lt;p>&lt;br />
Map the domain coordinates and metric variables to the dataset object.&lt;br />
Expects the source and target DataArrays to be same sizes.&lt;br />
&lt;br />&lt;/p>
&lt;/blockquote>
&lt;h5 id="griddeddifferentiate">Gridded.differentiate()&lt;/h5>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">
&lt;span style="color:#204a87;font-weight:bold">def&lt;/span> &lt;span style="color:#000">Gridded&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">differentiate&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#3465a4">self&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">in_var_str&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">config_path&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#3465a4">None&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">dim&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#000">z_dim&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">out_var_str&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#3465a4">None&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">out_obj&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#3465a4">None&lt;/span>&lt;span style="color:#000;font-weight:bold">):&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;blockquote>
&lt;p>&lt;br />
Derivatives are computed in x_dim, y_dim, z_dim (or i,j,k) directions&lt;br />
wrt lambda, phi, or z coordinates (with scale factor in metres not degrees).&lt;br />
&lt;br />
Derivatives are calculated using the approach adopted in NEMO,&lt;br />
specifically using the 1st order accurate central difference&lt;br />
approximation. For reference see section 3.1.2 (sec. Discrete operators)&lt;br />
of the NEMO v4 Handbook.&lt;br />
&lt;br />
Currently the method does not accomodate all possible eventualities. It&lt;br />
&lt;b>covers:&lt;/b>&lt;br />&lt;/p>
&lt;ol>
&lt;li>d(grid_t)/dz &amp;ndash;&amp;gt; grid_w&lt;br />
&lt;br />
Returns an object (with the appropriate target grid_ref) containing&lt;br />
derivative (out_var_str) as xr.DataArray&lt;br />
&lt;br />
&lt;b>This is hardwired to expect:&lt;/b>&lt;br />&lt;/li>
&lt;li>depth_0 and e3_0 fields exist&lt;br />&lt;/li>
&lt;li>xr.DataArrays are 4D&lt;br />&lt;/li>
&lt;li>self.filename_domain if out_obj not specified&lt;br />&lt;/li>
&lt;li>If out_obj is not specified, one is built that is the size of&lt;br />
Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â  self.filename_domain. I.e. automatic subsetting of out_obj is not&lt;br />
Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â  supported.&lt;br />
&lt;br />
&lt;b>Example usage:&lt;/b>&lt;br />
&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;ndash;&lt;br />&lt;/li>
&lt;/ol>
&lt;h1 id="initialise-dataarraysbr-">Initialise DataArrays&lt;br />&lt;/h1>
&lt;p>nemo_t = coast.NEMO( fn_data, fn_domain, grid_ref='t-grid&amp;rsquo; )&lt;br />&lt;/p>
&lt;h1 id="compute-dtdzbr-">Compute dT/dz&lt;br />&lt;/h1>
&lt;p>nemo_w_1 = nemo_t.differentiate( &amp;lsquo;temperature&amp;rsquo;, dim='z_dim&amp;rsquo; )&lt;br />
&lt;br />&lt;/p>
&lt;h1 id="for-fz-z-compute-dfdz---1-surface-value-is-set-to-zerobr-">For f(z)=-z. Compute df/dz = -1. Surface value is set to zero&lt;br />&lt;/h1>
&lt;p>nemo_t.dataset[&amp;lsquo;depth4D&amp;rsquo;],_ = xr.broadcast( nemo_t.dataset[&amp;lsquo;depth_0&amp;rsquo;], nemo_t.dataset[&amp;lsquo;temperature&amp;rsquo;] )&lt;br />
nemo_w_4 = nemo_t.differentiate( &amp;lsquo;depth4D&amp;rsquo;, dim='z_dim&amp;rsquo;, out_var_str='dzdz&amp;rsquo; )&lt;br />
&lt;br />
&lt;b>Provide an existing target NEMO object and target variable name:&lt;/b>&lt;br />
nemo_w_1 = nemo_t.differentiate( &amp;lsquo;temperature&amp;rsquo;, dim='z_dim&amp;rsquo;, out_var_str='dTdz&amp;rsquo;, out_obj=nemo_w_1 )&lt;br />
&lt;br />
&lt;br />
Parameters&lt;br />
&amp;mdash;&amp;mdash;&amp;mdash;-&lt;br />
in_var_str : str, name of variable to differentiate&lt;br />
config_path : str, path to the w grid config file&lt;br />
dim : str, dimension to operate over. E.g. {&amp;lsquo;z_dim&amp;rsquo;, &amp;lsquo;y_dim&amp;rsquo;, &amp;lsquo;x_dim&amp;rsquo;, &amp;lsquo;t_dim&amp;rsquo;}&lt;br />
out_var_str : str, (optional) name of the target xr.DataArray&lt;br />
out_obj : exiting NEMO obj to store xr.DataArray (optional)&lt;br />
&lt;br />&lt;/p>
&lt;/blockquote>
&lt;h5 id="griddedapply_doodson_x0_filter">Gridded.apply_doodson_x0_filter()&lt;/h5>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">
&lt;span style="color:#204a87;font-weight:bold">def&lt;/span> &lt;span style="color:#000">Gridded&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">apply_doodson_x0_filter&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#3465a4">self&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">var_str&lt;/span>&lt;span style="color:#000;font-weight:bold">):&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;blockquote>
&lt;p>&lt;br />
Applies Doodson X0 filter to a variable.&lt;br />
&lt;br />
Input variable is expected to be hourly.&lt;br />
Output is saved back to original dataset as {var_str}_dxo&lt;br />
&lt;br />
!!WARNING: Will load in entire variable to memory. If dataset large,&lt;br />
then subset before using this method or ensure you have enough free&lt;br />
RAM to hold the variable (twice).&lt;br />
&lt;br />
DB:: Currently not tested in unit_test.py&lt;br />
&lt;br />&lt;/p>
&lt;/blockquote>
&lt;h5 id="griddedget_e3_from_ssh">Gridded.get_e3_from_ssh()&lt;/h5>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">&lt;span style="color:#5c35cc;font-weight:bold">@staticmethod&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">def&lt;/span> &lt;span style="color:#000">Gridded&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">get_e3_from_ssh&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">nemo_t&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">e3t&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#3465a4">True&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">e3u&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#3465a4">False&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">e3v&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#3465a4">False&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">e3f&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#3465a4">False&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">e3w&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#3465a4">False&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">dom_fn&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#3465a4">None&lt;/span>&lt;span style="color:#000;font-weight:bold">):&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;blockquote>
&lt;p>&lt;br />
Where the model has been run with a nonlinear free surface&lt;br />
and z* variable volumne (ln_vvl_zstar=True) then the vertical scale factors&lt;br />
will vary in time (and space). This function will compute the vertical&lt;br />
scale factors e3t, e3u, e3v, e3f and e3w by using the sea surface height&lt;br />
field (ssh variable) and initial scale factors from the domain_cfg file.&lt;br />
The vertical scale factors will be computed at the same model time as the&lt;br />
ssh and if the ssh field is averaged in time then the scale factors will&lt;br />
also be time averages.&lt;br />
&lt;br />
A t-grid NEMO object containing the ssh variable must be passed in. Either&lt;br />
the domain_cfg path must have been passed in as an argument when the NEMO&lt;br />
object was created or it must be passed in here using the dom_fn argument.&lt;br />
&lt;br />
e.g. e3t,e3v,e3f = coast.NEMO.get_e3_from_ssh(nemo_t,true,false,true,true,false)&lt;br />
&lt;br />
Parameters&lt;br />
&amp;mdash;&amp;mdash;&amp;mdash;-&lt;br />
nemo_t : (Coast.NEMO), NEMO object on the t-grid containing the ssh variable&lt;br />
e3t : (boolean), true if e3t is to be returned. Default True.&lt;br />
e3u : (boolean), true if e3u is to be returned. Default False.&lt;br />
e3v : (boolean), true if e3v is to be returned. Default False.&lt;br />
e3f : (boolean), true if e3f is to be returned. Default False.&lt;br />
e3w : (boolean), true if e3w is to be returned. Default False.&lt;br />
dom_fn : (str), Optional, path to domain_cfg file.&lt;br />
&lt;br />
Returns&lt;br />
&amp;mdash;&amp;mdash;-&lt;br />
Tuple of xarray.DataArrays&lt;br />
(e3t, e3u, e3v, e3f, e3w)&lt;br />
Only those requested will be returned, but the ordering is always the same.&lt;br />
&lt;br />&lt;/p>
&lt;/blockquote>
&lt;h5 id="griddedharmonics_combine">Gridded.harmonics_combine()&lt;/h5>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">
&lt;span style="color:#204a87;font-weight:bold">def&lt;/span> &lt;span style="color:#000">Gridded&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">harmonics_combine&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#3465a4">self&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">constituents&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">components&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#000">unknown&lt;/span>&lt;span style="color:#000;font-weight:bold">):&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;blockquote>
&lt;p>&lt;br />
Contains a new NEMO object containing combined harmonic information&lt;br />
from the original object.&lt;br />
&lt;br />
NEMO saves harmonics to individual variables such as M2x, M2y&amp;hellip; etc.&lt;br />
This routine will combine these variables (depending on constituents)&lt;br />
into a single data array. This new array will have the new dimension&lt;br />
&amp;lsquo;constituent&amp;rsquo; and a new data coordinate &amp;lsquo;constituent_name&amp;rsquo;.&lt;br />
&lt;br />
Parameters&lt;br />
&amp;mdash;&amp;mdash;&amp;mdash;-&lt;br />
constituents : List of strings containing constituent names to combine.&lt;br />
Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â  Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â  Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â  The case of these strings should match that used in&lt;br />
Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â  Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â  Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â  NEMO output. If a constituent is not found, no problem,&lt;br />
Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â  Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â  Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â  it just won&amp;rsquo;t be in the combined dataset.&lt;br />
components : List of strings containing harmonic components to look&lt;br />
Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â  Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â  Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â  for. By default, this looks for the complex components&lt;br />
Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â  Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â  Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â  &amp;lsquo;x&amp;rsquo; and &amp;lsquo;y&amp;rsquo;. E.g. if constituents = [&amp;lsquo;M2&amp;rsquo;] and&lt;br />
Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â  Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â  Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â  components is left as default, then the routine looks&lt;br />
Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â  Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â  Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â  for [&amp;lsquo;M2x&amp;rsquo;, and &amp;lsquo;M2y&amp;rsquo;].&lt;br />
&lt;br />
Returns&lt;br />
&amp;mdash;&amp;mdash;-&lt;br />
NEMO() object, containing combined harmonic variables in a new dataset.&lt;br />
&lt;br />&lt;/p>
&lt;/blockquote>
&lt;h5 id="griddedharmonics_convert">Gridded.harmonics_convert()&lt;/h5>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">
&lt;span style="color:#204a87;font-weight:bold">def&lt;/span> &lt;span style="color:#000">Gridded&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">harmonics_convert&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#3465a4">self&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">direction&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#000">cart2polar&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">x_var&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#000">harmonic_x&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">y_var&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#000">harmonic_y&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">a_var&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#000">harmonic_a&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">g_var&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#000">harmonic_g&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">degrees&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#3465a4">True&lt;/span>&lt;span style="color:#000;font-weight:bold">):&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;blockquote>
&lt;p>&lt;br />
Converts NEMO harmonics from cartesian to polar or vice versa.&lt;br />
Make sure this NEMO object contains combined harmonic variables&lt;br />
obtained using harmonics_combine().&lt;br />
&lt;br />
&lt;b>*Note:&lt;/b>&lt;br />
&lt;br />
Parameters&lt;br />
&amp;mdash;&amp;mdash;&amp;mdash;-&lt;br />
direction (str) : Choose &amp;lsquo;cart2polar&amp;rsquo; or &amp;lsquo;polar2cart&amp;rsquo;. If &amp;lsquo;cart2polar'&lt;br />
Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â  Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â  Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â  Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â  Then will look for variables x_var and y_var. If&lt;br />
Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â  Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â  Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â  Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â  polar2cart, will look for a_var (amplitude) and&lt;br />
Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â  Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â  Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â  Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â  g_var (phase).&lt;br />
x_var (str)Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â  : Harmonic x variable name in dataset (or output)&lt;br />
Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â  Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â  Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â  Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â  default = &amp;lsquo;harmonic_x&amp;rsquo;.&lt;br />
y_var (str)Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â  : Harmonic y variable name in dataset (or output)&lt;br />
Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â  Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â  Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â  Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â  default = &amp;lsquo;harmonic_y&amp;rsquo;.&lt;br />
a_var (str)Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â  : Harmonic amplitude variable name in dataset (or output)&lt;br />
Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â  Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â  Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â  Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â  default = &amp;lsquo;harmonic_a&amp;rsquo;.&lt;br />
g_var (str)Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â  : Harmonic phase variable name in dataset (or output)&lt;br />
Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â  Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â  Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â  Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â  default = &amp;lsquo;harmonic_g&amp;rsquo;.&lt;br />
degrees (bool) : Whether input/output phase are/will be in degrees.&lt;br />
Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â  Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â  Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â  Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â  Default is True.&lt;br />
&lt;br />
Returns&lt;br />
&amp;mdash;&amp;mdash;-&lt;br />
Modifies NEMO() dataset in place. New variables added.&lt;br />
&lt;br />&lt;/p>
&lt;/blockquote>
&lt;h5 id="griddedtime_slice">Gridded.time_slice()&lt;/h5>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">
&lt;span style="color:#204a87;font-weight:bold">def&lt;/span> &lt;span style="color:#000">Gridded&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">time_slice&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#3465a4">self&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">date0&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">date1&lt;/span>&lt;span style="color:#000;font-weight:bold">):&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;blockquote>
&lt;p>&lt;br />
Return new Gridded object, indexed between dates date0 and date1&lt;br />
&lt;br />&lt;/p>
&lt;/blockquote>
&lt;h5 id="griddedcalculate_vertical_mask">Gridded.calculate_vertical_mask()&lt;/h5>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">
&lt;span style="color:#204a87;font-weight:bold">def&lt;/span> &lt;span style="color:#000">Gridded&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">calculate_vertical_mask&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#3465a4">self&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">Zmax&lt;/span>&lt;span style="color:#000;font-weight:bold">):&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;blockquote>
&lt;p>&lt;br />
Calculates a 3D mask to a specified level Zmax. 1 for sea; 0 for below sea bed&lt;br />
and linearly ramped for last level&lt;br />
&lt;br />&lt;/p>
&lt;/blockquote></description></item><item><title>Docs: Index</title><link>https://british-oceanographic-data-centre.github.io/COAsT/docs/reference/</link><pubDate>Thu, 20 Oct 2022 00:00:00 +0000</pubDate><guid>https://british-oceanographic-data-centre.github.io/COAsT/docs/reference/</guid><description>
&lt;h3 id="objects">Objects&lt;/h3>
&lt;p>&lt;a href="#setup_dask_client">setup_dask_client()&lt;/a>&lt;br />
&lt;a href="#indexed">Indexed()&lt;/a>&lt;br />
&lt;a href="#indexedapply_config_mappings">Indexed.apply_config_mappings()&lt;/a>&lt;br />
&lt;a href="#indexedinsert_dataset">Indexed.insert_dataset()&lt;/a>&lt;br />&lt;/p>
&lt;p>Index class.&lt;/p>
&lt;h4 id="setup_dask_client">setup_dask_client()&lt;/h4>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">
&lt;span style="color:#204a87;font-weight:bold">def&lt;/span> &lt;span style="color:#000">setup_dask_client&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">workers&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">2&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">threads&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">2&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">memory_limit_per_worker&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">2&lt;/span>&lt;span style="color:#000">GB&lt;/span>&lt;span style="color:#000;font-weight:bold">):&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;blockquote>
&lt;p>&lt;br />
None&lt;br />
&lt;br />&lt;/p>
&lt;/blockquote>
&lt;h4 id="indexed">Indexed()&lt;/h4>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">&lt;span style="color:#204a87;font-weight:bold">class&lt;/span> &lt;span style="color:#000">Indexed&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">Coast&lt;/span>&lt;span style="color:#000;font-weight:bold">):&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;pre>&lt;code>None
&lt;/code>&lt;/pre>&lt;h5 id="indexedapply_config_mappings">Indexed.apply_config_mappings()&lt;/h5>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">
&lt;span style="color:#204a87;font-weight:bold">def&lt;/span> &lt;span style="color:#000">Indexed&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">apply_config_mappings&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#3465a4">self&lt;/span>&lt;span style="color:#000;font-weight:bold">):&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;blockquote>
&lt;p>&lt;br />
Applies json configuration and mappings&lt;br />
&lt;br />&lt;/p>
&lt;/blockquote>
&lt;h5 id="indexedinsert_dataset">Indexed.insert_dataset()&lt;/h5>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">
&lt;span style="color:#204a87;font-weight:bold">def&lt;/span> &lt;span style="color:#000">Indexed&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">insert_dataset&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#3465a4">self&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">dataset&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">apply_config_mappings&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#3465a4">False&lt;/span>&lt;span style="color:#000;font-weight:bold">):&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;blockquote>
&lt;p>&lt;br />
Insert a dataset straight into this object instance&lt;br />
&lt;br />&lt;/p>
&lt;/blockquote></description></item></channel></rss>